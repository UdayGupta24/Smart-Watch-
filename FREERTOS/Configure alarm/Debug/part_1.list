
part_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083fc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  0800859c  0800859c  0000959c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089ec  080089ec  0000a07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080089ec  080089ec  000099ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089f4  080089f4  0000a07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089f4  080089f4  000099f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080089f8  080089f8  000099f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  080089fc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ca0  2000007c  08008a78  0000a07c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d1c  08008a78  0000ad1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a07c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b81a  00000000  00000000  0000a0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f1e  00000000  00000000  000258c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001690  00000000  00000000  000297e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000117d  00000000  00000000  0002ae78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004601  00000000  00000000  0002bff5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001af80  00000000  00000000  000305f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e234  00000000  00000000  0004b576  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e97aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006348  00000000  00000000  000e97f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  000efb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008584 	.word	0x08008584

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08008584 	.word	0x08008584

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <led_effect_stop>:
#include "main.h"


void led_effect_stop(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af02      	add	r7, sp, #8
	for(int i=0;i<4;i++)
 80005e2:	2300      	movs	r3, #0
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	e00e      	b.n	8000606 <led_effect_stop+0x2a>
		xTimerStop(timer_handle[i],portMAX_DELAY);
 80005e8:	4a0b      	ldr	r2, [pc, #44]	@ (8000618 <led_effect_stop+0x3c>)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005f0:	f04f 33ff 	mov.w	r3, #4294967295
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	2300      	movs	r3, #0
 80005f8:	2200      	movs	r2, #0
 80005fa:	2103      	movs	r1, #3
 80005fc:	f006 fb4e 	bl	8006c9c <xTimerGenericCommand>
	for(int i=0;i<4;i++)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	3301      	adds	r3, #1
 8000604:	607b      	str	r3, [r7, #4]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	2b03      	cmp	r3, #3
 800060a:	dded      	ble.n	80005e8 <led_effect_stop+0xc>
}
 800060c:	bf00      	nop
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000120 	.word	0x20000120

0800061c <led_effect>:

void led_effect(int i)
{
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b085      	sub	sp, #20
 8000620:	af02      	add	r7, sp, #8
 8000622:	6078      	str	r0, [r7, #4]
	led_effect_stop();
 8000624:	f7ff ffda 	bl	80005dc <led_effect_stop>
	xTimerStart(timer_handle[i-1],portMAX_DELAY);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	3b01      	subs	r3, #1
 800062c:	4a08      	ldr	r2, [pc, #32]	@ (8000650 <led_effect+0x34>)
 800062e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000632:	f005 fc59 	bl	8005ee8 <xTaskGetTickCount>
 8000636:	4602      	mov	r2, r0
 8000638:	f04f 33ff 	mov.w	r3, #4294967295
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	2300      	movs	r3, #0
 8000640:	2101      	movs	r1, #1
 8000642:	4620      	mov	r0, r4
 8000644:	f006 fb2a 	bl	8006c9c <xTimerGenericCommand>
}
 8000648:	bf00      	nop
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	bd90      	pop	{r4, r7, pc}
 8000650:	20000120 	.word	0x20000120

08000654 <led_effect1>:
void led_effect1(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
	if(flag1 ==1)
 8000658:	4b1c      	ldr	r3, [pc, #112]	@ (80006cc <led_effect1+0x78>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b01      	cmp	r3, #1
 800065e:	d116      	bne.n	800068e <led_effect1+0x3a>
	{
		HAL_GPIO_WritePin(GPIOA,LED1_Pin,GPIO_PIN_SET);
 8000660:	2201      	movs	r2, #1
 8000662:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000666:	481a      	ldr	r0, [pc, #104]	@ (80006d0 <led_effect1+0x7c>)
 8000668:	f001 fd74 	bl	8002154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LED2_Pin,GPIO_PIN_SET);
 800066c:	2201      	movs	r2, #1
 800066e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000672:	4817      	ldr	r0, [pc, #92]	@ (80006d0 <led_effect1+0x7c>)
 8000674:	f001 fd6e 	bl	8002154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_SET);
 8000678:	2201      	movs	r2, #1
 800067a:	2120      	movs	r1, #32
 800067c:	4815      	ldr	r0, [pc, #84]	@ (80006d4 <led_effect1+0x80>)
 800067e:	f001 fd69 	bl	8002154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LED4_Pin,GPIO_PIN_SET);
 8000682:	2201      	movs	r2, #1
 8000684:	2120      	movs	r1, #32
 8000686:	4812      	ldr	r0, [pc, #72]	@ (80006d0 <led_effect1+0x7c>)
 8000688:	f001 fd64 	bl	8002154 <HAL_GPIO_WritePin>
 800068c:	e015      	b.n	80006ba <led_effect1+0x66>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA,LED1_Pin,GPIO_PIN_RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000694:	480e      	ldr	r0, [pc, #56]	@ (80006d0 <led_effect1+0x7c>)
 8000696:	f001 fd5d 	bl	8002154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LED2_Pin,GPIO_PIN_RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006a0:	480b      	ldr	r0, [pc, #44]	@ (80006d0 <led_effect1+0x7c>)
 80006a2:	f001 fd57 	bl	8002154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2120      	movs	r1, #32
 80006aa:	480a      	ldr	r0, [pc, #40]	@ (80006d4 <led_effect1+0x80>)
 80006ac:	f001 fd52 	bl	8002154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LED4_Pin,GPIO_PIN_RESET);
 80006b0:	2200      	movs	r2, #0
 80006b2:	2120      	movs	r1, #32
 80006b4:	4806      	ldr	r0, [pc, #24]	@ (80006d0 <led_effect1+0x7c>)
 80006b6:	f001 fd4d 	bl	8002154 <HAL_GPIO_WritePin>
	}
	flag1 =flag1^1;
 80006ba:	4b04      	ldr	r3, [pc, #16]	@ (80006cc <led_effect1+0x78>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	f083 0301 	eor.w	r3, r3, #1
 80006c2:	4a02      	ldr	r2, [pc, #8]	@ (80006cc <led_effect1+0x78>)
 80006c4:	6013      	str	r3, [r2, #0]
}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000004 	.word	0x20000004
 80006d0:	40020000 	.word	0x40020000
 80006d4:	40020400 	.word	0x40020400

080006d8 <led_effect2>:
void led_effect2(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	if(flag2 ==1)
 80006dc:	4b1c      	ldr	r3, [pc, #112]	@ (8000750 <led_effect2+0x78>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d116      	bne.n	8000712 <led_effect2+0x3a>
	{
		HAL_GPIO_WritePin(GPIOA,LED1_Pin,GPIO_PIN_SET);
 80006e4:	2201      	movs	r2, #1
 80006e6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006ea:	481a      	ldr	r0, [pc, #104]	@ (8000754 <led_effect2+0x7c>)
 80006ec:	f001 fd32 	bl	8002154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LED2_Pin,GPIO_PIN_RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006f6:	4817      	ldr	r0, [pc, #92]	@ (8000754 <led_effect2+0x7c>)
 80006f8:	f001 fd2c 	bl	8002154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_SET);
 80006fc:	2201      	movs	r2, #1
 80006fe:	2120      	movs	r1, #32
 8000700:	4815      	ldr	r0, [pc, #84]	@ (8000758 <led_effect2+0x80>)
 8000702:	f001 fd27 	bl	8002154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LED4_Pin,GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	2120      	movs	r1, #32
 800070a:	4812      	ldr	r0, [pc, #72]	@ (8000754 <led_effect2+0x7c>)
 800070c:	f001 fd22 	bl	8002154 <HAL_GPIO_WritePin>
 8000710:	e015      	b.n	800073e <led_effect2+0x66>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA,LED1_Pin,GPIO_PIN_RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000718:	480e      	ldr	r0, [pc, #56]	@ (8000754 <led_effect2+0x7c>)
 800071a:	f001 fd1b 	bl	8002154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LED2_Pin,GPIO_PIN_SET);
 800071e:	2201      	movs	r2, #1
 8000720:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000724:	480b      	ldr	r0, [pc, #44]	@ (8000754 <led_effect2+0x7c>)
 8000726:	f001 fd15 	bl	8002154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
 800072a:	2200      	movs	r2, #0
 800072c:	2120      	movs	r1, #32
 800072e:	480a      	ldr	r0, [pc, #40]	@ (8000758 <led_effect2+0x80>)
 8000730:	f001 fd10 	bl	8002154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LED4_Pin,GPIO_PIN_SET);
 8000734:	2201      	movs	r2, #1
 8000736:	2120      	movs	r1, #32
 8000738:	4806      	ldr	r0, [pc, #24]	@ (8000754 <led_effect2+0x7c>)
 800073a:	f001 fd0b 	bl	8002154 <HAL_GPIO_WritePin>
	}
	flag2 =flag2^1;
 800073e:	4b04      	ldr	r3, [pc, #16]	@ (8000750 <led_effect2+0x78>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f083 0301 	eor.w	r3, r3, #1
 8000746:	4a02      	ldr	r2, [pc, #8]	@ (8000750 <led_effect2+0x78>)
 8000748:	6013      	str	r3, [r2, #0]
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000008 	.word	0x20000008
 8000754:	40020000 	.word	0x40020000
 8000758:	40020400 	.word	0x40020400

0800075c <led_effect3>:
void led_effect3(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
	if(flag1 ==1)
 8000760:	4b1c      	ldr	r3, [pc, #112]	@ (80007d4 <led_effect3+0x78>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2b01      	cmp	r3, #1
 8000766:	d116      	bne.n	8000796 <led_effect3+0x3a>
	{
		HAL_GPIO_WritePin(GPIOA,LED1_Pin,GPIO_PIN_SET);
 8000768:	2201      	movs	r2, #1
 800076a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800076e:	481a      	ldr	r0, [pc, #104]	@ (80007d8 <led_effect3+0x7c>)
 8000770:	f001 fcf0 	bl	8002154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LED2_Pin,GPIO_PIN_SET);
 8000774:	2201      	movs	r2, #1
 8000776:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800077a:	4817      	ldr	r0, [pc, #92]	@ (80007d8 <led_effect3+0x7c>)
 800077c:	f001 fcea 	bl	8002154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	2120      	movs	r1, #32
 8000784:	4815      	ldr	r0, [pc, #84]	@ (80007dc <led_effect3+0x80>)
 8000786:	f001 fce5 	bl	8002154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LED4_Pin,GPIO_PIN_RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	2120      	movs	r1, #32
 800078e:	4812      	ldr	r0, [pc, #72]	@ (80007d8 <led_effect3+0x7c>)
 8000790:	f001 fce0 	bl	8002154 <HAL_GPIO_WritePin>
 8000794:	e015      	b.n	80007c2 <led_effect3+0x66>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA,LED1_Pin,GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800079c:	480e      	ldr	r0, [pc, #56]	@ (80007d8 <led_effect3+0x7c>)
 800079e:	f001 fcd9 	bl	8002154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LED2_Pin,GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007a8:	480b      	ldr	r0, [pc, #44]	@ (80007d8 <led_effect3+0x7c>)
 80007aa:	f001 fcd3 	bl	8002154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_SET);
 80007ae:	2201      	movs	r2, #1
 80007b0:	2120      	movs	r1, #32
 80007b2:	480a      	ldr	r0, [pc, #40]	@ (80007dc <led_effect3+0x80>)
 80007b4:	f001 fcce 	bl	8002154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LED4_Pin,GPIO_PIN_SET);
 80007b8:	2201      	movs	r2, #1
 80007ba:	2120      	movs	r1, #32
 80007bc:	4806      	ldr	r0, [pc, #24]	@ (80007d8 <led_effect3+0x7c>)
 80007be:	f001 fcc9 	bl	8002154 <HAL_GPIO_WritePin>
	}
	flag1 =flag1^1;
 80007c2:	4b04      	ldr	r3, [pc, #16]	@ (80007d4 <led_effect3+0x78>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f083 0301 	eor.w	r3, r3, #1
 80007ca:	4a02      	ldr	r2, [pc, #8]	@ (80007d4 <led_effect3+0x78>)
 80007cc:	6013      	str	r3, [r2, #0]
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000004 	.word	0x20000004
 80007d8:	40020000 	.word	0x40020000
 80007dc:	40020400 	.word	0x40020400

080007e0 <led_effect4>:
void led_effect4(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	if(flag4 ==1)
 80007e4:	4b3a      	ldr	r3, [pc, #232]	@ (80008d0 <led_effect4+0xf0>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	d116      	bne.n	800081a <led_effect4+0x3a>
	{
		HAL_GPIO_WritePin(GPIOA,LED1_Pin,GPIO_PIN_SET);
 80007ec:	2201      	movs	r2, #1
 80007ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007f2:	4838      	ldr	r0, [pc, #224]	@ (80008d4 <led_effect4+0xf4>)
 80007f4:	f001 fcae 	bl	8002154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LED2_Pin,GPIO_PIN_RESET);
 80007f8:	2200      	movs	r2, #0
 80007fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007fe:	4835      	ldr	r0, [pc, #212]	@ (80008d4 <led_effect4+0xf4>)
 8000800:	f001 fca8 	bl	8002154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
 8000804:	2200      	movs	r2, #0
 8000806:	2120      	movs	r1, #32
 8000808:	4833      	ldr	r0, [pc, #204]	@ (80008d8 <led_effect4+0xf8>)
 800080a:	f001 fca3 	bl	8002154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LED4_Pin,GPIO_PIN_RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	2120      	movs	r1, #32
 8000812:	4830      	ldr	r0, [pc, #192]	@ (80008d4 <led_effect4+0xf4>)
 8000814:	f001 fc9e 	bl	8002154 <HAL_GPIO_WritePin>
 8000818:	e04b      	b.n	80008b2 <led_effect4+0xd2>
	}
	else if(flag4 ==2)
 800081a:	4b2d      	ldr	r3, [pc, #180]	@ (80008d0 <led_effect4+0xf0>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	2b02      	cmp	r3, #2
 8000820:	d116      	bne.n	8000850 <led_effect4+0x70>
	{
		HAL_GPIO_WritePin(GPIOA,LED1_Pin,GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000828:	482a      	ldr	r0, [pc, #168]	@ (80008d4 <led_effect4+0xf4>)
 800082a:	f001 fc93 	bl	8002154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LED2_Pin,GPIO_PIN_SET);
 800082e:	2201      	movs	r2, #1
 8000830:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000834:	4827      	ldr	r0, [pc, #156]	@ (80008d4 <led_effect4+0xf4>)
 8000836:	f001 fc8d 	bl	8002154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	2120      	movs	r1, #32
 800083e:	4826      	ldr	r0, [pc, #152]	@ (80008d8 <led_effect4+0xf8>)
 8000840:	f001 fc88 	bl	8002154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LED4_Pin,GPIO_PIN_RESET);
 8000844:	2200      	movs	r2, #0
 8000846:	2120      	movs	r1, #32
 8000848:	4822      	ldr	r0, [pc, #136]	@ (80008d4 <led_effect4+0xf4>)
 800084a:	f001 fc83 	bl	8002154 <HAL_GPIO_WritePin>
 800084e:	e030      	b.n	80008b2 <led_effect4+0xd2>
	}
	else if(flag4 ==3)
 8000850:	4b1f      	ldr	r3, [pc, #124]	@ (80008d0 <led_effect4+0xf0>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	2b03      	cmp	r3, #3
 8000856:	d116      	bne.n	8000886 <led_effect4+0xa6>
	{
		HAL_GPIO_WritePin(GPIOA,LED1_Pin,GPIO_PIN_RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800085e:	481d      	ldr	r0, [pc, #116]	@ (80008d4 <led_effect4+0xf4>)
 8000860:	f001 fc78 	bl	8002154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LED2_Pin,GPIO_PIN_RESET);
 8000864:	2200      	movs	r2, #0
 8000866:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800086a:	481a      	ldr	r0, [pc, #104]	@ (80008d4 <led_effect4+0xf4>)
 800086c:	f001 fc72 	bl	8002154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_SET);
 8000870:	2201      	movs	r2, #1
 8000872:	2120      	movs	r1, #32
 8000874:	4818      	ldr	r0, [pc, #96]	@ (80008d8 <led_effect4+0xf8>)
 8000876:	f001 fc6d 	bl	8002154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LED4_Pin,GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	2120      	movs	r1, #32
 800087e:	4815      	ldr	r0, [pc, #84]	@ (80008d4 <led_effect4+0xf4>)
 8000880:	f001 fc68 	bl	8002154 <HAL_GPIO_WritePin>
 8000884:	e015      	b.n	80008b2 <led_effect4+0xd2>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA,LED1_Pin,GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800088c:	4811      	ldr	r0, [pc, #68]	@ (80008d4 <led_effect4+0xf4>)
 800088e:	f001 fc61 	bl	8002154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LED2_Pin,GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000898:	480e      	ldr	r0, [pc, #56]	@ (80008d4 <led_effect4+0xf4>)
 800089a:	f001 fc5b 	bl	8002154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	2120      	movs	r1, #32
 80008a2:	480d      	ldr	r0, [pc, #52]	@ (80008d8 <led_effect4+0xf8>)
 80008a4:	f001 fc56 	bl	8002154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LED4_Pin,GPIO_PIN_SET);
 80008a8:	2201      	movs	r2, #1
 80008aa:	2120      	movs	r1, #32
 80008ac:	4809      	ldr	r0, [pc, #36]	@ (80008d4 <led_effect4+0xf4>)
 80008ae:	f001 fc51 	bl	8002154 <HAL_GPIO_WritePin>
	}
	flag4 =(flag4+1)%4;
 80008b2:	4b07      	ldr	r3, [pc, #28]	@ (80008d0 <led_effect4+0xf0>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	3301      	adds	r3, #1
 80008b8:	425a      	negs	r2, r3
 80008ba:	f003 0303 	and.w	r3, r3, #3
 80008be:	f002 0203 	and.w	r2, r2, #3
 80008c2:	bf58      	it	pl
 80008c4:	4253      	negpl	r3, r2
 80008c6:	4a02      	ldr	r2, [pc, #8]	@ (80008d0 <led_effect4+0xf0>)
 80008c8:	6013      	str	r3, [r2, #0]
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	2000000c 	.word	0x2000000c
 80008d4:	40020000 	.word	0x40020000
 80008d8:	40020400 	.word	0x40020400

080008dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08c      	sub	sp, #48	@ 0x30
 80008e0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008e2:	f001 f8fd 	bl	8001ae0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008e6:	f000 f91b 	bl	8000b20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ea:	f000 f9d7 	bl	8000c9c <MX_GPIO_Init>
  MX_RTC_Init();
 80008ee:	f000 f985 	bl	8000bfc <MX_RTC_Init>
  MX_USART2_UART_Init();
 80008f2:	f000 f9a9 	bl	8000c48 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //SEGGER_SYSVIEW_Conf();
  //xReturned = xTaskCreate(SEGGER_SYSVIEW_InitTask, "Start SYSVIEW", 200, NULL, 4, &startSYSVIEW_handle);
  xReturned=xTaskCreate(menu_function,"menu",200,"menu",2,&xHandlemenu);
 80008f6:	4b6f      	ldr	r3, [pc, #444]	@ (8000ab4 <main+0x1d8>)
 80008f8:	9301      	str	r3, [sp, #4]
 80008fa:	2302      	movs	r3, #2
 80008fc:	9300      	str	r3, [sp, #0]
 80008fe:	4b6e      	ldr	r3, [pc, #440]	@ (8000ab8 <main+0x1dc>)
 8000900:	22c8      	movs	r2, #200	@ 0xc8
 8000902:	496d      	ldr	r1, [pc, #436]	@ (8000ab8 <main+0x1dc>)
 8000904:	486d      	ldr	r0, [pc, #436]	@ (8000abc <main+0x1e0>)
 8000906:	f005 f83f 	bl	8005988 <xTaskCreate>
 800090a:	6238      	str	r0, [r7, #32]
  configASSERT(xReturned==pdPASS);
 800090c:	6a3b      	ldr	r3, [r7, #32]
 800090e:	2b01      	cmp	r3, #1
 8000910:	d00b      	beq.n	800092a <main+0x4e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000916:	f383 8811 	msr	BASEPRI, r3
 800091a:	f3bf 8f6f 	isb	sy
 800091e:	f3bf 8f4f 	dsb	sy
 8000922:	61fb      	str	r3, [r7, #28]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000924:	bf00      	nop
 8000926:	bf00      	nop
 8000928:	e7fd      	b.n	8000926 <main+0x4a>
  xReturned=xTaskCreate(cmd_handler_function,"task_handler",200,"cmd_handler",2,&xHandlecmd_handler);
 800092a:	4b65      	ldr	r3, [pc, #404]	@ (8000ac0 <main+0x1e4>)
 800092c:	9301      	str	r3, [sp, #4]
 800092e:	2302      	movs	r3, #2
 8000930:	9300      	str	r3, [sp, #0]
 8000932:	4b64      	ldr	r3, [pc, #400]	@ (8000ac4 <main+0x1e8>)
 8000934:	22c8      	movs	r2, #200	@ 0xc8
 8000936:	4964      	ldr	r1, [pc, #400]	@ (8000ac8 <main+0x1ec>)
 8000938:	4864      	ldr	r0, [pc, #400]	@ (8000acc <main+0x1f0>)
 800093a:	f005 f825 	bl	8005988 <xTaskCreate>
 800093e:	6238      	str	r0, [r7, #32]
  configASSERT(xReturned==pdPASS);
 8000940:	6a3b      	ldr	r3, [r7, #32]
 8000942:	2b01      	cmp	r3, #1
 8000944:	d00b      	beq.n	800095e <main+0x82>
	__asm volatile
 8000946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800094a:	f383 8811 	msr	BASEPRI, r3
 800094e:	f3bf 8f6f 	isb	sy
 8000952:	f3bf 8f4f 	dsb	sy
 8000956:	61bb      	str	r3, [r7, #24]
}
 8000958:	bf00      	nop
 800095a:	bf00      	nop
 800095c:	e7fd      	b.n	800095a <main+0x7e>
  xReturned=xTaskCreate(print_task,"print_task",200,"print_task",2,&xHandleprint_task);
 800095e:	4b5c      	ldr	r3, [pc, #368]	@ (8000ad0 <main+0x1f4>)
 8000960:	9301      	str	r3, [sp, #4]
 8000962:	2302      	movs	r3, #2
 8000964:	9300      	str	r3, [sp, #0]
 8000966:	4b5b      	ldr	r3, [pc, #364]	@ (8000ad4 <main+0x1f8>)
 8000968:	22c8      	movs	r2, #200	@ 0xc8
 800096a:	495a      	ldr	r1, [pc, #360]	@ (8000ad4 <main+0x1f8>)
 800096c:	485a      	ldr	r0, [pc, #360]	@ (8000ad8 <main+0x1fc>)
 800096e:	f005 f80b 	bl	8005988 <xTaskCreate>
 8000972:	6238      	str	r0, [r7, #32]
  configASSERT(xReturned==pdPASS);
 8000974:	6a3b      	ldr	r3, [r7, #32]
 8000976:	2b01      	cmp	r3, #1
 8000978:	d00b      	beq.n	8000992 <main+0xb6>
	__asm volatile
 800097a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800097e:	f383 8811 	msr	BASEPRI, r3
 8000982:	f3bf 8f6f 	isb	sy
 8000986:	f3bf 8f4f 	dsb	sy
 800098a:	617b      	str	r3, [r7, #20]
}
 800098c:	bf00      	nop
 800098e:	bf00      	nop
 8000990:	e7fd      	b.n	800098e <main+0xb2>
  xReturned=xTaskCreate(led_task,"led",200,"led_task",2,&xHandleled_task);
 8000992:	4b52      	ldr	r3, [pc, #328]	@ (8000adc <main+0x200>)
 8000994:	9301      	str	r3, [sp, #4]
 8000996:	2302      	movs	r3, #2
 8000998:	9300      	str	r3, [sp, #0]
 800099a:	4b51      	ldr	r3, [pc, #324]	@ (8000ae0 <main+0x204>)
 800099c:	22c8      	movs	r2, #200	@ 0xc8
 800099e:	4951      	ldr	r1, [pc, #324]	@ (8000ae4 <main+0x208>)
 80009a0:	4851      	ldr	r0, [pc, #324]	@ (8000ae8 <main+0x20c>)
 80009a2:	f004 fff1 	bl	8005988 <xTaskCreate>
 80009a6:	6238      	str	r0, [r7, #32]
  configASSERT(xReturned==pdPASS);
 80009a8:	6a3b      	ldr	r3, [r7, #32]
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d00b      	beq.n	80009c6 <main+0xea>
	__asm volatile
 80009ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80009b2:	f383 8811 	msr	BASEPRI, r3
 80009b6:	f3bf 8f6f 	isb	sy
 80009ba:	f3bf 8f4f 	dsb	sy
 80009be:	613b      	str	r3, [r7, #16]
}
 80009c0:	bf00      	nop
 80009c2:	bf00      	nop
 80009c4:	e7fd      	b.n	80009c2 <main+0xe6>
  xReturned=xTaskCreate(rtc_task,"rtc_task",200,"rtc_task",2,&xHandlertc_task);
 80009c6:	4b49      	ldr	r3, [pc, #292]	@ (8000aec <main+0x210>)
 80009c8:	9301      	str	r3, [sp, #4]
 80009ca:	2302      	movs	r3, #2
 80009cc:	9300      	str	r3, [sp, #0]
 80009ce:	4b48      	ldr	r3, [pc, #288]	@ (8000af0 <main+0x214>)
 80009d0:	22c8      	movs	r2, #200	@ 0xc8
 80009d2:	4947      	ldr	r1, [pc, #284]	@ (8000af0 <main+0x214>)
 80009d4:	4847      	ldr	r0, [pc, #284]	@ (8000af4 <main+0x218>)
 80009d6:	f004 ffd7 	bl	8005988 <xTaskCreate>
 80009da:	6238      	str	r0, [r7, #32]
  configASSERT(xReturned==pdPASS);
 80009dc:	6a3b      	ldr	r3, [r7, #32]
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d00b      	beq.n	80009fa <main+0x11e>
	__asm volatile
 80009e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80009e6:	f383 8811 	msr	BASEPRI, r3
 80009ea:	f3bf 8f6f 	isb	sy
 80009ee:	f3bf 8f4f 	dsb	sy
 80009f2:	60fb      	str	r3, [r7, #12]
}
 80009f4:	bf00      	nop
 80009f6:	bf00      	nop
 80009f8:	e7fd      	b.n	80009f6 <main+0x11a>

  q_enqueue = xQueueCreate(10, sizeof(char));
 80009fa:	2200      	movs	r2, #0
 80009fc:	2101      	movs	r1, #1
 80009fe:	200a      	movs	r0, #10
 8000a00:	f004 fa69 	bl	8004ed6 <xQueueGenericCreate>
 8000a04:	4603      	mov	r3, r0
 8000a06:	4a3c      	ldr	r2, [pc, #240]	@ (8000af8 <main+0x21c>)
 8000a08:	6013      	str	r3, [r2, #0]
  configASSERT(q_enqueue != NULL);
 8000a0a:	4b3b      	ldr	r3, [pc, #236]	@ (8000af8 <main+0x21c>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d10b      	bne.n	8000a2a <main+0x14e>
	__asm volatile
 8000a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a16:	f383 8811 	msr	BASEPRI, r3
 8000a1a:	f3bf 8f6f 	isb	sy
 8000a1e:	f3bf 8f4f 	dsb	sy
 8000a22:	60bb      	str	r3, [r7, #8]
}
 8000a24:	bf00      	nop
 8000a26:	bf00      	nop
 8000a28:	e7fd      	b.n	8000a26 <main+0x14a>

  q_print = xQueueCreate(10,sizeof(char*));//change 1
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2104      	movs	r1, #4
 8000a2e:	200a      	movs	r0, #10
 8000a30:	f004 fa51 	bl	8004ed6 <xQueueGenericCreate>
 8000a34:	4603      	mov	r3, r0
 8000a36:	4a31      	ldr	r2, [pc, #196]	@ (8000afc <main+0x220>)
 8000a38:	6013      	str	r3, [r2, #0]
  configASSERT(q_print != NULL);
 8000a3a:	4b30      	ldr	r3, [pc, #192]	@ (8000afc <main+0x220>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d10b      	bne.n	8000a5a <main+0x17e>
	__asm volatile
 8000a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a46:	f383 8811 	msr	BASEPRI, r3
 8000a4a:	f3bf 8f6f 	isb	sy
 8000a4e:	f3bf 8f4f 	dsb	sy
 8000a52:	607b      	str	r3, [r7, #4]
}
 8000a54:	bf00      	nop
 8000a56:	bf00      	nop
 8000a58:	e7fd      	b.n	8000a56 <main+0x17a>

  for(int i=0;i<4;i++)
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a5e:	e013      	b.n	8000a88 <main+0x1ac>
  {
	  timer_handle[i]= xTimerCreate("led_timer",pdMS_TO_TICKS(500),pdTRUE,(void*)i+1,led_effect_callback);
 8000a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a62:	3301      	adds	r3, #1
 8000a64:	461a      	mov	r2, r3
 8000a66:	4b26      	ldr	r3, [pc, #152]	@ (8000b00 <main+0x224>)
 8000a68:	9300      	str	r3, [sp, #0]
 8000a6a:	4613      	mov	r3, r2
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000a72:	4824      	ldr	r0, [pc, #144]	@ (8000b04 <main+0x228>)
 8000a74:	f006 f8b4 	bl	8006be0 <xTimerCreate>
 8000a78:	4602      	mov	r2, r0
 8000a7a:	4923      	ldr	r1, [pc, #140]	@ (8000b08 <main+0x22c>)
 8000a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0;i<4;i++)
 8000a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a84:	3301      	adds	r3, #1
 8000a86:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a8a:	2b03      	cmp	r3, #3
 8000a8c:	dde8      	ble.n	8000a60 <main+0x184>
  }
  HAL_UART_Receive_IT(&huart2, (uint8_t *)&pData, 1);
 8000a8e:	2201      	movs	r2, #1
 8000a90:	491e      	ldr	r1, [pc, #120]	@ (8000b0c <main+0x230>)
 8000a92:	481f      	ldr	r0, [pc, #124]	@ (8000b10 <main+0x234>)
 8000a94:	f002 ff83 	bl	800399e <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000a98:	f003 ff56 	bl	8004948 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000a9c:	4a1d      	ldr	r2, [pc, #116]	@ (8000b14 <main+0x238>)
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	481d      	ldr	r0, [pc, #116]	@ (8000b18 <main+0x23c>)
 8000aa2:	f003 ff9b 	bl	80049dc <osThreadNew>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	4a1c      	ldr	r2, [pc, #112]	@ (8000b1c <main+0x240>)
 8000aaa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000aac:	f003 ff70 	bl	8004990 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <main+0x1d4>
 8000ab4:	20000108 	.word	0x20000108
 8000ab8:	080085a8 	.word	0x080085a8
 8000abc:	0800133d 	.word	0x0800133d
 8000ac0:	20000104 	.word	0x20000104
 8000ac4:	080085b0 	.word	0x080085b0
 8000ac8:	080085bc 	.word	0x080085bc
 8000acc:	08001609 	.word	0x08001609
 8000ad0:	2000010c 	.word	0x2000010c
 8000ad4:	080085cc 	.word	0x080085cc
 8000ad8:	080014a9 	.word	0x080014a9
 8000adc:	20000110 	.word	0x20000110
 8000ae0:	080085d8 	.word	0x080085d8
 8000ae4:	080085e4 	.word	0x080085e4
 8000ae8:	080014e9 	.word	0x080014e9
 8000aec:	20000114 	.word	0x20000114
 8000af0:	080085e8 	.word	0x080085e8
 8000af4:	08001635 	.word	0x08001635
 8000af8:	2000011c 	.word	0x2000011c
 8000afc:	20000118 	.word	0x20000118
 8000b00:	08000e4d 	.word	0x08000e4d
 8000b04:	080085f4 	.word	0x080085f4
 8000b08:	20000120 	.word	0x20000120
 8000b0c:	20000130 	.word	0x20000130
 8000b10:	200000b8 	.word	0x200000b8
 8000b14:	0800897c 	.word	0x0800897c
 8000b18:	08000e9d 	.word	0x08000e9d
 8000b1c:	20000100 	.word	0x20000100

08000b20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b094      	sub	sp, #80	@ 0x50
 8000b24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b26:	f107 0320 	add.w	r3, r7, #32
 8000b2a:	2230      	movs	r2, #48	@ 0x30
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f007 f84c 	bl	8007bcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b34:	f107 030c 	add.w	r3, r7, #12
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b44:	2300      	movs	r3, #0
 8000b46:	60bb      	str	r3, [r7, #8]
 8000b48:	4b2a      	ldr	r3, [pc, #168]	@ (8000bf4 <SystemClock_Config+0xd4>)
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4c:	4a29      	ldr	r2, [pc, #164]	@ (8000bf4 <SystemClock_Config+0xd4>)
 8000b4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b52:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b54:	4b27      	ldr	r3, [pc, #156]	@ (8000bf4 <SystemClock_Config+0xd4>)
 8000b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b5c:	60bb      	str	r3, [r7, #8]
 8000b5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b60:	2300      	movs	r3, #0
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	4b24      	ldr	r3, [pc, #144]	@ (8000bf8 <SystemClock_Config+0xd8>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b6c:	4a22      	ldr	r2, [pc, #136]	@ (8000bf8 <SystemClock_Config+0xd8>)
 8000b6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b72:	6013      	str	r3, [r2, #0]
 8000b74:	4b20      	ldr	r3, [pc, #128]	@ (8000bf8 <SystemClock_Config+0xd8>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000b80:	230a      	movs	r3, #10
 8000b82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b84:	2301      	movs	r3, #1
 8000b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b88:	2310      	movs	r3, #16
 8000b8a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b90:	2302      	movs	r3, #2
 8000b92:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b94:	2300      	movs	r3, #0
 8000b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000b98:	2310      	movs	r3, #16
 8000b9a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b9c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000ba0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ba2:	2304      	movs	r3, #4
 8000ba4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ba6:	2307      	movs	r3, #7
 8000ba8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000baa:	f107 0320 	add.w	r3, r7, #32
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f001 faea 	bl	8002188 <HAL_RCC_OscConfig>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000bba:	f000 f989 	bl	8000ed0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bbe:	230f      	movs	r3, #15
 8000bc0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bd4:	f107 030c 	add.w	r3, r7, #12
 8000bd8:	2102      	movs	r1, #2
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f001 fd4c 	bl	8002678 <HAL_RCC_ClockConfig>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000be6:	f000 f973 	bl	8000ed0 <Error_Handler>
  }
}
 8000bea:	bf00      	nop
 8000bec:	3750      	adds	r7, #80	@ 0x50
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	40007000 	.word	0x40007000

08000bfc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c00:	4b0f      	ldr	r3, [pc, #60]	@ (8000c40 <MX_RTC_Init+0x44>)
 8000c02:	4a10      	ldr	r2, [pc, #64]	@ (8000c44 <MX_RTC_Init+0x48>)
 8000c04:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c06:	4b0e      	ldr	r3, [pc, #56]	@ (8000c40 <MX_RTC_Init+0x44>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c40 <MX_RTC_Init+0x44>)
 8000c0e:	227f      	movs	r2, #127	@ 0x7f
 8000c10:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c12:	4b0b      	ldr	r3, [pc, #44]	@ (8000c40 <MX_RTC_Init+0x44>)
 8000c14:	22ff      	movs	r2, #255	@ 0xff
 8000c16:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c18:	4b09      	ldr	r3, [pc, #36]	@ (8000c40 <MX_RTC_Init+0x44>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c1e:	4b08      	ldr	r3, [pc, #32]	@ (8000c40 <MX_RTC_Init+0x44>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c24:	4b06      	ldr	r3, [pc, #24]	@ (8000c40 <MX_RTC_Init+0x44>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c2a:	4805      	ldr	r0, [pc, #20]	@ (8000c40 <MX_RTC_Init+0x44>)
 8000c2c:	f002 f864 	bl	8002cf8 <HAL_RTC_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000c36:	f000 f94b 	bl	8000ed0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000098 	.word	0x20000098
 8000c44:	40002800 	.word	0x40002800

08000c48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c4c:	4b11      	ldr	r3, [pc, #68]	@ (8000c94 <MX_USART2_UART_Init+0x4c>)
 8000c4e:	4a12      	ldr	r2, [pc, #72]	@ (8000c98 <MX_USART2_UART_Init+0x50>)
 8000c50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c52:	4b10      	ldr	r3, [pc, #64]	@ (8000c94 <MX_USART2_UART_Init+0x4c>)
 8000c54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c94 <MX_USART2_UART_Init+0x4c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c60:	4b0c      	ldr	r3, [pc, #48]	@ (8000c94 <MX_USART2_UART_Init+0x4c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c66:	4b0b      	ldr	r3, [pc, #44]	@ (8000c94 <MX_USART2_UART_Init+0x4c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c6c:	4b09      	ldr	r3, [pc, #36]	@ (8000c94 <MX_USART2_UART_Init+0x4c>)
 8000c6e:	220c      	movs	r2, #12
 8000c70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c72:	4b08      	ldr	r3, [pc, #32]	@ (8000c94 <MX_USART2_UART_Init+0x4c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c78:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <MX_USART2_UART_Init+0x4c>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c7e:	4805      	ldr	r0, [pc, #20]	@ (8000c94 <MX_USART2_UART_Init+0x4c>)
 8000c80:	f002 fdb2 	bl	80037e8 <HAL_UART_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c8a:	f000 f921 	bl	8000ed0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	200000b8 	.word	0x200000b8
 8000c98:	40004400 	.word	0x40004400

08000c9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	@ 0x28
 8000ca0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]
 8000cae:	60da      	str	r2, [r3, #12]
 8000cb0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	613b      	str	r3, [r7, #16]
 8000cb6:	4b38      	ldr	r3, [pc, #224]	@ (8000d98 <MX_GPIO_Init+0xfc>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cba:	4a37      	ldr	r2, [pc, #220]	@ (8000d98 <MX_GPIO_Init+0xfc>)
 8000cbc:	f043 0304 	orr.w	r3, r3, #4
 8000cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc2:	4b35      	ldr	r3, [pc, #212]	@ (8000d98 <MX_GPIO_Init+0xfc>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc6:	f003 0304 	and.w	r3, r3, #4
 8000cca:	613b      	str	r3, [r7, #16]
 8000ccc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	4b31      	ldr	r3, [pc, #196]	@ (8000d98 <MX_GPIO_Init+0xfc>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd6:	4a30      	ldr	r2, [pc, #192]	@ (8000d98 <MX_GPIO_Init+0xfc>)
 8000cd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cde:	4b2e      	ldr	r3, [pc, #184]	@ (8000d98 <MX_GPIO_Init+0xfc>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	4b2a      	ldr	r3, [pc, #168]	@ (8000d98 <MX_GPIO_Init+0xfc>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	4a29      	ldr	r2, [pc, #164]	@ (8000d98 <MX_GPIO_Init+0xfc>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfa:	4b27      	ldr	r3, [pc, #156]	@ (8000d98 <MX_GPIO_Init+0xfc>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	4b23      	ldr	r3, [pc, #140]	@ (8000d98 <MX_GPIO_Init+0xfc>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	4a22      	ldr	r2, [pc, #136]	@ (8000d98 <MX_GPIO_Init+0xfc>)
 8000d10:	f043 0302 	orr.w	r3, r3, #2
 8000d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d16:	4b20      	ldr	r3, [pc, #128]	@ (8000d98 <MX_GPIO_Init+0xfc>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	f003 0302 	and.w	r3, r3, #2
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED4_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8000d22:	2200      	movs	r2, #0
 8000d24:	f44f 61a4 	mov.w	r1, #1312	@ 0x520
 8000d28:	481c      	ldr	r0, [pc, #112]	@ (8000d9c <MX_GPIO_Init+0x100>)
 8000d2a:	f001 fa13 	bl	8002154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2120      	movs	r1, #32
 8000d32:	481b      	ldr	r0, [pc, #108]	@ (8000da0 <MX_GPIO_Init+0x104>)
 8000d34:	f001 fa0e 	bl	8002154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d3e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4815      	ldr	r0, [pc, #84]	@ (8000da4 <MX_GPIO_Init+0x108>)
 8000d50:	f001 f87c 	bl	8001e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Pin LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED2_Pin|LED1_Pin;
 8000d54:	f44f 63a4 	mov.w	r3, #1312	@ 0x520
 8000d58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	480b      	ldr	r0, [pc, #44]	@ (8000d9c <MX_GPIO_Init+0x100>)
 8000d6e:	f001 f86d 	bl	8001e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
 8000d72:	2320      	movs	r3, #32
 8000d74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d76:	2301      	movs	r3, #1
 8000d78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8000d82:	f107 0314 	add.w	r3, r7, #20
 8000d86:	4619      	mov	r1, r3
 8000d88:	4805      	ldr	r0, [pc, #20]	@ (8000da0 <MX_GPIO_Init+0x104>)
 8000d8a:	f001 f85f 	bl	8001e4c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d8e:	bf00      	nop
 8000d90:	3728      	adds	r7, #40	@ 0x28
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40020000 	.word	0x40020000
 8000da0:	40020400 	.word	0x40020400
 8000da4:	40020800 	.word	0x40020800

08000da8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af02      	add	r7, sp, #8
 8000dae:	6078      	str	r0, [r7, #4]
	uint8_t dummy;
	for(uint32_t i=0;i<400;i++);
 8000db0:	2300      	movs	r3, #0
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	e002      	b.n	8000dbc <HAL_UART_RxCpltCallback+0x14>
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	3301      	adds	r3, #1
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8000dc2:	d3f8      	bcc.n	8000db6 <HAL_UART_RxCpltCallback+0xe>
	if( xQueueIsQueueFullFromISR(q_enqueue) != pdTRUE)
 8000dc4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e3c <HAL_UART_RxCpltCallback+0x94>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f004 fcf7 	bl	80057bc <xQueueIsQueueFullFromISR>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d007      	beq.n	8000de4 <HAL_UART_RxCpltCallback+0x3c>
	{
		xQueueSendFromISR(q_enqueue,(void*)&pData,NULL);
 8000dd4:	4b19      	ldr	r3, [pc, #100]	@ (8000e3c <HAL_UART_RxCpltCallback+0x94>)
 8000dd6:	6818      	ldr	r0, [r3, #0]
 8000dd8:	2300      	movs	r3, #0
 8000dda:	2200      	movs	r2, #0
 8000ddc:	4918      	ldr	r1, [pc, #96]	@ (8000e40 <HAL_UART_RxCpltCallback+0x98>)
 8000dde:	f004 f9db 	bl	8005198 <xQueueGenericSendFromISR>
 8000de2:	e013      	b.n	8000e0c <HAL_UART_RxCpltCallback+0x64>

	}else{
		if(pData == '.')
 8000de4:	4b16      	ldr	r3, [pc, #88]	@ (8000e40 <HAL_UART_RxCpltCallback+0x98>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	2b2e      	cmp	r3, #46	@ 0x2e
 8000dec:	d10e      	bne.n	8000e0c <HAL_UART_RxCpltCallback+0x64>
		{
			xQueueReceiveFromISR(q_enqueue,(void*)&dummy,NULL);//removes the oldest element
 8000dee:	4b13      	ldr	r3, [pc, #76]	@ (8000e3c <HAL_UART_RxCpltCallback+0x94>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f107 010b 	add.w	r1, r7, #11
 8000df6:	2200      	movs	r2, #0
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f004 fb4d 	bl	8005498 <xQueueReceiveFromISR>
			xQueueSendFromISR(q_enqueue ,(void*)&pData , NULL);
 8000dfe:	4b0f      	ldr	r3, [pc, #60]	@ (8000e3c <HAL_UART_RxCpltCallback+0x94>)
 8000e00:	6818      	ldr	r0, [r3, #0]
 8000e02:	2300      	movs	r3, #0
 8000e04:	2200      	movs	r2, #0
 8000e06:	490e      	ldr	r1, [pc, #56]	@ (8000e40 <HAL_UART_RxCpltCallback+0x98>)
 8000e08:	f004 f9c6 	bl	8005198 <xQueueGenericSendFromISR>
		}
	}
	if(pData=='.')
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e40 <HAL_UART_RxCpltCallback+0x98>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	2b2e      	cmp	r3, #46	@ 0x2e
 8000e14:	d108      	bne.n	8000e28 <HAL_UART_RxCpltCallback+0x80>
		xTaskNotifyFromISR(xHandlecmd_handler,0,eNoAction,NULL);
 8000e16:	4b0b      	ldr	r3, [pc, #44]	@ (8000e44 <HAL_UART_RxCpltCallback+0x9c>)
 8000e18:	6818      	ldr	r0, [r3, #0]
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	9300      	str	r3, [sp, #0]
 8000e1e:	2300      	movs	r3, #0
 8000e20:	2200      	movs	r2, #0
 8000e22:	2100      	movs	r1, #0
 8000e24:	f005 fd58 	bl	80068d8 <xTaskGenericNotifyFromISR>
	  HAL_UART_Receive_IT(&huart2, (uint8_t*)&pData, 1);
 8000e28:	2201      	movs	r2, #1
 8000e2a:	4905      	ldr	r1, [pc, #20]	@ (8000e40 <HAL_UART_RxCpltCallback+0x98>)
 8000e2c:	4806      	ldr	r0, [pc, #24]	@ (8000e48 <HAL_UART_RxCpltCallback+0xa0>)
 8000e2e:	f002 fdb6 	bl	800399e <HAL_UART_Receive_IT>
}
 8000e32:	bf00      	nop
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	2000011c 	.word	0x2000011c
 8000e40:	20000130 	.word	0x20000130
 8000e44:	20000104 	.word	0x20000104
 8000e48:	200000b8 	.word	0x200000b8

08000e4c <led_effect_callback>:
void led_effect_callback(TimerHandle_t xTimer)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	int id;
	id = (int) pvTimerGetTimerID(xTimer);
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f006 fa31 	bl	80072bc <pvTimerGetTimerID>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	60fb      	str	r3, [r7, #12]
	switch(id)
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	3b01      	subs	r3, #1
 8000e62:	2b03      	cmp	r3, #3
 8000e64:	d816      	bhi.n	8000e94 <led_effect_callback+0x48>
 8000e66:	a201      	add	r2, pc, #4	@ (adr r2, 8000e6c <led_effect_callback+0x20>)
 8000e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e6c:	08000e7d 	.word	0x08000e7d
 8000e70:	08000e83 	.word	0x08000e83
 8000e74:	08000e89 	.word	0x08000e89
 8000e78:	08000e8f 	.word	0x08000e8f
	{
	case 1:
	{
		led_effect1();
 8000e7c:	f7ff fbea 	bl	8000654 <led_effect1>
		break;
 8000e80:	e008      	b.n	8000e94 <led_effect_callback+0x48>
	}
	case 2:
	{
		led_effect2();
 8000e82:	f7ff fc29 	bl	80006d8 <led_effect2>
		break;
 8000e86:	e005      	b.n	8000e94 <led_effect_callback+0x48>
	}
	case 3:
	{
		led_effect3();
 8000e88:	f7ff fc68 	bl	800075c <led_effect3>
		break;
 8000e8c:	e002      	b.n	8000e94 <led_effect_callback+0x48>
	}
	case 4:
	{
		led_effect4();
 8000e8e:	f7ff fca7 	bl	80007e0 <led_effect4>
		break;
 8000e92:	bf00      	nop
	}
	}
}
 8000e94:	bf00      	nop
 8000e96:	3710      	adds	r7, #16
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	f003 fe2b 	bl	8004b00 <osDelay>
 8000eaa:	e7fb      	b.n	8000ea4 <StartDefaultTask+0x8>

08000eac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a04      	ldr	r2, [pc, #16]	@ (8000ecc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d101      	bne.n	8000ec2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000ebe:	f000 fe31 	bl	8001b24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40000800 	.word	0x40000800

08000ed0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed4:	b672      	cpsid	i
}
 8000ed6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <Error_Handler+0x8>

08000edc <rtc_configure_time>:
#include "main.h"

void rtc_configure_time(RTC_TimeTypeDef *time)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]

	time->TimeFormat = RTC_HOURFORMAT12_AM;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	70da      	strb	r2, [r3, #3]
	time->DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	60da      	str	r2, [r3, #12]
	time->StoreOperation = RTC_STOREOPERATION_RESET;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	611a      	str	r2, [r3, #16]

	HAL_RTC_SetTime(&hrtc,time,RTC_FORMAT_BIN);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	6879      	ldr	r1, [r7, #4]
 8000efa:	4803      	ldr	r0, [pc, #12]	@ (8000f08 <rtc_configure_time+0x2c>)
 8000efc:	f001 ff7d 	bl	8002dfa <HAL_RTC_SetTime>
}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000098 	.word	0x20000098

08000f0c <rtc_configure_date>:

void rtc_configure_date(RTC_DateTypeDef *date)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
	HAL_RTC_SetDate(&hrtc,date,RTC_FORMAT_BIN);
 8000f14:	2200      	movs	r2, #0
 8000f16:	6879      	ldr	r1, [r7, #4]
 8000f18:	4803      	ldr	r0, [pc, #12]	@ (8000f28 <rtc_configure_date+0x1c>)
 8000f1a:	f002 f866 	bl	8002fea <HAL_RTC_SetDate>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000098 	.word	0x20000098

08000f2c <show_time_date>:

void show_time_date(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08c      	sub	sp, #48	@ 0x30
 8000f30:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef rtc_time;

	static char *time = showtime;//time is a pointer to pointer (which is showtime)
	static char *date = showdate;

	memset(&rtc_date,0,sizeof(rtc_date));//*rtc_date is a pointer where 0 are present with rtc_date as size which is 4 ,so in short *rtc_date = 0,0,0,0
 8000f32:	f107 0318 	add.w	r3, r7, #24
 8000f36:	2204      	movs	r2, #4
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f006 fe46 	bl	8007bcc <memset>
	memset(&rtc_time,0,sizeof(rtc_time));//*rtc_time is 0,0,0,0,0,0,0,0
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	2214      	movs	r2, #20
 8000f44:	2100      	movs	r1, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f006 fe40 	bl	8007bcc <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	2200      	movs	r2, #0
 8000f50:	4619      	mov	r1, r3
 8000f52:	4821      	ldr	r0, [pc, #132]	@ (8000fd8 <show_time_date+0xac>)
 8000f54:	f001 ffeb 	bl	8002f2e <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8000f58:	f107 0318 	add.w	r3, r7, #24
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	4619      	mov	r1, r3
 8000f60:	481d      	ldr	r0, [pc, #116]	@ (8000fd8 <show_time_date+0xac>)
 8000f62:	f002 f8c6 	bl	80030f2 <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d101      	bne.n	8000f70 <show_time_date+0x44>
 8000f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fdc <show_time_date+0xb0>)
 8000f6e:	e000      	b.n	8000f72 <show_time_date+0x46>
 8000f70:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe0 <show_time_date+0xb4>)
 8000f72:	61fb      	str	r3, [r7, #28]

	/* Display time Format : hh:mm:ss [AM/PM] */
	sprintf((char*)showtime,"%s:\t%02d:%02d:%02d [%s]","\nCurrent Time&Date",rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds,format);
 8000f74:	793b      	ldrb	r3, [r7, #4]
 8000f76:	4618      	mov	r0, r3
 8000f78:	797b      	ldrb	r3, [r7, #5]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	79bb      	ldrb	r3, [r7, #6]
 8000f7e:	4619      	mov	r1, r3
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	9302      	str	r3, [sp, #8]
 8000f84:	9101      	str	r1, [sp, #4]
 8000f86:	9200      	str	r2, [sp, #0]
 8000f88:	4603      	mov	r3, r0
 8000f8a:	4a16      	ldr	r2, [pc, #88]	@ (8000fe4 <show_time_date+0xb8>)
 8000f8c:	4916      	ldr	r1, [pc, #88]	@ (8000fe8 <show_time_date+0xbc>)
 8000f8e:	4817      	ldr	r0, [pc, #92]	@ (8000fec <show_time_date+0xc0>)
 8000f90:	f006 fdfa 	bl	8007b88 <siprintf>
	xQueueSend(q_print,&time,portMAX_DELAY);
 8000f94:	4b16      	ldr	r3, [pc, #88]	@ (8000ff0 <show_time_date+0xc4>)
 8000f96:	6818      	ldr	r0, [r3, #0]
 8000f98:	2300      	movs	r3, #0
 8000f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8000f9e:	4915      	ldr	r1, [pc, #84]	@ (8000ff4 <show_time_date+0xc8>)
 8000fa0:	f003 fff8 	bl	8004f94 <xQueueGenericSend>

	/* Display date Format : date-month-year */
	sprintf((char*)showdate,"\t%02d-%02d-%2d\n",rtc_date.Date, rtc_date.Month, 2000 + rtc_date.Year);
 8000fa4:	7ebb      	ldrb	r3, [r7, #26]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	7e7b      	ldrb	r3, [r7, #25]
 8000faa:	4619      	mov	r1, r3
 8000fac:	7efb      	ldrb	r3, [r7, #27]
 8000fae:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	4910      	ldr	r1, [pc, #64]	@ (8000ff8 <show_time_date+0xcc>)
 8000fb8:	4810      	ldr	r0, [pc, #64]	@ (8000ffc <show_time_date+0xd0>)
 8000fba:	f006 fde5 	bl	8007b88 <siprintf>
	xQueueSend(q_print,&date,portMAX_DELAY);
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff0 <show_time_date+0xc4>)
 8000fc0:	6818      	ldr	r0, [r3, #0]
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc8:	490d      	ldr	r1, [pc, #52]	@ (8001000 <show_time_date+0xd4>)
 8000fca:	f003 ffe3 	bl	8004f94 <xQueueGenericSend>
}
 8000fce:	bf00      	nop
 8000fd0:	3720      	adds	r7, #32
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000098 	.word	0x20000098
 8000fdc:	08008600 	.word	0x08008600
 8000fe0:	08008604 	.word	0x08008604
 8000fe4:	08008608 	.word	0x08008608
 8000fe8:	0800861c 	.word	0x0800861c
 8000fec:	2000013c 	.word	0x2000013c
 8000ff0:	20000118 	.word	0x20000118
 8000ff4:	20000010 	.word	0x20000010
 8000ff8:	08008634 	.word	0x08008634
 8000ffc:	20000164 	.word	0x20000164
 8001000:	20000014 	.word	0x20000014

08001004 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	4b12      	ldr	r3, [pc, #72]	@ (8001058 <HAL_MspInit+0x54>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001012:	4a11      	ldr	r2, [pc, #68]	@ (8001058 <HAL_MspInit+0x54>)
 8001014:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001018:	6453      	str	r3, [r2, #68]	@ 0x44
 800101a:	4b0f      	ldr	r3, [pc, #60]	@ (8001058 <HAL_MspInit+0x54>)
 800101c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800101e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	603b      	str	r3, [r7, #0]
 800102a:	4b0b      	ldr	r3, [pc, #44]	@ (8001058 <HAL_MspInit+0x54>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102e:	4a0a      	ldr	r2, [pc, #40]	@ (8001058 <HAL_MspInit+0x54>)
 8001030:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001034:	6413      	str	r3, [r2, #64]	@ 0x40
 8001036:	4b08      	ldr	r3, [pc, #32]	@ (8001058 <HAL_MspInit+0x54>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001042:	2200      	movs	r2, #0
 8001044:	210f      	movs	r1, #15
 8001046:	f06f 0001 	mvn.w	r0, #1
 800104a:	f000 fe43 	bl	8001cd4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40023800 	.word	0x40023800

0800105c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001064:	f107 030c 	add.w	r3, r7, #12
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a0c      	ldr	r2, [pc, #48]	@ (80010ac <HAL_RTC_MspInit+0x50>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d111      	bne.n	80010a2 <HAL_RTC_MspInit+0x46>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800107e:	2302      	movs	r3, #2
 8001080:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001082:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001086:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001088:	f107 030c 	add.w	r3, r7, #12
 800108c:	4618      	mov	r0, r3
 800108e:	f001 fd45 	bl	8002b1c <HAL_RCCEx_PeriphCLKConfig>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001098:	f7ff ff1a 	bl	8000ed0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800109c:	4b04      	ldr	r3, [pc, #16]	@ (80010b0 <HAL_RTC_MspInit+0x54>)
 800109e:	2201      	movs	r2, #1
 80010a0:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80010a2:	bf00      	nop
 80010a4:	3720      	adds	r7, #32
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40002800 	.word	0x40002800
 80010b0:	42470e3c 	.word	0x42470e3c

080010b4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08a      	sub	sp, #40	@ 0x28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001148 <HAL_UART_MspInit+0x94>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d133      	bne.n	800113e <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	4b1c      	ldr	r3, [pc, #112]	@ (800114c <HAL_UART_MspInit+0x98>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010de:	4a1b      	ldr	r2, [pc, #108]	@ (800114c <HAL_UART_MspInit+0x98>)
 80010e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80010e6:	4b19      	ldr	r3, [pc, #100]	@ (800114c <HAL_UART_MspInit+0x98>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	4b15      	ldr	r3, [pc, #84]	@ (800114c <HAL_UART_MspInit+0x98>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fa:	4a14      	ldr	r2, [pc, #80]	@ (800114c <HAL_UART_MspInit+0x98>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	6313      	str	r3, [r2, #48]	@ 0x30
 8001102:	4b12      	ldr	r3, [pc, #72]	@ (800114c <HAL_UART_MspInit+0x98>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800110e:	230c      	movs	r3, #12
 8001110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	2302      	movs	r3, #2
 8001114:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2300      	movs	r3, #0
 800111c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800111e:	2307      	movs	r3, #7
 8001120:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001122:	f107 0314 	add.w	r3, r7, #20
 8001126:	4619      	mov	r1, r3
 8001128:	4809      	ldr	r0, [pc, #36]	@ (8001150 <HAL_UART_MspInit+0x9c>)
 800112a:	f000 fe8f 	bl	8001e4c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 800112e:	2200      	movs	r2, #0
 8001130:	2106      	movs	r1, #6
 8001132:	2026      	movs	r0, #38	@ 0x26
 8001134:	f000 fdce 	bl	8001cd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001138:	2026      	movs	r0, #38	@ 0x26
 800113a:	f000 fde7 	bl	8001d0c <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800113e:	bf00      	nop
 8001140:	3728      	adds	r7, #40	@ 0x28
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40004400 	.word	0x40004400
 800114c:	40023800 	.word	0x40023800
 8001150:	40020000 	.word	0x40020000

08001154 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08e      	sub	sp, #56	@ 0x38
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800115c:	2300      	movs	r3, #0
 800115e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001160:	2300      	movs	r3, #0
 8001162:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001164:	2300      	movs	r3, #0
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	4b33      	ldr	r3, [pc, #204]	@ (8001238 <HAL_InitTick+0xe4>)
 800116a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116c:	4a32      	ldr	r2, [pc, #200]	@ (8001238 <HAL_InitTick+0xe4>)
 800116e:	f043 0304 	orr.w	r3, r3, #4
 8001172:	6413      	str	r3, [r2, #64]	@ 0x40
 8001174:	4b30      	ldr	r3, [pc, #192]	@ (8001238 <HAL_InitTick+0xe4>)
 8001176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001178:	f003 0304 	and.w	r3, r3, #4
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001180:	f107 0210 	add.w	r2, r7, #16
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	4611      	mov	r1, r2
 800118a:	4618      	mov	r0, r3
 800118c:	f001 fc94 	bl	8002ab8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001190:	6a3b      	ldr	r3, [r7, #32]
 8001192:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001196:	2b00      	cmp	r3, #0
 8001198:	d103      	bne.n	80011a2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800119a:	f001 fc65 	bl	8002a68 <HAL_RCC_GetPCLK1Freq>
 800119e:	6378      	str	r0, [r7, #52]	@ 0x34
 80011a0:	e004      	b.n	80011ac <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80011a2:	f001 fc61 	bl	8002a68 <HAL_RCC_GetPCLK1Freq>
 80011a6:	4603      	mov	r3, r0
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011ae:	4a23      	ldr	r2, [pc, #140]	@ (800123c <HAL_InitTick+0xe8>)
 80011b0:	fba2 2303 	umull	r2, r3, r2, r3
 80011b4:	0c9b      	lsrs	r3, r3, #18
 80011b6:	3b01      	subs	r3, #1
 80011b8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80011ba:	4b21      	ldr	r3, [pc, #132]	@ (8001240 <HAL_InitTick+0xec>)
 80011bc:	4a21      	ldr	r2, [pc, #132]	@ (8001244 <HAL_InitTick+0xf0>)
 80011be:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80011c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001240 <HAL_InitTick+0xec>)
 80011c2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011c6:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80011c8:	4a1d      	ldr	r2, [pc, #116]	@ (8001240 <HAL_InitTick+0xec>)
 80011ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011cc:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80011ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001240 <HAL_InitTick+0xec>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001240 <HAL_InitTick+0xec>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011da:	4b19      	ldr	r3, [pc, #100]	@ (8001240 <HAL_InitTick+0xec>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80011e0:	4817      	ldr	r0, [pc, #92]	@ (8001240 <HAL_InitTick+0xec>)
 80011e2:	f002 f893 	bl	800330c <HAL_TIM_Base_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80011ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d11b      	bne.n	800122c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80011f4:	4812      	ldr	r0, [pc, #72]	@ (8001240 <HAL_InitTick+0xec>)
 80011f6:	f002 f8e3 	bl	80033c0 <HAL_TIM_Base_Start_IT>
 80011fa:	4603      	mov	r3, r0
 80011fc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001200:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001204:	2b00      	cmp	r3, #0
 8001206:	d111      	bne.n	800122c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001208:	201e      	movs	r0, #30
 800120a:	f000 fd7f 	bl	8001d0c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2b0f      	cmp	r3, #15
 8001212:	d808      	bhi.n	8001226 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001214:	2200      	movs	r2, #0
 8001216:	6879      	ldr	r1, [r7, #4]
 8001218:	201e      	movs	r0, #30
 800121a:	f000 fd5b 	bl	8001cd4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800121e:	4a0a      	ldr	r2, [pc, #40]	@ (8001248 <HAL_InitTick+0xf4>)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6013      	str	r3, [r2, #0]
 8001224:	e002      	b.n	800122c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800122c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001230:	4618      	mov	r0, r3
 8001232:	3738      	adds	r7, #56	@ 0x38
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40023800 	.word	0x40023800
 800123c:	431bde83 	.word	0x431bde83
 8001240:	2000018c 	.word	0x2000018c
 8001244:	40000800 	.word	0x40000800
 8001248:	20000020 	.word	0x20000020

0800124c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001250:	bf00      	nop
 8001252:	e7fd      	b.n	8001250 <NMI_Handler+0x4>

08001254 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001258:	bf00      	nop
 800125a:	e7fd      	b.n	8001258 <HardFault_Handler+0x4>

0800125c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001260:	bf00      	nop
 8001262:	e7fd      	b.n	8001260 <MemManage_Handler+0x4>

08001264 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001268:	bf00      	nop
 800126a:	e7fd      	b.n	8001268 <BusFault_Handler+0x4>

0800126c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001270:	bf00      	nop
 8001272:	e7fd      	b.n	8001270 <UsageFault_Handler+0x4>

08001274 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
	...

08001284 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001288:	4802      	ldr	r0, [pc, #8]	@ (8001294 <TIM4_IRQHandler+0x10>)
 800128a:	f002 f8fb 	bl	8003484 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	2000018c 	.word	0x2000018c

08001298 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800129c:	4802      	ldr	r0, [pc, #8]	@ (80012a8 <USART2_IRQHandler+0x10>)
 800129e:	f002 fba3 	bl	80039e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	200000b8 	.word	0x200000b8

080012ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012b4:	4a14      	ldr	r2, [pc, #80]	@ (8001308 <_sbrk+0x5c>)
 80012b6:	4b15      	ldr	r3, [pc, #84]	@ (800130c <_sbrk+0x60>)
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012c0:	4b13      	ldr	r3, [pc, #76]	@ (8001310 <_sbrk+0x64>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d102      	bne.n	80012ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012c8:	4b11      	ldr	r3, [pc, #68]	@ (8001310 <_sbrk+0x64>)
 80012ca:	4a12      	ldr	r2, [pc, #72]	@ (8001314 <_sbrk+0x68>)
 80012cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ce:	4b10      	ldr	r3, [pc, #64]	@ (8001310 <_sbrk+0x64>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4413      	add	r3, r2
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d207      	bcs.n	80012ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012dc:	f006 fcdc 	bl	8007c98 <__errno>
 80012e0:	4603      	mov	r3, r0
 80012e2:	220c      	movs	r2, #12
 80012e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012e6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ea:	e009      	b.n	8001300 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012ec:	4b08      	ldr	r3, [pc, #32]	@ (8001310 <_sbrk+0x64>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012f2:	4b07      	ldr	r3, [pc, #28]	@ (8001310 <_sbrk+0x64>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4413      	add	r3, r2
 80012fa:	4a05      	ldr	r2, [pc, #20]	@ (8001310 <_sbrk+0x64>)
 80012fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012fe:	68fb      	ldr	r3, [r7, #12]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20018000 	.word	0x20018000
 800130c:	00000400 	.word	0x00000400
 8001310:	200001d4 	.word	0x200001d4
 8001314:	20004d20 	.word	0x20004d20

08001318 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800131c:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <SystemInit+0x20>)
 800131e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001322:	4a05      	ldr	r2, [pc, #20]	@ (8001338 <SystemInit+0x20>)
 8001324:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001328:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <menu_function>:
int check_time_configurations(RTC_TimeTypeDef rtc_time);
int check_date_configurations(RTC_DateTypeDef rtc_date);
char* invalid_msg = "INVALID INPUT";

void menu_function(void* pv)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
    uint32_t cmd_address;
    cmd_variable *cmd;
    const char* menu_msg = "\n==========================\n"
 8001344:	4b29      	ldr	r3, [pc, #164]	@ (80013ec <menu_function+0xb0>)
 8001346:	60bb      	str	r3, [r7, #8]
                            "EXIT                 --->3\n"
                             "Enter your choice here : ";
    while(1)
    {
        // Print main menu
        xQueueSend(q_print, &menu_msg, portMAX_DELAY);
 8001348:	4b29      	ldr	r3, [pc, #164]	@ (80013f0 <menu_function+0xb4>)
 800134a:	6818      	ldr	r0, [r3, #0]
 800134c:	f107 0108 	add.w	r1, r7, #8
 8001350:	2300      	movs	r3, #0
 8001352:	f04f 32ff 	mov.w	r2, #4294967295
 8001356:	f003 fe1d 	bl	8004f94 <xQueueGenericSend>

        // Wait for command from cmd_handler_function
        xTaskNotifyWait(0, 0, &cmd_address, portMAX_DELAY);
 800135a:	f107 020c 	add.w	r2, r7, #12
 800135e:	f04f 33ff 	mov.w	r3, #4294967295
 8001362:	2100      	movs	r1, #0
 8001364:	2000      	movs	r0, #0
 8001366:	f005 f995 	bl	8006694 <xTaskNotifyWait>
        cmd = (cmd_variable*)(uintptr_t)cmd_address;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	617b      	str	r3, [r7, #20]

        if(cmd->len == 1)
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d128      	bne.n	80013c8 <menu_function+0x8c>
        {
            int option = cmd->cmd[0] - '0';
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	3b30      	subs	r3, #48	@ 0x30
 800137c:	613b      	str	r3, [r7, #16]
            if(option == 0)
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d10a      	bne.n	800139a <menu_function+0x5e>
            {
                curr_state = sLedEffect;
 8001384:	4b1b      	ldr	r3, [pc, #108]	@ (80013f4 <menu_function+0xb8>)
 8001386:	2201      	movs	r2, #1
 8001388:	701a      	strb	r2, [r3, #0]
                xTaskNotify(xHandleled_task, 0, eNoAction);
 800138a:	4b1b      	ldr	r3, [pc, #108]	@ (80013f8 <menu_function+0xbc>)
 800138c:	6818      	ldr	r0, [r3, #0]
 800138e:	2300      	movs	r3, #0
 8001390:	2200      	movs	r2, #0
 8001392:	2100      	movs	r1, #0
 8001394:	f005 f9de 	bl	8006754 <xTaskGenericNotify>
 8001398:	e01f      	b.n	80013da <menu_function+0x9e>
            }
            else if(option == 1)
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d10a      	bne.n	80013b6 <menu_function+0x7a>
            {
                curr_state = sRtcMenu;
 80013a0:	4b14      	ldr	r3, [pc, #80]	@ (80013f4 <menu_function+0xb8>)
 80013a2:	2202      	movs	r2, #2
 80013a4:	701a      	strb	r2, [r3, #0]
                xTaskNotify(xHandlertc_task, 0, eNoAction);
 80013a6:	4b15      	ldr	r3, [pc, #84]	@ (80013fc <menu_function+0xc0>)
 80013a8:	6818      	ldr	r0, [r3, #0]
 80013aa:	2300      	movs	r3, #0
 80013ac:	2200      	movs	r2, #0
 80013ae:	2100      	movs	r1, #0
 80013b0:	f005 f9d0 	bl	8006754 <xTaskGenericNotify>
 80013b4:	e011      	b.n	80013da <menu_function+0x9e>
            }
            else
            {
                xQueueSend(q_print, &invalid_msg, portMAX_DELAY);
 80013b6:	4b0e      	ldr	r3, [pc, #56]	@ (80013f0 <menu_function+0xb4>)
 80013b8:	6818      	ldr	r0, [r3, #0]
 80013ba:	2300      	movs	r3, #0
 80013bc:	f04f 32ff 	mov.w	r2, #4294967295
 80013c0:	490f      	ldr	r1, [pc, #60]	@ (8001400 <menu_function+0xc4>)
 80013c2:	f003 fde7 	bl	8004f94 <xQueueGenericSend>
                continue;
 80013c6:	e00f      	b.n	80013e8 <menu_function+0xac>
            }
        }
        else
        {
            xQueueSend(q_print, &invalid_msg, portMAX_DELAY);
 80013c8:	4b09      	ldr	r3, [pc, #36]	@ (80013f0 <menu_function+0xb4>)
 80013ca:	6818      	ldr	r0, [r3, #0]
 80013cc:	2300      	movs	r3, #0
 80013ce:	f04f 32ff 	mov.w	r2, #4294967295
 80013d2:	490b      	ldr	r1, [pc, #44]	@ (8001400 <menu_function+0xc4>)
 80013d4:	f003 fdde 	bl	8004f94 <xQueueGenericSend>
            continue;
 80013d8:	e006      	b.n	80013e8 <menu_function+0xac>
        }

        xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80013da:	f04f 33ff 	mov.w	r3, #4294967295
 80013de:	2200      	movs	r2, #0
 80013e0:	2100      	movs	r1, #0
 80013e2:	2000      	movs	r0, #0
 80013e4:	f005 f956 	bl	8006694 <xTaskNotifyWait>
        xQueueSend(q_print, &menu_msg, portMAX_DELAY);
 80013e8:	e7ae      	b.n	8001348 <menu_function+0xc>
 80013ea:	bf00      	nop
 80013ec:	08008654 	.word	0x08008654
 80013f0:	20000118 	.word	0x20000118
 80013f4:	20000138 	.word	0x20000138
 80013f8:	20000110 	.word	0x20000110
 80013fc:	20000114 	.word	0x20000114
 8001400:	2000001c 	.word	0x2000001c

08001404 <process_cmd>:
    }
}

void process_cmd(cmd_variable* command)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
    // Extract data from q_enqueue into command struct
    int i = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]
    uint8_t ch;
    command->len = 0;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	60da      	str	r2, [r3, #12]

    while(1)
    {
        xQueueReceive(q_enqueue, &ch, 0);
 8001416:	4b1f      	ldr	r3, [pc, #124]	@ (8001494 <process_cmd+0x90>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f107 010b 	add.w	r1, r7, #11
 800141e:	2200      	movs	r2, #0
 8001420:	4618      	mov	r0, r3
 8001422:	f003 ff57 	bl	80052d4 <xQueueReceive>
        if(ch == '.') break; // End of command marker
 8001426:	7afb      	ldrb	r3, [r7, #11]
 8001428:	2b2e      	cmp	r3, #46	@ 0x2e
 800142a:	d00b      	beq.n	8001444 <process_cmd+0x40>
        command->cmd[i++] = ch;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	1c5a      	adds	r2, r3, #1
 8001430:	60fa      	str	r2, [r7, #12]
 8001432:	7af9      	ldrb	r1, [r7, #11]
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	54d1      	strb	r1, [r2, r3]
        command->len++;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	1c5a      	adds	r2, r3, #1
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	60da      	str	r2, [r3, #12]
        xQueueReceive(q_enqueue, &ch, 0);
 8001442:	e7e8      	b.n	8001416 <process_cmd+0x12>
        if(ch == '.') break; // End of command marker
 8001444:	bf00      	nop
    }

    switch(curr_state)
 8001446:	4b14      	ldr	r3, [pc, #80]	@ (8001498 <process_cmd+0x94>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b04      	cmp	r3, #4
 800144c:	dc1e      	bgt.n	800148c <process_cmd+0x88>
 800144e:	2b02      	cmp	r3, #2
 8001450:	da14      	bge.n	800147c <process_cmd+0x78>
 8001452:	2b00      	cmp	r3, #0
 8001454:	d002      	beq.n	800145c <process_cmd+0x58>
 8001456:	2b01      	cmp	r3, #1
 8001458:	d008      	beq.n	800146c <process_cmd+0x68>
        case sRtcTimeConfig:
        case sRtcDateConfig:
            xTaskNotify(xHandlertc_task, (uint32_t)(uintptr_t)command, eSetValueWithOverwrite);
            break;
    }
}
 800145a:	e017      	b.n	800148c <process_cmd+0x88>
            xTaskNotify(xHandlemenu, (uint32_t)(uintptr_t)command, eSetValueWithOverwrite);
 800145c:	4b0f      	ldr	r3, [pc, #60]	@ (800149c <process_cmd+0x98>)
 800145e:	6818      	ldr	r0, [r3, #0]
 8001460:	6879      	ldr	r1, [r7, #4]
 8001462:	2300      	movs	r3, #0
 8001464:	2203      	movs	r2, #3
 8001466:	f005 f975 	bl	8006754 <xTaskGenericNotify>
            break;
 800146a:	e00f      	b.n	800148c <process_cmd+0x88>
            xTaskNotify(xHandleled_task, (uint32_t)(uintptr_t)command, eSetValueWithOverwrite);
 800146c:	4b0c      	ldr	r3, [pc, #48]	@ (80014a0 <process_cmd+0x9c>)
 800146e:	6818      	ldr	r0, [r3, #0]
 8001470:	6879      	ldr	r1, [r7, #4]
 8001472:	2300      	movs	r3, #0
 8001474:	2203      	movs	r2, #3
 8001476:	f005 f96d 	bl	8006754 <xTaskGenericNotify>
            break;
 800147a:	e007      	b.n	800148c <process_cmd+0x88>
            xTaskNotify(xHandlertc_task, (uint32_t)(uintptr_t)command, eSetValueWithOverwrite);
 800147c:	4b09      	ldr	r3, [pc, #36]	@ (80014a4 <process_cmd+0xa0>)
 800147e:	6818      	ldr	r0, [r3, #0]
 8001480:	6879      	ldr	r1, [r7, #4]
 8001482:	2300      	movs	r3, #0
 8001484:	2203      	movs	r2, #3
 8001486:	f005 f965 	bl	8006754 <xTaskGenericNotify>
            break;
 800148a:	bf00      	nop
}
 800148c:	bf00      	nop
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	2000011c 	.word	0x2000011c
 8001498:	20000138 	.word	0x20000138
 800149c:	20000108 	.word	0x20000108
 80014a0:	20000110 	.word	0x20000110
 80014a4:	20000114 	.word	0x20000114

080014a8 <print_task>:

void print_task(void* pv)
{
 80014a8:	b590      	push	{r4, r7, lr}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
    uint32_t* msg;
    while(1)
    {
        xQueueReceive(q_print, &msg, portMAX_DELAY);
 80014b0:	4b0b      	ldr	r3, [pc, #44]	@ (80014e0 <print_task+0x38>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f107 010c 	add.w	r1, r7, #12
 80014b8:	f04f 32ff 	mov.w	r2, #4294967295
 80014bc:	4618      	mov	r0, r3
 80014be:	f003 ff09 	bl	80052d4 <xQueueReceive>
        HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg), HAL_MAX_DELAY);
 80014c2:	68fc      	ldr	r4, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7fe fe94 	bl	80001f4 <strlen>
 80014cc:	4603      	mov	r3, r0
 80014ce:	b29a      	uxth	r2, r3
 80014d0:	f04f 33ff 	mov.w	r3, #4294967295
 80014d4:	4621      	mov	r1, r4
 80014d6:	4803      	ldr	r0, [pc, #12]	@ (80014e4 <print_task+0x3c>)
 80014d8:	f002 f9d6 	bl	8003888 <HAL_UART_Transmit>
        xQueueReceive(q_print, &msg, portMAX_DELAY);
 80014dc:	bf00      	nop
 80014de:	e7e7      	b.n	80014b0 <print_task+0x8>
 80014e0:	20000118 	.word	0x20000118
 80014e4:	200000b8 	.word	0x200000b8

080014e8 <led_task>:
    }
}

void led_task(void* pv)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
    uint32_t cmd_address;
    cmd_variable *cmd;
    char* msg_led = "=====================\n"
 80014f0:	4b3b      	ldr	r3, [pc, #236]	@ (80015e0 <led_task+0xf8>)
 80014f2:	60fb      	str	r3, [r7, #12]
                    "Enter your choice here : ";

    while(1)
    {
        // First phase: wait for menu to tell us to start LED mode
        xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80014f4:	f04f 33ff 	mov.w	r3, #4294967295
 80014f8:	2200      	movs	r2, #0
 80014fa:	2100      	movs	r1, #0
 80014fc:	2000      	movs	r0, #0
 80014fe:	f005 f8c9 	bl	8006694 <xTaskNotifyWait>

        // Show LED menu
        xQueueSend(q_print, &msg_led, portMAX_DELAY);
 8001502:	4b38      	ldr	r3, [pc, #224]	@ (80015e4 <led_task+0xfc>)
 8001504:	6818      	ldr	r0, [r3, #0]
 8001506:	f107 010c 	add.w	r1, r7, #12
 800150a:	2300      	movs	r3, #0
 800150c:	f04f 32ff 	mov.w	r2, #4294967295
 8001510:	f003 fd40 	bl	8004f94 <xQueueGenericSend>

        // Second phase: wait for cmd_handler_function to send actual LED command
        xTaskNotifyWait(0, 0, &cmd_address, portMAX_DELAY);
 8001514:	f107 0210 	add.w	r2, r7, #16
 8001518:	f04f 33ff 	mov.w	r3, #4294967295
 800151c:	2100      	movs	r1, #0
 800151e:	2000      	movs	r0, #0
 8001520:	f005 f8b8 	bl	8006694 <xTaskNotifyWait>
        cmd = (cmd_variable*)(uintptr_t)cmd_address;
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	617b      	str	r3, [r7, #20]

        if(cmd->len <= 4)
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	2b04      	cmp	r3, #4
 800152e:	dc43      	bgt.n	80015b8 <led_task+0xd0>
        {
            if(strcmp((char*)cmd->cmd, "e1") == 0)
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	492d      	ldr	r1, [pc, #180]	@ (80015e8 <led_task+0x100>)
 8001534:	4618      	mov	r0, r3
 8001536:	f7fe fe53 	bl	80001e0 <strcmp>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d103      	bne.n	8001548 <led_task+0x60>
                led_effect(1);
 8001540:	2001      	movs	r0, #1
 8001542:	f7ff f86b 	bl	800061c <led_effect>
 8001546:	e03f      	b.n	80015c8 <led_task+0xe0>
            else if(strcmp((char*)cmd->cmd, "e2") == 0)
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	4928      	ldr	r1, [pc, #160]	@ (80015ec <led_task+0x104>)
 800154c:	4618      	mov	r0, r3
 800154e:	f7fe fe47 	bl	80001e0 <strcmp>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d103      	bne.n	8001560 <led_task+0x78>
                led_effect(2);
 8001558:	2002      	movs	r0, #2
 800155a:	f7ff f85f 	bl	800061c <led_effect>
 800155e:	e033      	b.n	80015c8 <led_task+0xe0>
            else if(strcmp((char*)cmd->cmd, "e3") == 0)
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	4923      	ldr	r1, [pc, #140]	@ (80015f0 <led_task+0x108>)
 8001564:	4618      	mov	r0, r3
 8001566:	f7fe fe3b 	bl	80001e0 <strcmp>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d103      	bne.n	8001578 <led_task+0x90>
                led_effect(3);
 8001570:	2003      	movs	r0, #3
 8001572:	f7ff f853 	bl	800061c <led_effect>
 8001576:	e027      	b.n	80015c8 <led_task+0xe0>
            else if(strcmp((char*)cmd->cmd, "e4") == 0)
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	491e      	ldr	r1, [pc, #120]	@ (80015f4 <led_task+0x10c>)
 800157c:	4618      	mov	r0, r3
 800157e:	f7fe fe2f 	bl	80001e0 <strcmp>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d103      	bne.n	8001590 <led_task+0xa8>
                led_effect(4);
 8001588:	2004      	movs	r0, #4
 800158a:	f7ff f847 	bl	800061c <led_effect>
 800158e:	e01b      	b.n	80015c8 <led_task+0xe0>
            else if(strcmp((char*)cmd->cmd, "none") == 0)
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	4919      	ldr	r1, [pc, #100]	@ (80015f8 <led_task+0x110>)
 8001594:	4618      	mov	r0, r3
 8001596:	f7fe fe23 	bl	80001e0 <strcmp>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d102      	bne.n	80015a6 <led_task+0xbe>
                led_effect_stop();
 80015a0:	f7ff f81c 	bl	80005dc <led_effect_stop>
 80015a4:	e010      	b.n	80015c8 <led_task+0xe0>
            else
                xQueueSend(q_print, &invalid_msg, portMAX_DELAY);
 80015a6:	4b0f      	ldr	r3, [pc, #60]	@ (80015e4 <led_task+0xfc>)
 80015a8:	6818      	ldr	r0, [r3, #0]
 80015aa:	2300      	movs	r3, #0
 80015ac:	f04f 32ff 	mov.w	r2, #4294967295
 80015b0:	4912      	ldr	r1, [pc, #72]	@ (80015fc <led_task+0x114>)
 80015b2:	f003 fcef 	bl	8004f94 <xQueueGenericSend>
 80015b6:	e007      	b.n	80015c8 <led_task+0xe0>
        }
        else
        {
            xQueueSend(q_print, &invalid_msg, portMAX_DELAY);
 80015b8:	4b0a      	ldr	r3, [pc, #40]	@ (80015e4 <led_task+0xfc>)
 80015ba:	6818      	ldr	r0, [r3, #0]
 80015bc:	2300      	movs	r3, #0
 80015be:	f04f 32ff 	mov.w	r2, #4294967295
 80015c2:	490e      	ldr	r1, [pc, #56]	@ (80015fc <led_task+0x114>)
 80015c4:	f003 fce6 	bl	8004f94 <xQueueGenericSend>
        }

        // Return control to main menu
        curr_state = sMainMenu;
 80015c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001600 <led_task+0x118>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	701a      	strb	r2, [r3, #0]
        xTaskNotify(xHandlemenu, 0, eNoAction);
 80015ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001604 <led_task+0x11c>)
 80015d0:	6818      	ldr	r0, [r3, #0]
 80015d2:	2300      	movs	r3, #0
 80015d4:	2200      	movs	r2, #0
 80015d6:	2100      	movs	r1, #0
 80015d8:	f005 f8bc 	bl	8006754 <xTaskGenericNotify>
        xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80015dc:	e78a      	b.n	80014f4 <led_task+0xc>
 80015de:	bf00      	nop
 80015e0:	08008714 	.word	0x08008714
 80015e4:	20000118 	.word	0x20000118
 80015e8:	08008784 	.word	0x08008784
 80015ec:	08008788 	.word	0x08008788
 80015f0:	0800878c 	.word	0x0800878c
 80015f4:	08008790 	.word	0x08008790
 80015f8:	08008794 	.word	0x08008794
 80015fc:	2000001c 	.word	0x2000001c
 8001600:	20000138 	.word	0x20000138
 8001604:	20000108 	.word	0x20000108

08001608 <cmd_handler_function>:
    }
}

void cmd_handler_function(void* pv)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
    BaseType_t xResult;
    static cmd_variable command;
    while(1)
    {
        xResult = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001610:	f04f 33ff 	mov.w	r3, #4294967295
 8001614:	2200      	movs	r2, #0
 8001616:	2100      	movs	r1, #0
 8001618:	2000      	movs	r0, #0
 800161a:	f005 f83b 	bl	8006694 <xTaskNotifyWait>
 800161e:	60f8      	str	r0, [r7, #12]
        if(xResult == pdTRUE)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d1f4      	bne.n	8001610 <cmd_handler_function+0x8>
        {
            process_cmd(&command);
 8001626:	4802      	ldr	r0, [pc, #8]	@ (8001630 <cmd_handler_function+0x28>)
 8001628:	f7ff feec 	bl	8001404 <process_cmd>
        xResult = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 800162c:	e7f0      	b.n	8001610 <cmd_handler_function+0x8>
 800162e:	bf00      	nop
 8001630:	200001d8 	.word	0x200001d8

08001634 <rtc_task>:
        }
    }
}

void rtc_task(void* pv)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b098      	sub	sp, #96	@ 0x60
 8001638:	af02      	add	r7, sp, #8
 800163a:	6078      	str	r0, [r7, #4]
	const char* msg_rtc = "========================\n"
 800163c:	4baa      	ldr	r3, [pc, #680]	@ (80018e8 <rtc_task+0x2b4>)
 800163e:	64bb      	str	r3, [r7, #72]	@ 0x48
							"|         RTC MENU     |\n"
							"========================\n";
	const char* rtc1    =
 8001640:	4baa      	ldr	r3, [pc, #680]	@ (80018ec <rtc_task+0x2b8>)
 8001642:	647b      	str	r3, [r7, #68]	@ 0x44
							"Configure Time            ----> 0\n"
							"Configure Date            ----> 1\n"
							"Enable reporting          ----> 2\n"
							"Exit                      ----> 3\n"
							"Enter your choice here : ";
	const char *msg_rtc_hh = "Enter hour(1-12):\n";
 8001644:	4baa      	ldr	r3, [pc, #680]	@ (80018f0 <rtc_task+0x2bc>)
 8001646:	643b      	str	r3, [r7, #64]	@ 0x40
	const char *msg_rtc_mm = "Enter minutes(0-59):\n";
 8001648:	4baa      	ldr	r3, [pc, #680]	@ (80018f4 <rtc_task+0x2c0>)
 800164a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	const char *msg_rtc_ss = "Enter seconds(0-59):\n";
 800164c:	4baa      	ldr	r3, [pc, #680]	@ (80018f8 <rtc_task+0x2c4>)
 800164e:	63bb      	str	r3, [r7, #56]	@ 0x38

	const char *msg_rtc_dd  = "Enter date(1-31):\n";
 8001650:	4baa      	ldr	r3, [pc, #680]	@ (80018fc <rtc_task+0x2c8>)
 8001652:	637b      	str	r3, [r7, #52]	@ 0x34
	const char *msg_rtc_mo  ="Enter month(1-12):\n";
 8001654:	4baa      	ldr	r3, [pc, #680]	@ (8001900 <rtc_task+0x2cc>)
 8001656:	633b      	str	r3, [r7, #48]	@ 0x30
	const char *msg_rtc_dow  = "Enter day(1-7 sun:1):\n";
 8001658:	4baa      	ldr	r3, [pc, #680]	@ (8001904 <rtc_task+0x2d0>)
 800165a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	const char *msg_rtc_yr  = "Enter year(0-99):\n";
 800165c:	4baa      	ldr	r3, [pc, #680]	@ (8001908 <rtc_task+0x2d4>)
 800165e:	62bb      	str	r3, [r7, #40]	@ 0x28

	const char *msg_conf = "Configuration successful\n";
 8001660:	4baa      	ldr	r3, [pc, #680]	@ (800190c <rtc_task+0x2d8>)
 8001662:	627b      	str	r3, [r7, #36]	@ 0x24
	const char *msg_rtc_report = "Enable time&date reporting(y/n)?: ";
 8001664:	4baa      	ldr	r3, [pc, #680]	@ (8001910 <rtc_task+0x2dc>)
 8001666:	657b      	str	r3, [r7, #84]	@ 0x54
	#define YR_Config 6


    while(1)
    {
    	xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001668:	f04f 33ff 	mov.w	r3, #4294967295
 800166c:	2200      	movs	r2, #0
 800166e:	2100      	movs	r1, #0
 8001670:	2000      	movs	r0, #0
 8001672:	f005 f80f 	bl	8006694 <xTaskNotifyWait>
        xQueueSend(q_print, &msg_rtc, portMAX_DELAY);
 8001676:	4ba7      	ldr	r3, [pc, #668]	@ (8001914 <rtc_task+0x2e0>)
 8001678:	6818      	ldr	r0, [r3, #0]
 800167a:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 800167e:	2300      	movs	r3, #0
 8001680:	f04f 32ff 	mov.w	r2, #4294967295
 8001684:	f003 fc86 	bl	8004f94 <xQueueGenericSend>
        show_time_date();
 8001688:	f7ff fc50 	bl	8000f2c <show_time_date>
        xQueueSend(q_print, &rtc1, portMAX_DELAY);
 800168c:	4ba1      	ldr	r3, [pc, #644]	@ (8001914 <rtc_task+0x2e0>)
 800168e:	6818      	ldr	r0, [r3, #0]
 8001690:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8001694:	2300      	movs	r3, #0
 8001696:	f04f 32ff 	mov.w	r2, #4294967295
 800169a:	f003 fc7b 	bl	8004f94 <xQueueGenericSend>
        while(curr_state != sMainMenu)
 800169e:	e177      	b.n	8001990 <rtc_task+0x35c>
        {
            xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);//
 80016a0:	f107 0220 	add.w	r2, r7, #32
 80016a4:	f04f 33ff 	mov.w	r3, #4294967295
 80016a8:	2100      	movs	r1, #0
 80016aa:	2000      	movs	r0, #0
 80016ac:	f004 fff2 	bl	8006694 <xTaskNotifyWait>
            cmd = (cmd_variable*)(uintptr_t)cmd_addr;
 80016b0:	6a3b      	ldr	r3, [r7, #32]
 80016b2:	653b      	str	r3, [r7, #80]	@ 0x50
            switch(curr_state)
 80016b4:	4b98      	ldr	r3, [pc, #608]	@ (8001918 <rtc_task+0x2e4>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b04      	cmp	r3, #4
 80016ba:	f000 80be 	beq.w	800183a <rtc_task+0x206>
 80016be:	2b04      	cmp	r3, #4
 80016c0:	f300 8166 	bgt.w	8001990 <rtc_task+0x35c>
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d002      	beq.n	80016ce <rtc_task+0x9a>
 80016c8:	2b03      	cmp	r3, #3
 80016ca:	d047      	beq.n	800175c <rtc_task+0x128>
 80016cc:	e160      	b.n	8001990 <rtc_task+0x35c>
        	{
            case sRtcMenu: { //ekk baar RTC_menu se bahar nikelga tho phir apne aap se curr_state change ho jayga
					if(cmd->len == 1)
 80016ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d136      	bne.n	8001744 <rtc_task+0x110>
					{
						int option = cmd->cmd[0] - '0';
 80016d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	3b30      	subs	r3, #48	@ 0x30
 80016dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
						if(option == 0)
 80016de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d10c      	bne.n	80016fe <rtc_task+0xca>
						{
							curr_state = sRtcTimeConfig;
 80016e4:	4b8c      	ldr	r3, [pc, #560]	@ (8001918 <rtc_task+0x2e4>)
 80016e6:	2203      	movs	r2, #3
 80016e8:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_hh, portMAX_DELAY);
 80016ea:	4b8a      	ldr	r3, [pc, #552]	@ (8001914 <rtc_task+0x2e0>)
 80016ec:	6818      	ldr	r0, [r3, #0]
 80016ee:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80016f2:	2300      	movs	r3, #0
 80016f4:	f04f 32ff 	mov.w	r2, #4294967295
 80016f8:	f003 fc4c 	bl	8004f94 <xQueueGenericSend>
							break;
 80016fc:	e148      	b.n	8001990 <rtc_task+0x35c>
						}
						else if(option == 1)
 80016fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001700:	2b01      	cmp	r3, #1
 8001702:	d10c      	bne.n	800171e <rtc_task+0xea>
						{
							curr_state = sRtcDateConfig;
 8001704:	4b84      	ldr	r3, [pc, #528]	@ (8001918 <rtc_task+0x2e4>)
 8001706:	2204      	movs	r2, #4
 8001708:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_dd, portMAX_DELAY);
 800170a:	4b82      	ldr	r3, [pc, #520]	@ (8001914 <rtc_task+0x2e0>)
 800170c:	6818      	ldr	r0, [r3, #0]
 800170e:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8001712:	2300      	movs	r3, #0
 8001714:	f04f 32ff 	mov.w	r2, #4294967295
 8001718:	f003 fc3c 	bl	8004f94 <xQueueGenericSend>
							break;
 800171c:	e138      	b.n	8001990 <rtc_task+0x35c>
						}
						else if(option == 3)
 800171e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001720:	2b03      	cmp	r3, #3
 8001722:	d103      	bne.n	800172c <rtc_task+0xf8>
						{
							curr_state = sMainMenu;
 8001724:	4b7c      	ldr	r3, [pc, #496]	@ (8001918 <rtc_task+0x2e4>)
 8001726:	2200      	movs	r2, #0
 8001728:	701a      	strb	r2, [r3, #0]
							break;
 800172a:	e131      	b.n	8001990 <rtc_task+0x35c>
						}
						else
						{
							xQueueSend(q_print, &invalid_msg, portMAX_DELAY);
 800172c:	4b79      	ldr	r3, [pc, #484]	@ (8001914 <rtc_task+0x2e0>)
 800172e:	6818      	ldr	r0, [r3, #0]
 8001730:	2300      	movs	r3, #0
 8001732:	f04f 32ff 	mov.w	r2, #4294967295
 8001736:	4979      	ldr	r1, [pc, #484]	@ (800191c <rtc_task+0x2e8>)
 8001738:	f003 fc2c 	bl	8004f94 <xQueueGenericSend>
							curr_state = sMainMenu;
 800173c:	4b76      	ldr	r3, [pc, #472]	@ (8001918 <rtc_task+0x2e4>)
 800173e:	2200      	movs	r2, #0
 8001740:	701a      	strb	r2, [r3, #0]
					{
						xQueueSend(q_print, &invalid_msg, portMAX_DELAY);
						curr_state = sMainMenu;
						break;
					}
					break;
 8001742:	e125      	b.n	8001990 <rtc_task+0x35c>
						xQueueSend(q_print, &invalid_msg, portMAX_DELAY);
 8001744:	4b73      	ldr	r3, [pc, #460]	@ (8001914 <rtc_task+0x2e0>)
 8001746:	6818      	ldr	r0, [r3, #0]
 8001748:	2300      	movs	r3, #0
 800174a:	f04f 32ff 	mov.w	r2, #4294967295
 800174e:	4973      	ldr	r1, [pc, #460]	@ (800191c <rtc_task+0x2e8>)
 8001750:	f003 fc20 	bl	8004f94 <xQueueGenericSend>
						curr_state = sMainMenu;
 8001754:	4b70      	ldr	r3, [pc, #448]	@ (8001918 <rtc_task+0x2e4>)
 8001756:	2200      	movs	r2, #0
 8001758:	701a      	strb	r2, [r3, #0]
						break;
 800175a:	e119      	b.n	8001990 <rtc_task+0x35c>
        	}
            case sRtcTimeConfig:
            {
            	switch(rtc_state)
 800175c:	4b70      	ldr	r3, [pc, #448]	@ (8001920 <rtc_task+0x2ec>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b02      	cmp	r3, #2
 8001762:	d035      	beq.n	80017d0 <rtc_task+0x19c>
 8001764:	2b02      	cmp	r3, #2
 8001766:	f300 8110 	bgt.w	800198a <rtc_task+0x356>
 800176a:	2b00      	cmp	r3, #0
 800176c:	d002      	beq.n	8001774 <rtc_task+0x140>
 800176e:	2b01      	cmp	r3, #1
 8001770:	d017      	beq.n	80017a2 <rtc_task+0x16e>
            		}
            		rtc_state = 0;
            		break;
            	}
            	}
            	break;
 8001772:	e10a      	b.n	800198a <rtc_task+0x356>
            		rtc_time.Hours =get_number(cmd->cmd,cmd->len);
 8001774:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001776:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	4619      	mov	r1, r3
 800177c:	4610      	mov	r0, r2
 800177e:	f000 f91f 	bl	80019c0 <get_number>
 8001782:	4603      	mov	r3, r0
 8001784:	b2db      	uxtb	r3, r3
 8001786:	723b      	strb	r3, [r7, #8]
            		rtc_state = MM_Config;
 8001788:	4b65      	ldr	r3, [pc, #404]	@ (8001920 <rtc_task+0x2ec>)
 800178a:	2201      	movs	r2, #1
 800178c:	601a      	str	r2, [r3, #0]
            		xQueueSend(q_print, &msg_rtc_mm, portMAX_DELAY);
 800178e:	4b61      	ldr	r3, [pc, #388]	@ (8001914 <rtc_task+0x2e0>)
 8001790:	6818      	ldr	r0, [r3, #0]
 8001792:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8001796:	2300      	movs	r3, #0
 8001798:	f04f 32ff 	mov.w	r2, #4294967295
 800179c:	f003 fbfa 	bl	8004f94 <xQueueGenericSend>
            		break;
 80017a0:	e04a      	b.n	8001838 <rtc_task+0x204>
            		rtc_time.Minutes =get_number(cmd->cmd,cmd->len);
 80017a2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80017a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	4619      	mov	r1, r3
 80017aa:	4610      	mov	r0, r2
 80017ac:	f000 f908 	bl	80019c0 <get_number>
 80017b0:	4603      	mov	r3, r0
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	727b      	strb	r3, [r7, #9]
            		rtc_state = SS_Config;
 80017b6:	4b5a      	ldr	r3, [pc, #360]	@ (8001920 <rtc_task+0x2ec>)
 80017b8:	2202      	movs	r2, #2
 80017ba:	601a      	str	r2, [r3, #0]
            		xQueueSend(q_print, &msg_rtc_ss, portMAX_DELAY);
 80017bc:	4b55      	ldr	r3, [pc, #340]	@ (8001914 <rtc_task+0x2e0>)
 80017be:	6818      	ldr	r0, [r3, #0]
 80017c0:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80017c4:	2300      	movs	r3, #0
 80017c6:	f04f 32ff 	mov.w	r2, #4294967295
 80017ca:	f003 fbe3 	bl	8004f94 <xQueueGenericSend>
            		break;
 80017ce:	e033      	b.n	8001838 <rtc_task+0x204>
            		rtc_time.Seconds =get_number(cmd->cmd,cmd->len);
 80017d0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80017d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	4619      	mov	r1, r3
 80017d8:	4610      	mov	r0, r2
 80017da:	f000 f8f1 	bl	80019c0 <get_number>
 80017de:	4603      	mov	r3, r0
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	72bb      	strb	r3, [r7, #10]
            		curr_state = sMainMenu;
 80017e4:	4b4c      	ldr	r3, [pc, #304]	@ (8001918 <rtc_task+0x2e4>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	701a      	strb	r2, [r3, #0]
            		if(check_time_configurations(rtc_time))
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	9300      	str	r3, [sp, #0]
 80017ee:	f107 0308 	add.w	r3, r7, #8
 80017f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017f4:	f000 f907 	bl	8001a06 <check_time_configurations>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d010      	beq.n	8001820 <rtc_task+0x1ec>
            			rtc_configure_time(&rtc_time);
 80017fe:	f107 0308 	add.w	r3, r7, #8
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff fb6a 	bl	8000edc <rtc_configure_time>
                		xQueueSend(q_print, &msg_conf, portMAX_DELAY);
 8001808:	4b42      	ldr	r3, [pc, #264]	@ (8001914 <rtc_task+0x2e0>)
 800180a:	6818      	ldr	r0, [r3, #0]
 800180c:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001810:	2300      	movs	r3, #0
 8001812:	f04f 32ff 	mov.w	r2, #4294967295
 8001816:	f003 fbbd 	bl	8004f94 <xQueueGenericSend>
                		show_time_date();
 800181a:	f7ff fb87 	bl	8000f2c <show_time_date>
 800181e:	e007      	b.n	8001830 <rtc_task+0x1fc>
						xQueueSend(q_print, &invalid_msg, portMAX_DELAY);
 8001820:	4b3c      	ldr	r3, [pc, #240]	@ (8001914 <rtc_task+0x2e0>)
 8001822:	6818      	ldr	r0, [r3, #0]
 8001824:	2300      	movs	r3, #0
 8001826:	f04f 32ff 	mov.w	r2, #4294967295
 800182a:	493c      	ldr	r1, [pc, #240]	@ (800191c <rtc_task+0x2e8>)
 800182c:	f003 fbb2 	bl	8004f94 <xQueueGenericSend>
            		rtc_state = 0;
 8001830:	4b3b      	ldr	r3, [pc, #236]	@ (8001920 <rtc_task+0x2ec>)
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
            		break;
 8001836:	bf00      	nop
            	break;
 8001838:	e0a7      	b.n	800198a <rtc_task+0x356>
            }
            case sRtcDateConfig:
            {
            	switch(rtc_state_date)
 800183a:	4b3a      	ldr	r3, [pc, #232]	@ (8001924 <rtc_task+0x2f0>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	3b03      	subs	r3, #3
 8001840:	2b03      	cmp	r3, #3
 8001842:	f200 80a4 	bhi.w	800198e <rtc_task+0x35a>
 8001846:	a201      	add	r2, pc, #4	@ (adr r2, 800184c <rtc_task+0x218>)
 8001848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800184c:	0800185d 	.word	0x0800185d
 8001850:	0800188b 	.word	0x0800188b
 8001854:	080018b9 	.word	0x080018b9
 8001858:	08001929 	.word	0x08001929
            	{
            	case DD_Config:
            	{
            		rtc_date.Date =get_number(cmd->cmd,cmd->len);
 800185c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800185e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	4619      	mov	r1, r3
 8001864:	4610      	mov	r0, r2
 8001866:	f000 f8ab 	bl	80019c0 <get_number>
 800186a:	4603      	mov	r3, r0
 800186c:	b2db      	uxtb	r3, r3
 800186e:	77bb      	strb	r3, [r7, #30]
            		rtc_state_date = MO_Config;
 8001870:	4b2c      	ldr	r3, [pc, #176]	@ (8001924 <rtc_task+0x2f0>)
 8001872:	2204      	movs	r2, #4
 8001874:	601a      	str	r2, [r3, #0]
            		xQueueSend(q_print, &msg_rtc_mo, portMAX_DELAY);
 8001876:	4b27      	ldr	r3, [pc, #156]	@ (8001914 <rtc_task+0x2e0>)
 8001878:	6818      	ldr	r0, [r3, #0]
 800187a:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800187e:	2300      	movs	r3, #0
 8001880:	f04f 32ff 	mov.w	r2, #4294967295
 8001884:	f003 fb86 	bl	8004f94 <xQueueGenericSend>
            		break;
 8001888:	e07e      	b.n	8001988 <rtc_task+0x354>
            	}
            	case MO_Config:
            	{
            		rtc_date.Month =get_number(cmd->cmd,cmd->len);
 800188a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800188c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	4619      	mov	r1, r3
 8001892:	4610      	mov	r0, r2
 8001894:	f000 f894 	bl	80019c0 <get_number>
 8001898:	4603      	mov	r3, r0
 800189a:	b2db      	uxtb	r3, r3
 800189c:	777b      	strb	r3, [r7, #29]
            		rtc_state_date = DOW_Config;
 800189e:	4b21      	ldr	r3, [pc, #132]	@ (8001924 <rtc_task+0x2f0>)
 80018a0:	2205      	movs	r2, #5
 80018a2:	601a      	str	r2, [r3, #0]
            		xQueueSend(q_print, &msg_rtc_dow, portMAX_DELAY);
 80018a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001914 <rtc_task+0x2e0>)
 80018a6:	6818      	ldr	r0, [r3, #0]
 80018a8:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80018ac:	2300      	movs	r3, #0
 80018ae:	f04f 32ff 	mov.w	r2, #4294967295
 80018b2:	f003 fb6f 	bl	8004f94 <xQueueGenericSend>
            		break;
 80018b6:	e067      	b.n	8001988 <rtc_task+0x354>
            	}
            	case DOW_Config:
            	{
            		rtc_date.WeekDay =get_number(cmd->cmd,cmd->len);
 80018b8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80018ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	4619      	mov	r1, r3
 80018c0:	4610      	mov	r0, r2
 80018c2:	f000 f87d 	bl	80019c0 <get_number>
 80018c6:	4603      	mov	r3, r0
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	773b      	strb	r3, [r7, #28]
            		rtc_state_date = YR_Config;
 80018cc:	4b15      	ldr	r3, [pc, #84]	@ (8001924 <rtc_task+0x2f0>)
 80018ce:	2206      	movs	r2, #6
 80018d0:	601a      	str	r2, [r3, #0]
            		xQueueSend(q_print, &msg_rtc_yr, portMAX_DELAY);
 80018d2:	4b10      	ldr	r3, [pc, #64]	@ (8001914 <rtc_task+0x2e0>)
 80018d4:	6818      	ldr	r0, [r3, #0]
 80018d6:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80018da:	2300      	movs	r3, #0
 80018dc:	f04f 32ff 	mov.w	r2, #4294967295
 80018e0:	f003 fb58 	bl	8004f94 <xQueueGenericSend>
            		break;
 80018e4:	e050      	b.n	8001988 <rtc_task+0x354>
 80018e6:	bf00      	nop
 80018e8:	0800879c 	.word	0x0800879c
 80018ec:	080087e8 	.word	0x080087e8
 80018f0:	0800888c 	.word	0x0800888c
 80018f4:	080088a0 	.word	0x080088a0
 80018f8:	080088b8 	.word	0x080088b8
 80018fc:	080088d0 	.word	0x080088d0
 8001900:	080088e4 	.word	0x080088e4
 8001904:	080088f8 	.word	0x080088f8
 8001908:	08008910 	.word	0x08008910
 800190c:	08008924 	.word	0x08008924
 8001910:	08008940 	.word	0x08008940
 8001914:	20000118 	.word	0x20000118
 8001918:	20000138 	.word	0x20000138
 800191c:	2000001c 	.word	0x2000001c
 8001920:	20000134 	.word	0x20000134
 8001924:	20000000 	.word	0x20000000
            	}
            	case YR_Config:
            	{
            		rtc_date.Year =get_number(cmd->cmd,cmd->len);
 8001928:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800192a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	4619      	mov	r1, r3
 8001930:	4610      	mov	r0, r2
 8001932:	f000 f845 	bl	80019c0 <get_number>
 8001936:	4603      	mov	r3, r0
 8001938:	b2db      	uxtb	r3, r3
 800193a:	77fb      	strb	r3, [r7, #31]
              		curr_state = sMainMenu;
 800193c:	4b1b      	ldr	r3, [pc, #108]	@ (80019ac <rtc_task+0x378>)
 800193e:	2200      	movs	r2, #0
 8001940:	701a      	strb	r2, [r3, #0]
                		if(check_date_configurations(rtc_date))
 8001942:	69f8      	ldr	r0, [r7, #28]
 8001944:	f000 f880 	bl	8001a48 <check_date_configurations>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d010      	beq.n	8001970 <rtc_task+0x33c>
                		{
                			rtc_configure_date(&rtc_date);
 800194e:	f107 031c 	add.w	r3, r7, #28
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff fada 	bl	8000f0c <rtc_configure_date>
                    		xQueueSend(q_print, &msg_conf, portMAX_DELAY);
 8001958:	4b15      	ldr	r3, [pc, #84]	@ (80019b0 <rtc_task+0x37c>)
 800195a:	6818      	ldr	r0, [r3, #0]
 800195c:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001960:	2300      	movs	r3, #0
 8001962:	f04f 32ff 	mov.w	r2, #4294967295
 8001966:	f003 fb15 	bl	8004f94 <xQueueGenericSend>
                    		show_time_date();
 800196a:	f7ff fadf 	bl	8000f2c <show_time_date>
 800196e:	e007      	b.n	8001980 <rtc_task+0x34c>
                		}
                		else
                		{
    						xQueueSend(q_print, &invalid_msg, portMAX_DELAY);
 8001970:	4b0f      	ldr	r3, [pc, #60]	@ (80019b0 <rtc_task+0x37c>)
 8001972:	6818      	ldr	r0, [r3, #0]
 8001974:	2300      	movs	r3, #0
 8001976:	f04f 32ff 	mov.w	r2, #4294967295
 800197a:	490e      	ldr	r1, [pc, #56]	@ (80019b4 <rtc_task+0x380>)
 800197c:	f003 fb0a 	bl	8004f94 <xQueueGenericSend>
                		}
                		rtc_state_date = 0;
 8001980:	4b0d      	ldr	r3, [pc, #52]	@ (80019b8 <rtc_task+0x384>)
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
                		break;
 8001986:	bf00      	nop
            	}
            	}
            	break;
 8001988:	e001      	b.n	800198e <rtc_task+0x35a>
            	break;
 800198a:	bf00      	nop
 800198c:	e000      	b.n	8001990 <rtc_task+0x35c>
            	break;
 800198e:	bf00      	nop
        while(curr_state != sMainMenu)
 8001990:	4b06      	ldr	r3, [pc, #24]	@ (80019ac <rtc_task+0x378>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	f47f ae83 	bne.w	80016a0 <rtc_task+0x6c>
            }
				}
        }
        xTaskNotify(xHandlemenu, 0, eNoAction);
 800199a:	4b08      	ldr	r3, [pc, #32]	@ (80019bc <rtc_task+0x388>)
 800199c:	6818      	ldr	r0, [r3, #0]
 800199e:	2300      	movs	r3, #0
 80019a0:	2200      	movs	r2, #0
 80019a2:	2100      	movs	r1, #0
 80019a4:	f004 fed6 	bl	8006754 <xTaskGenericNotify>
    	xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80019a8:	e65e      	b.n	8001668 <rtc_task+0x34>
 80019aa:	bf00      	nop
 80019ac:	20000138 	.word	0x20000138
 80019b0:	20000118 	.word	0x20000118
 80019b4:	2000001c 	.word	0x2000001c
 80019b8:	20000000 	.word	0x20000000
 80019bc:	20000108 	.word	0x20000108

080019c0 <get_number>:
    }
}
int get_number(uint8_t arr[],int l)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
	int y;
	if(l==2)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d10f      	bne.n	80019f0 <get_number+0x30>
		y =10*(arr[0] - '0') + arr[1] - '0';
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80019d8:	4613      	mov	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	461a      	mov	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	3301      	adds	r3, #1
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	4413      	add	r3, r2
 80019ea:	3b30      	subs	r3, #48	@ 0x30
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	e003      	b.n	80019f8 <get_number+0x38>
	else
		y=arr[0]-'0';
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	3b30      	subs	r3, #48	@ 0x30
 80019f6:	60fb      	str	r3, [r7, #12]
	return y;
 80019f8:	68fb      	ldr	r3, [r7, #12]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3714      	adds	r7, #20
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <check_time_configurations>:
int check_time_configurations(RTC_TimeTypeDef rtc_time)
{
 8001a06:	b084      	sub	sp, #16
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	f107 0c10 	add.w	ip, r7, #16
 8001a12:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int flag = 1;
 8001a16:	2301      	movs	r3, #1
 8001a18:	607b      	str	r3, [r7, #4]
	if(rtc_time.Hours > 12)
 8001a1a:	7c3b      	ldrb	r3, [r7, #16]
 8001a1c:	2b0c      	cmp	r3, #12
 8001a1e:	d901      	bls.n	8001a24 <check_time_configurations+0x1e>
		flag=0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	607b      	str	r3, [r7, #4]
	if(rtc_time.Minutes > 59)
 8001a24:	7c7b      	ldrb	r3, [r7, #17]
 8001a26:	2b3b      	cmp	r3, #59	@ 0x3b
 8001a28:	d901      	bls.n	8001a2e <check_time_configurations+0x28>
		flag=0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	607b      	str	r3, [r7, #4]
	if(rtc_time.Seconds >59)
 8001a2e:	7cbb      	ldrb	r3, [r7, #18]
 8001a30:	2b3b      	cmp	r3, #59	@ 0x3b
 8001a32:	d901      	bls.n	8001a38 <check_time_configurations+0x32>
		flag=0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	607b      	str	r3, [r7, #4]
	return flag;
 8001a38:	687b      	ldr	r3, [r7, #4]
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	b004      	add	sp, #16
 8001a46:	4770      	bx	lr

08001a48 <check_date_configurations>:
int check_date_configurations(RTC_DateTypeDef rtc_date)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
	int flag =1;
 8001a50:	2301      	movs	r3, #1
 8001a52:	60fb      	str	r3, [r7, #12]
	if(rtc_date.Date >31)
 8001a54:	79bb      	ldrb	r3, [r7, #6]
 8001a56:	2b1f      	cmp	r3, #31
 8001a58:	d901      	bls.n	8001a5e <check_date_configurations+0x16>
		flag= 0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]
	if(rtc_date.Month >12)
 8001a5e:	797b      	ldrb	r3, [r7, #5]
 8001a60:	2b0c      	cmp	r3, #12
 8001a62:	d901      	bls.n	8001a68 <check_date_configurations+0x20>
		flag= 0;
 8001a64:	2300      	movs	r3, #0
 8001a66:	60fb      	str	r3, [r7, #12]
	if(rtc_date.WeekDay >7)
 8001a68:	793b      	ldrb	r3, [r7, #4]
 8001a6a:	2b07      	cmp	r3, #7
 8001a6c:	d901      	bls.n	8001a72 <check_date_configurations+0x2a>
		flag= 0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60fb      	str	r3, [r7, #12]
	if(rtc_date.Year>99)
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	2b63      	cmp	r3, #99	@ 0x63
 8001a76:	d901      	bls.n	8001a7c <check_date_configurations+0x34>
		flag= 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60fb      	str	r3, [r7, #12]
	return flag;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
	...

08001a8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ac4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001a90:	f7ff fc42 	bl	8001318 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a94:	480c      	ldr	r0, [pc, #48]	@ (8001ac8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a96:	490d      	ldr	r1, [pc, #52]	@ (8001acc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a98:	4a0d      	ldr	r2, [pc, #52]	@ (8001ad0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a9c:	e002      	b.n	8001aa4 <LoopCopyDataInit>

08001a9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aa2:	3304      	adds	r3, #4

08001aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa8:	d3f9      	bcc.n	8001a9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aaa:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001aac:	4c0a      	ldr	r4, [pc, #40]	@ (8001ad8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001aae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab0:	e001      	b.n	8001ab6 <LoopFillZerobss>

08001ab2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ab2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab4:	3204      	adds	r2, #4

08001ab6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ab6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab8:	d3fb      	bcc.n	8001ab2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001aba:	f006 f8f3 	bl	8007ca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001abe:	f7fe ff0d 	bl	80008dc <main>
  bx  lr    
 8001ac2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ac4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ac8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001acc:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001ad0:	080089fc 	.word	0x080089fc
  ldr r2, =_sbss
 8001ad4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001ad8:	20004d1c 	.word	0x20004d1c

08001adc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001adc:	e7fe      	b.n	8001adc <ADC_IRQHandler>
	...

08001ae0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8001b20 <HAL_Init+0x40>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a0d      	ldr	r2, [pc, #52]	@ (8001b20 <HAL_Init+0x40>)
 8001aea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001aee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001af0:	4b0b      	ldr	r3, [pc, #44]	@ (8001b20 <HAL_Init+0x40>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a0a      	ldr	r2, [pc, #40]	@ (8001b20 <HAL_Init+0x40>)
 8001af6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001afa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001afc:	4b08      	ldr	r3, [pc, #32]	@ (8001b20 <HAL_Init+0x40>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a07      	ldr	r2, [pc, #28]	@ (8001b20 <HAL_Init+0x40>)
 8001b02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b08:	2003      	movs	r0, #3
 8001b0a:	f000 f8d8 	bl	8001cbe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b0e:	2000      	movs	r0, #0
 8001b10:	f7ff fb20 	bl	8001154 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b14:	f7ff fa76 	bl	8001004 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40023c00 	.word	0x40023c00

08001b24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b28:	4b06      	ldr	r3, [pc, #24]	@ (8001b44 <HAL_IncTick+0x20>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4b06      	ldr	r3, [pc, #24]	@ (8001b48 <HAL_IncTick+0x24>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4413      	add	r3, r2
 8001b34:	4a04      	ldr	r2, [pc, #16]	@ (8001b48 <HAL_IncTick+0x24>)
 8001b36:	6013      	str	r3, [r2, #0]
}
 8001b38:	bf00      	nop
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	20000024 	.word	0x20000024
 8001b48:	200001e8 	.word	0x200001e8

08001b4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b50:	4b03      	ldr	r3, [pc, #12]	@ (8001b60 <HAL_GetTick+0x14>)
 8001b52:	681b      	ldr	r3, [r3, #0]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	200001e8 	.word	0x200001e8

08001b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b74:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b7a:	68ba      	ldr	r2, [r7, #8]
 8001b7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b80:	4013      	ands	r3, r2
 8001b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b96:	4a04      	ldr	r2, [pc, #16]	@ (8001ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	60d3      	str	r3, [r2, #12]
}
 8001b9c:	bf00      	nop
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bb0:	4b04      	ldr	r3, [pc, #16]	@ (8001bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	0a1b      	lsrs	r3, r3, #8
 8001bb6:	f003 0307 	and.w	r3, r3, #7
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	db0b      	blt.n	8001bf2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bda:	79fb      	ldrb	r3, [r7, #7]
 8001bdc:	f003 021f 	and.w	r2, r3, #31
 8001be0:	4907      	ldr	r1, [pc, #28]	@ (8001c00 <__NVIC_EnableIRQ+0x38>)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	095b      	lsrs	r3, r3, #5
 8001be8:	2001      	movs	r0, #1
 8001bea:	fa00 f202 	lsl.w	r2, r0, r2
 8001bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	e000e100 	.word	0xe000e100

08001c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	6039      	str	r1, [r7, #0]
 8001c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	db0a      	blt.n	8001c2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	b2da      	uxtb	r2, r3
 8001c1c:	490c      	ldr	r1, [pc, #48]	@ (8001c50 <__NVIC_SetPriority+0x4c>)
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	0112      	lsls	r2, r2, #4
 8001c24:	b2d2      	uxtb	r2, r2
 8001c26:	440b      	add	r3, r1
 8001c28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c2c:	e00a      	b.n	8001c44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	4908      	ldr	r1, [pc, #32]	@ (8001c54 <__NVIC_SetPriority+0x50>)
 8001c34:	79fb      	ldrb	r3, [r7, #7]
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	3b04      	subs	r3, #4
 8001c3c:	0112      	lsls	r2, r2, #4
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	440b      	add	r3, r1
 8001c42:	761a      	strb	r2, [r3, #24]
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	e000e100 	.word	0xe000e100
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b089      	sub	sp, #36	@ 0x24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	f1c3 0307 	rsb	r3, r3, #7
 8001c72:	2b04      	cmp	r3, #4
 8001c74:	bf28      	it	cs
 8001c76:	2304      	movcs	r3, #4
 8001c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	2b06      	cmp	r3, #6
 8001c80:	d902      	bls.n	8001c88 <NVIC_EncodePriority+0x30>
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	3b03      	subs	r3, #3
 8001c86:	e000      	b.n	8001c8a <NVIC_EncodePriority+0x32>
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43da      	mvns	r2, r3
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	401a      	ands	r2, r3
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8001caa:	43d9      	mvns	r1, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb0:	4313      	orrs	r3, r2
         );
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3724      	adds	r7, #36	@ 0x24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b082      	sub	sp, #8
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7ff ff4c 	bl	8001b64 <__NVIC_SetPriorityGrouping>
}
 8001ccc:	bf00      	nop
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
 8001ce0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ce6:	f7ff ff61 	bl	8001bac <__NVIC_GetPriorityGrouping>
 8001cea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	68b9      	ldr	r1, [r7, #8]
 8001cf0:	6978      	ldr	r0, [r7, #20]
 8001cf2:	f7ff ffb1 	bl	8001c58 <NVIC_EncodePriority>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cfc:	4611      	mov	r1, r2
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff ff80 	bl	8001c04 <__NVIC_SetPriority>
}
 8001d04:	bf00      	nop
 8001d06:	3718      	adds	r7, #24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff ff54 	bl	8001bc8 <__NVIC_EnableIRQ>
}
 8001d20:	bf00      	nop
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d34:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d36:	f7ff ff09 	bl	8001b4c <HAL_GetTick>
 8001d3a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d008      	beq.n	8001d5a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2280      	movs	r2, #128	@ 0x80
 8001d4c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e052      	b.n	8001e00 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f022 0216 	bic.w	r2, r2, #22
 8001d68:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	695a      	ldr	r2, [r3, #20]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d78:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d103      	bne.n	8001d8a <HAL_DMA_Abort+0x62>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d007      	beq.n	8001d9a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f022 0208 	bic.w	r2, r2, #8
 8001d98:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 0201 	bic.w	r2, r2, #1
 8001da8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001daa:	e013      	b.n	8001dd4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dac:	f7ff fece 	bl	8001b4c <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b05      	cmp	r3, #5
 8001db8:	d90c      	bls.n	8001dd4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2220      	movs	r2, #32
 8001dbe:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2203      	movs	r2, #3
 8001dc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e015      	b.n	8001e00 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1e4      	bne.n	8001dac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001de6:	223f      	movs	r2, #63	@ 0x3f
 8001de8:	409a      	lsls	r2, r3
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2201      	movs	r2, #1
 8001df2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3710      	adds	r7, #16
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d004      	beq.n	8001e26 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2280      	movs	r2, #128	@ 0x80
 8001e20:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e00c      	b.n	8001e40 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2205      	movs	r2, #5
 8001e2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 0201 	bic.w	r2, r2, #1
 8001e3c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b089      	sub	sp, #36	@ 0x24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e56:	2300      	movs	r3, #0
 8001e58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e62:	2300      	movs	r3, #0
 8001e64:	61fb      	str	r3, [r7, #28]
 8001e66:	e159      	b.n	800211c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e68:	2201      	movs	r2, #1
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	f040 8148 	bne.w	8002116 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d005      	beq.n	8001e9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d130      	bne.n	8001f00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	2203      	movs	r2, #3
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	68da      	ldr	r2, [r3, #12]
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	43db      	mvns	r3, r3
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	091b      	lsrs	r3, r3, #4
 8001eea:	f003 0201 	and.w	r2, r3, #1
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f003 0303 	and.w	r3, r3, #3
 8001f08:	2b03      	cmp	r3, #3
 8001f0a:	d017      	beq.n	8001f3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	2203      	movs	r2, #3
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4013      	ands	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f003 0303 	and.w	r3, r3, #3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d123      	bne.n	8001f90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	08da      	lsrs	r2, r3, #3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3208      	adds	r2, #8
 8001f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	f003 0307 	and.w	r3, r3, #7
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	220f      	movs	r2, #15
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	691a      	ldr	r2, [r3, #16]
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	08da      	lsrs	r2, r3, #3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	3208      	adds	r2, #8
 8001f8a:	69b9      	ldr	r1, [r7, #24]
 8001f8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	2203      	movs	r2, #3
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f003 0203 	and.w	r2, r3, #3
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f000 80a2 	beq.w	8002116 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	4b57      	ldr	r3, [pc, #348]	@ (8002134 <HAL_GPIO_Init+0x2e8>)
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fda:	4a56      	ldr	r2, [pc, #344]	@ (8002134 <HAL_GPIO_Init+0x2e8>)
 8001fdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fe0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fe2:	4b54      	ldr	r3, [pc, #336]	@ (8002134 <HAL_GPIO_Init+0x2e8>)
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fee:	4a52      	ldr	r2, [pc, #328]	@ (8002138 <HAL_GPIO_Init+0x2ec>)
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	089b      	lsrs	r3, r3, #2
 8001ff4:	3302      	adds	r3, #2
 8001ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	f003 0303 	and.w	r3, r3, #3
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	220f      	movs	r2, #15
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43db      	mvns	r3, r3
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	4013      	ands	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a49      	ldr	r2, [pc, #292]	@ (800213c <HAL_GPIO_Init+0x2f0>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d019      	beq.n	800204e <HAL_GPIO_Init+0x202>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a48      	ldr	r2, [pc, #288]	@ (8002140 <HAL_GPIO_Init+0x2f4>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d013      	beq.n	800204a <HAL_GPIO_Init+0x1fe>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a47      	ldr	r2, [pc, #284]	@ (8002144 <HAL_GPIO_Init+0x2f8>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d00d      	beq.n	8002046 <HAL_GPIO_Init+0x1fa>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a46      	ldr	r2, [pc, #280]	@ (8002148 <HAL_GPIO_Init+0x2fc>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d007      	beq.n	8002042 <HAL_GPIO_Init+0x1f6>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a45      	ldr	r2, [pc, #276]	@ (800214c <HAL_GPIO_Init+0x300>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d101      	bne.n	800203e <HAL_GPIO_Init+0x1f2>
 800203a:	2304      	movs	r3, #4
 800203c:	e008      	b.n	8002050 <HAL_GPIO_Init+0x204>
 800203e:	2307      	movs	r3, #7
 8002040:	e006      	b.n	8002050 <HAL_GPIO_Init+0x204>
 8002042:	2303      	movs	r3, #3
 8002044:	e004      	b.n	8002050 <HAL_GPIO_Init+0x204>
 8002046:	2302      	movs	r3, #2
 8002048:	e002      	b.n	8002050 <HAL_GPIO_Init+0x204>
 800204a:	2301      	movs	r3, #1
 800204c:	e000      	b.n	8002050 <HAL_GPIO_Init+0x204>
 800204e:	2300      	movs	r3, #0
 8002050:	69fa      	ldr	r2, [r7, #28]
 8002052:	f002 0203 	and.w	r2, r2, #3
 8002056:	0092      	lsls	r2, r2, #2
 8002058:	4093      	lsls	r3, r2
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002060:	4935      	ldr	r1, [pc, #212]	@ (8002138 <HAL_GPIO_Init+0x2ec>)
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	089b      	lsrs	r3, r3, #2
 8002066:	3302      	adds	r3, #2
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800206e:	4b38      	ldr	r3, [pc, #224]	@ (8002150 <HAL_GPIO_Init+0x304>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	43db      	mvns	r3, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4013      	ands	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	4313      	orrs	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002092:	4a2f      	ldr	r2, [pc, #188]	@ (8002150 <HAL_GPIO_Init+0x304>)
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002098:	4b2d      	ldr	r3, [pc, #180]	@ (8002150 <HAL_GPIO_Init+0x304>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	43db      	mvns	r3, r3
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4013      	ands	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020bc:	4a24      	ldr	r2, [pc, #144]	@ (8002150 <HAL_GPIO_Init+0x304>)
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020c2:	4b23      	ldr	r3, [pc, #140]	@ (8002150 <HAL_GPIO_Init+0x304>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	43db      	mvns	r3, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4013      	ands	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020e6:	4a1a      	ldr	r2, [pc, #104]	@ (8002150 <HAL_GPIO_Init+0x304>)
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020ec:	4b18      	ldr	r3, [pc, #96]	@ (8002150 <HAL_GPIO_Init+0x304>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	43db      	mvns	r3, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4013      	ands	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	4313      	orrs	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002110:	4a0f      	ldr	r2, [pc, #60]	@ (8002150 <HAL_GPIO_Init+0x304>)
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	3301      	adds	r3, #1
 800211a:	61fb      	str	r3, [r7, #28]
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	2b0f      	cmp	r3, #15
 8002120:	f67f aea2 	bls.w	8001e68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002124:	bf00      	nop
 8002126:	bf00      	nop
 8002128:	3724      	adds	r7, #36	@ 0x24
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	40023800 	.word	0x40023800
 8002138:	40013800 	.word	0x40013800
 800213c:	40020000 	.word	0x40020000
 8002140:	40020400 	.word	0x40020400
 8002144:	40020800 	.word	0x40020800
 8002148:	40020c00 	.word	0x40020c00
 800214c:	40021000 	.word	0x40021000
 8002150:	40013c00 	.word	0x40013c00

08002154 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	460b      	mov	r3, r1
 800215e:	807b      	strh	r3, [r7, #2]
 8002160:	4613      	mov	r3, r2
 8002162:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002164:	787b      	ldrb	r3, [r7, #1]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800216a:	887a      	ldrh	r2, [r7, #2]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002170:	e003      	b.n	800217a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002172:	887b      	ldrh	r3, [r7, #2]
 8002174:	041a      	lsls	r2, r3, #16
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	619a      	str	r2, [r3, #24]
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
	...

08002188 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e267      	b.n	800266a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d075      	beq.n	8002292 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80021a6:	4b88      	ldr	r3, [pc, #544]	@ (80023c8 <HAL_RCC_OscConfig+0x240>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 030c 	and.w	r3, r3, #12
 80021ae:	2b04      	cmp	r3, #4
 80021b0:	d00c      	beq.n	80021cc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021b2:	4b85      	ldr	r3, [pc, #532]	@ (80023c8 <HAL_RCC_OscConfig+0x240>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80021ba:	2b08      	cmp	r3, #8
 80021bc:	d112      	bne.n	80021e4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021be:	4b82      	ldr	r3, [pc, #520]	@ (80023c8 <HAL_RCC_OscConfig+0x240>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021ca:	d10b      	bne.n	80021e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021cc:	4b7e      	ldr	r3, [pc, #504]	@ (80023c8 <HAL_RCC_OscConfig+0x240>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d05b      	beq.n	8002290 <HAL_RCC_OscConfig+0x108>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d157      	bne.n	8002290 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e242      	b.n	800266a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021ec:	d106      	bne.n	80021fc <HAL_RCC_OscConfig+0x74>
 80021ee:	4b76      	ldr	r3, [pc, #472]	@ (80023c8 <HAL_RCC_OscConfig+0x240>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a75      	ldr	r2, [pc, #468]	@ (80023c8 <HAL_RCC_OscConfig+0x240>)
 80021f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	e01d      	b.n	8002238 <HAL_RCC_OscConfig+0xb0>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002204:	d10c      	bne.n	8002220 <HAL_RCC_OscConfig+0x98>
 8002206:	4b70      	ldr	r3, [pc, #448]	@ (80023c8 <HAL_RCC_OscConfig+0x240>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a6f      	ldr	r2, [pc, #444]	@ (80023c8 <HAL_RCC_OscConfig+0x240>)
 800220c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002210:	6013      	str	r3, [r2, #0]
 8002212:	4b6d      	ldr	r3, [pc, #436]	@ (80023c8 <HAL_RCC_OscConfig+0x240>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a6c      	ldr	r2, [pc, #432]	@ (80023c8 <HAL_RCC_OscConfig+0x240>)
 8002218:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800221c:	6013      	str	r3, [r2, #0]
 800221e:	e00b      	b.n	8002238 <HAL_RCC_OscConfig+0xb0>
 8002220:	4b69      	ldr	r3, [pc, #420]	@ (80023c8 <HAL_RCC_OscConfig+0x240>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a68      	ldr	r2, [pc, #416]	@ (80023c8 <HAL_RCC_OscConfig+0x240>)
 8002226:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800222a:	6013      	str	r3, [r2, #0]
 800222c:	4b66      	ldr	r3, [pc, #408]	@ (80023c8 <HAL_RCC_OscConfig+0x240>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a65      	ldr	r2, [pc, #404]	@ (80023c8 <HAL_RCC_OscConfig+0x240>)
 8002232:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002236:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d013      	beq.n	8002268 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002240:	f7ff fc84 	bl	8001b4c <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002248:	f7ff fc80 	bl	8001b4c <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b64      	cmp	r3, #100	@ 0x64
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e207      	b.n	800266a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800225a:	4b5b      	ldr	r3, [pc, #364]	@ (80023c8 <HAL_RCC_OscConfig+0x240>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d0f0      	beq.n	8002248 <HAL_RCC_OscConfig+0xc0>
 8002266:	e014      	b.n	8002292 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002268:	f7ff fc70 	bl	8001b4c <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002270:	f7ff fc6c 	bl	8001b4c <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b64      	cmp	r3, #100	@ 0x64
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e1f3      	b.n	800266a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002282:	4b51      	ldr	r3, [pc, #324]	@ (80023c8 <HAL_RCC_OscConfig+0x240>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1f0      	bne.n	8002270 <HAL_RCC_OscConfig+0xe8>
 800228e:	e000      	b.n	8002292 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d063      	beq.n	8002366 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800229e:	4b4a      	ldr	r3, [pc, #296]	@ (80023c8 <HAL_RCC_OscConfig+0x240>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 030c 	and.w	r3, r3, #12
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00b      	beq.n	80022c2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022aa:	4b47      	ldr	r3, [pc, #284]	@ (80023c8 <HAL_RCC_OscConfig+0x240>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80022b2:	2b08      	cmp	r3, #8
 80022b4:	d11c      	bne.n	80022f0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022b6:	4b44      	ldr	r3, [pc, #272]	@ (80023c8 <HAL_RCC_OscConfig+0x240>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d116      	bne.n	80022f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022c2:	4b41      	ldr	r3, [pc, #260]	@ (80023c8 <HAL_RCC_OscConfig+0x240>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d005      	beq.n	80022da <HAL_RCC_OscConfig+0x152>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d001      	beq.n	80022da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e1c7      	b.n	800266a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022da:	4b3b      	ldr	r3, [pc, #236]	@ (80023c8 <HAL_RCC_OscConfig+0x240>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	4937      	ldr	r1, [pc, #220]	@ (80023c8 <HAL_RCC_OscConfig+0x240>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ee:	e03a      	b.n	8002366 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d020      	beq.n	800233a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022f8:	4b34      	ldr	r3, [pc, #208]	@ (80023cc <HAL_RCC_OscConfig+0x244>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fe:	f7ff fc25 	bl	8001b4c <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002306:	f7ff fc21 	bl	8001b4c <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e1a8      	b.n	800266a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002318:	4b2b      	ldr	r3, [pc, #172]	@ (80023c8 <HAL_RCC_OscConfig+0x240>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0f0      	beq.n	8002306 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002324:	4b28      	ldr	r3, [pc, #160]	@ (80023c8 <HAL_RCC_OscConfig+0x240>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	4925      	ldr	r1, [pc, #148]	@ (80023c8 <HAL_RCC_OscConfig+0x240>)
 8002334:	4313      	orrs	r3, r2
 8002336:	600b      	str	r3, [r1, #0]
 8002338:	e015      	b.n	8002366 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800233a:	4b24      	ldr	r3, [pc, #144]	@ (80023cc <HAL_RCC_OscConfig+0x244>)
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002340:	f7ff fc04 	bl	8001b4c <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002348:	f7ff fc00 	bl	8001b4c <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e187      	b.n	800266a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800235a:	4b1b      	ldr	r3, [pc, #108]	@ (80023c8 <HAL_RCC_OscConfig+0x240>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1f0      	bne.n	8002348 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0308 	and.w	r3, r3, #8
 800236e:	2b00      	cmp	r3, #0
 8002370:	d036      	beq.n	80023e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d016      	beq.n	80023a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800237a:	4b15      	ldr	r3, [pc, #84]	@ (80023d0 <HAL_RCC_OscConfig+0x248>)
 800237c:	2201      	movs	r2, #1
 800237e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002380:	f7ff fbe4 	bl	8001b4c <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002388:	f7ff fbe0 	bl	8001b4c <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e167      	b.n	800266a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800239a:	4b0b      	ldr	r3, [pc, #44]	@ (80023c8 <HAL_RCC_OscConfig+0x240>)
 800239c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d0f0      	beq.n	8002388 <HAL_RCC_OscConfig+0x200>
 80023a6:	e01b      	b.n	80023e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023a8:	4b09      	ldr	r3, [pc, #36]	@ (80023d0 <HAL_RCC_OscConfig+0x248>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ae:	f7ff fbcd 	bl	8001b4c <HAL_GetTick>
 80023b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023b4:	e00e      	b.n	80023d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023b6:	f7ff fbc9 	bl	8001b4c <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d907      	bls.n	80023d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e150      	b.n	800266a <HAL_RCC_OscConfig+0x4e2>
 80023c8:	40023800 	.word	0x40023800
 80023cc:	42470000 	.word	0x42470000
 80023d0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023d4:	4b88      	ldr	r3, [pc, #544]	@ (80025f8 <HAL_RCC_OscConfig+0x470>)
 80023d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1ea      	bne.n	80023b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 8097 	beq.w	800251c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ee:	2300      	movs	r3, #0
 80023f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023f2:	4b81      	ldr	r3, [pc, #516]	@ (80025f8 <HAL_RCC_OscConfig+0x470>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10f      	bne.n	800241e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023fe:	2300      	movs	r3, #0
 8002400:	60bb      	str	r3, [r7, #8]
 8002402:	4b7d      	ldr	r3, [pc, #500]	@ (80025f8 <HAL_RCC_OscConfig+0x470>)
 8002404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002406:	4a7c      	ldr	r2, [pc, #496]	@ (80025f8 <HAL_RCC_OscConfig+0x470>)
 8002408:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800240c:	6413      	str	r3, [r2, #64]	@ 0x40
 800240e:	4b7a      	ldr	r3, [pc, #488]	@ (80025f8 <HAL_RCC_OscConfig+0x470>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002412:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002416:	60bb      	str	r3, [r7, #8]
 8002418:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800241a:	2301      	movs	r3, #1
 800241c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800241e:	4b77      	ldr	r3, [pc, #476]	@ (80025fc <HAL_RCC_OscConfig+0x474>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002426:	2b00      	cmp	r3, #0
 8002428:	d118      	bne.n	800245c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800242a:	4b74      	ldr	r3, [pc, #464]	@ (80025fc <HAL_RCC_OscConfig+0x474>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a73      	ldr	r2, [pc, #460]	@ (80025fc <HAL_RCC_OscConfig+0x474>)
 8002430:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002434:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002436:	f7ff fb89 	bl	8001b4c <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800243c:	e008      	b.n	8002450 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800243e:	f7ff fb85 	bl	8001b4c <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e10c      	b.n	800266a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002450:	4b6a      	ldr	r3, [pc, #424]	@ (80025fc <HAL_RCC_OscConfig+0x474>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0f0      	beq.n	800243e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d106      	bne.n	8002472 <HAL_RCC_OscConfig+0x2ea>
 8002464:	4b64      	ldr	r3, [pc, #400]	@ (80025f8 <HAL_RCC_OscConfig+0x470>)
 8002466:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002468:	4a63      	ldr	r2, [pc, #396]	@ (80025f8 <HAL_RCC_OscConfig+0x470>)
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002470:	e01c      	b.n	80024ac <HAL_RCC_OscConfig+0x324>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	2b05      	cmp	r3, #5
 8002478:	d10c      	bne.n	8002494 <HAL_RCC_OscConfig+0x30c>
 800247a:	4b5f      	ldr	r3, [pc, #380]	@ (80025f8 <HAL_RCC_OscConfig+0x470>)
 800247c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800247e:	4a5e      	ldr	r2, [pc, #376]	@ (80025f8 <HAL_RCC_OscConfig+0x470>)
 8002480:	f043 0304 	orr.w	r3, r3, #4
 8002484:	6713      	str	r3, [r2, #112]	@ 0x70
 8002486:	4b5c      	ldr	r3, [pc, #368]	@ (80025f8 <HAL_RCC_OscConfig+0x470>)
 8002488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800248a:	4a5b      	ldr	r2, [pc, #364]	@ (80025f8 <HAL_RCC_OscConfig+0x470>)
 800248c:	f043 0301 	orr.w	r3, r3, #1
 8002490:	6713      	str	r3, [r2, #112]	@ 0x70
 8002492:	e00b      	b.n	80024ac <HAL_RCC_OscConfig+0x324>
 8002494:	4b58      	ldr	r3, [pc, #352]	@ (80025f8 <HAL_RCC_OscConfig+0x470>)
 8002496:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002498:	4a57      	ldr	r2, [pc, #348]	@ (80025f8 <HAL_RCC_OscConfig+0x470>)
 800249a:	f023 0301 	bic.w	r3, r3, #1
 800249e:	6713      	str	r3, [r2, #112]	@ 0x70
 80024a0:	4b55      	ldr	r3, [pc, #340]	@ (80025f8 <HAL_RCC_OscConfig+0x470>)
 80024a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024a4:	4a54      	ldr	r2, [pc, #336]	@ (80025f8 <HAL_RCC_OscConfig+0x470>)
 80024a6:	f023 0304 	bic.w	r3, r3, #4
 80024aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d015      	beq.n	80024e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b4:	f7ff fb4a 	bl	8001b4c <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ba:	e00a      	b.n	80024d2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024bc:	f7ff fb46 	bl	8001b4c <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e0cb      	b.n	800266a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d2:	4b49      	ldr	r3, [pc, #292]	@ (80025f8 <HAL_RCC_OscConfig+0x470>)
 80024d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d0ee      	beq.n	80024bc <HAL_RCC_OscConfig+0x334>
 80024de:	e014      	b.n	800250a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e0:	f7ff fb34 	bl	8001b4c <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e6:	e00a      	b.n	80024fe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024e8:	f7ff fb30 	bl	8001b4c <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e0b5      	b.n	800266a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024fe:	4b3e      	ldr	r3, [pc, #248]	@ (80025f8 <HAL_RCC_OscConfig+0x470>)
 8002500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1ee      	bne.n	80024e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800250a:	7dfb      	ldrb	r3, [r7, #23]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d105      	bne.n	800251c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002510:	4b39      	ldr	r3, [pc, #228]	@ (80025f8 <HAL_RCC_OscConfig+0x470>)
 8002512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002514:	4a38      	ldr	r2, [pc, #224]	@ (80025f8 <HAL_RCC_OscConfig+0x470>)
 8002516:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800251a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 80a1 	beq.w	8002668 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002526:	4b34      	ldr	r3, [pc, #208]	@ (80025f8 <HAL_RCC_OscConfig+0x470>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 030c 	and.w	r3, r3, #12
 800252e:	2b08      	cmp	r3, #8
 8002530:	d05c      	beq.n	80025ec <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	2b02      	cmp	r3, #2
 8002538:	d141      	bne.n	80025be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800253a:	4b31      	ldr	r3, [pc, #196]	@ (8002600 <HAL_RCC_OscConfig+0x478>)
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002540:	f7ff fb04 	bl	8001b4c <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002548:	f7ff fb00 	bl	8001b4c <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e087      	b.n	800266a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800255a:	4b27      	ldr	r3, [pc, #156]	@ (80025f8 <HAL_RCC_OscConfig+0x470>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1f0      	bne.n	8002548 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69da      	ldr	r2, [r3, #28]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	431a      	orrs	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002574:	019b      	lsls	r3, r3, #6
 8002576:	431a      	orrs	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800257c:	085b      	lsrs	r3, r3, #1
 800257e:	3b01      	subs	r3, #1
 8002580:	041b      	lsls	r3, r3, #16
 8002582:	431a      	orrs	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002588:	061b      	lsls	r3, r3, #24
 800258a:	491b      	ldr	r1, [pc, #108]	@ (80025f8 <HAL_RCC_OscConfig+0x470>)
 800258c:	4313      	orrs	r3, r2
 800258e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002590:	4b1b      	ldr	r3, [pc, #108]	@ (8002600 <HAL_RCC_OscConfig+0x478>)
 8002592:	2201      	movs	r2, #1
 8002594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002596:	f7ff fad9 	bl	8001b4c <HAL_GetTick>
 800259a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800259c:	e008      	b.n	80025b0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800259e:	f7ff fad5 	bl	8001b4c <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e05c      	b.n	800266a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025b0:	4b11      	ldr	r3, [pc, #68]	@ (80025f8 <HAL_RCC_OscConfig+0x470>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0f0      	beq.n	800259e <HAL_RCC_OscConfig+0x416>
 80025bc:	e054      	b.n	8002668 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025be:	4b10      	ldr	r3, [pc, #64]	@ (8002600 <HAL_RCC_OscConfig+0x478>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c4:	f7ff fac2 	bl	8001b4c <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025cc:	f7ff fabe 	bl	8001b4c <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e045      	b.n	800266a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025de:	4b06      	ldr	r3, [pc, #24]	@ (80025f8 <HAL_RCC_OscConfig+0x470>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1f0      	bne.n	80025cc <HAL_RCC_OscConfig+0x444>
 80025ea:	e03d      	b.n	8002668 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d107      	bne.n	8002604 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e038      	b.n	800266a <HAL_RCC_OscConfig+0x4e2>
 80025f8:	40023800 	.word	0x40023800
 80025fc:	40007000 	.word	0x40007000
 8002600:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002604:	4b1b      	ldr	r3, [pc, #108]	@ (8002674 <HAL_RCC_OscConfig+0x4ec>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d028      	beq.n	8002664 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800261c:	429a      	cmp	r2, r3
 800261e:	d121      	bne.n	8002664 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800262a:	429a      	cmp	r2, r3
 800262c:	d11a      	bne.n	8002664 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002634:	4013      	ands	r3, r2
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800263a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800263c:	4293      	cmp	r3, r2
 800263e:	d111      	bne.n	8002664 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800264a:	085b      	lsrs	r3, r3, #1
 800264c:	3b01      	subs	r3, #1
 800264e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002650:	429a      	cmp	r2, r3
 8002652:	d107      	bne.n	8002664 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800265e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002660:	429a      	cmp	r2, r3
 8002662:	d001      	beq.n	8002668 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e000      	b.n	800266a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3718      	adds	r7, #24
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40023800 	.word	0x40023800

08002678 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d101      	bne.n	800268c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e0cc      	b.n	8002826 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800268c:	4b68      	ldr	r3, [pc, #416]	@ (8002830 <HAL_RCC_ClockConfig+0x1b8>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	429a      	cmp	r2, r3
 8002698:	d90c      	bls.n	80026b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800269a:	4b65      	ldr	r3, [pc, #404]	@ (8002830 <HAL_RCC_ClockConfig+0x1b8>)
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	b2d2      	uxtb	r2, r2
 80026a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a2:	4b63      	ldr	r3, [pc, #396]	@ (8002830 <HAL_RCC_ClockConfig+0x1b8>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d001      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e0b8      	b.n	8002826 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d020      	beq.n	8002702 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d005      	beq.n	80026d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026cc:	4b59      	ldr	r3, [pc, #356]	@ (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	4a58      	ldr	r2, [pc, #352]	@ (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 80026d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80026d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0308 	and.w	r3, r3, #8
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d005      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026e4:	4b53      	ldr	r3, [pc, #332]	@ (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	4a52      	ldr	r2, [pc, #328]	@ (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 80026ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80026ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026f0:	4b50      	ldr	r3, [pc, #320]	@ (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	494d      	ldr	r1, [pc, #308]	@ (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b00      	cmp	r3, #0
 800270c:	d044      	beq.n	8002798 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d107      	bne.n	8002726 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002716:	4b47      	ldr	r3, [pc, #284]	@ (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d119      	bne.n	8002756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e07f      	b.n	8002826 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b02      	cmp	r3, #2
 800272c:	d003      	beq.n	8002736 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002732:	2b03      	cmp	r3, #3
 8002734:	d107      	bne.n	8002746 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002736:	4b3f      	ldr	r3, [pc, #252]	@ (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d109      	bne.n	8002756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e06f      	b.n	8002826 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002746:	4b3b      	ldr	r3, [pc, #236]	@ (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e067      	b.n	8002826 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002756:	4b37      	ldr	r3, [pc, #220]	@ (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f023 0203 	bic.w	r2, r3, #3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	4934      	ldr	r1, [pc, #208]	@ (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 8002764:	4313      	orrs	r3, r2
 8002766:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002768:	f7ff f9f0 	bl	8001b4c <HAL_GetTick>
 800276c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800276e:	e00a      	b.n	8002786 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002770:	f7ff f9ec 	bl	8001b4c <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800277e:	4293      	cmp	r3, r2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e04f      	b.n	8002826 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002786:	4b2b      	ldr	r3, [pc, #172]	@ (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 020c 	and.w	r2, r3, #12
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	429a      	cmp	r2, r3
 8002796:	d1eb      	bne.n	8002770 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002798:	4b25      	ldr	r3, [pc, #148]	@ (8002830 <HAL_RCC_ClockConfig+0x1b8>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d20c      	bcs.n	80027c0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a6:	4b22      	ldr	r3, [pc, #136]	@ (8002830 <HAL_RCC_ClockConfig+0x1b8>)
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	b2d2      	uxtb	r2, r2
 80027ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ae:	4b20      	ldr	r3, [pc, #128]	@ (8002830 <HAL_RCC_ClockConfig+0x1b8>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d001      	beq.n	80027c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e032      	b.n	8002826 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d008      	beq.n	80027de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027cc:	4b19      	ldr	r3, [pc, #100]	@ (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	4916      	ldr	r1, [pc, #88]	@ (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d009      	beq.n	80027fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027ea:	4b12      	ldr	r3, [pc, #72]	@ (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	490e      	ldr	r1, [pc, #56]	@ (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027fe:	f000 f821 	bl	8002844 <HAL_RCC_GetSysClockFreq>
 8002802:	4602      	mov	r2, r0
 8002804:	4b0b      	ldr	r3, [pc, #44]	@ (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	091b      	lsrs	r3, r3, #4
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	490a      	ldr	r1, [pc, #40]	@ (8002838 <HAL_RCC_ClockConfig+0x1c0>)
 8002810:	5ccb      	ldrb	r3, [r1, r3]
 8002812:	fa22 f303 	lsr.w	r3, r2, r3
 8002816:	4a09      	ldr	r2, [pc, #36]	@ (800283c <HAL_RCC_ClockConfig+0x1c4>)
 8002818:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800281a:	4b09      	ldr	r3, [pc, #36]	@ (8002840 <HAL_RCC_ClockConfig+0x1c8>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4618      	mov	r0, r3
 8002820:	f7fe fc98 	bl	8001154 <HAL_InitTick>

  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40023c00 	.word	0x40023c00
 8002834:	40023800 	.word	0x40023800
 8002838:	080089a0 	.word	0x080089a0
 800283c:	20000018 	.word	0x20000018
 8002840:	20000020 	.word	0x20000020

08002844 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002844:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002848:	b094      	sub	sp, #80	@ 0x50
 800284a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800284c:	2300      	movs	r3, #0
 800284e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002850:	2300      	movs	r3, #0
 8002852:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002854:	2300      	movs	r3, #0
 8002856:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002858:	2300      	movs	r3, #0
 800285a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800285c:	4b79      	ldr	r3, [pc, #484]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0x200>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f003 030c 	and.w	r3, r3, #12
 8002864:	2b08      	cmp	r3, #8
 8002866:	d00d      	beq.n	8002884 <HAL_RCC_GetSysClockFreq+0x40>
 8002868:	2b08      	cmp	r3, #8
 800286a:	f200 80e1 	bhi.w	8002a30 <HAL_RCC_GetSysClockFreq+0x1ec>
 800286e:	2b00      	cmp	r3, #0
 8002870:	d002      	beq.n	8002878 <HAL_RCC_GetSysClockFreq+0x34>
 8002872:	2b04      	cmp	r3, #4
 8002874:	d003      	beq.n	800287e <HAL_RCC_GetSysClockFreq+0x3a>
 8002876:	e0db      	b.n	8002a30 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002878:	4b73      	ldr	r3, [pc, #460]	@ (8002a48 <HAL_RCC_GetSysClockFreq+0x204>)
 800287a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800287c:	e0db      	b.n	8002a36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800287e:	4b73      	ldr	r3, [pc, #460]	@ (8002a4c <HAL_RCC_GetSysClockFreq+0x208>)
 8002880:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002882:	e0d8      	b.n	8002a36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002884:	4b6f      	ldr	r3, [pc, #444]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0x200>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800288c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800288e:	4b6d      	ldr	r3, [pc, #436]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0x200>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d063      	beq.n	8002962 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800289a:	4b6a      	ldr	r3, [pc, #424]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0x200>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	099b      	lsrs	r3, r3, #6
 80028a0:	2200      	movs	r2, #0
 80028a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80028a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80028a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80028ae:	2300      	movs	r3, #0
 80028b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80028b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80028b6:	4622      	mov	r2, r4
 80028b8:	462b      	mov	r3, r5
 80028ba:	f04f 0000 	mov.w	r0, #0
 80028be:	f04f 0100 	mov.w	r1, #0
 80028c2:	0159      	lsls	r1, r3, #5
 80028c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028c8:	0150      	lsls	r0, r2, #5
 80028ca:	4602      	mov	r2, r0
 80028cc:	460b      	mov	r3, r1
 80028ce:	4621      	mov	r1, r4
 80028d0:	1a51      	subs	r1, r2, r1
 80028d2:	6139      	str	r1, [r7, #16]
 80028d4:	4629      	mov	r1, r5
 80028d6:	eb63 0301 	sbc.w	r3, r3, r1
 80028da:	617b      	str	r3, [r7, #20]
 80028dc:	f04f 0200 	mov.w	r2, #0
 80028e0:	f04f 0300 	mov.w	r3, #0
 80028e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028e8:	4659      	mov	r1, fp
 80028ea:	018b      	lsls	r3, r1, #6
 80028ec:	4651      	mov	r1, sl
 80028ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028f2:	4651      	mov	r1, sl
 80028f4:	018a      	lsls	r2, r1, #6
 80028f6:	4651      	mov	r1, sl
 80028f8:	ebb2 0801 	subs.w	r8, r2, r1
 80028fc:	4659      	mov	r1, fp
 80028fe:	eb63 0901 	sbc.w	r9, r3, r1
 8002902:	f04f 0200 	mov.w	r2, #0
 8002906:	f04f 0300 	mov.w	r3, #0
 800290a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800290e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002912:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002916:	4690      	mov	r8, r2
 8002918:	4699      	mov	r9, r3
 800291a:	4623      	mov	r3, r4
 800291c:	eb18 0303 	adds.w	r3, r8, r3
 8002920:	60bb      	str	r3, [r7, #8]
 8002922:	462b      	mov	r3, r5
 8002924:	eb49 0303 	adc.w	r3, r9, r3
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	f04f 0200 	mov.w	r2, #0
 800292e:	f04f 0300 	mov.w	r3, #0
 8002932:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002936:	4629      	mov	r1, r5
 8002938:	024b      	lsls	r3, r1, #9
 800293a:	4621      	mov	r1, r4
 800293c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002940:	4621      	mov	r1, r4
 8002942:	024a      	lsls	r2, r1, #9
 8002944:	4610      	mov	r0, r2
 8002946:	4619      	mov	r1, r3
 8002948:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800294a:	2200      	movs	r2, #0
 800294c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800294e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002950:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002954:	f7fd fcac 	bl	80002b0 <__aeabi_uldivmod>
 8002958:	4602      	mov	r2, r0
 800295a:	460b      	mov	r3, r1
 800295c:	4613      	mov	r3, r2
 800295e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002960:	e058      	b.n	8002a14 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002962:	4b38      	ldr	r3, [pc, #224]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0x200>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	099b      	lsrs	r3, r3, #6
 8002968:	2200      	movs	r2, #0
 800296a:	4618      	mov	r0, r3
 800296c:	4611      	mov	r1, r2
 800296e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002972:	623b      	str	r3, [r7, #32]
 8002974:	2300      	movs	r3, #0
 8002976:	627b      	str	r3, [r7, #36]	@ 0x24
 8002978:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800297c:	4642      	mov	r2, r8
 800297e:	464b      	mov	r3, r9
 8002980:	f04f 0000 	mov.w	r0, #0
 8002984:	f04f 0100 	mov.w	r1, #0
 8002988:	0159      	lsls	r1, r3, #5
 800298a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800298e:	0150      	lsls	r0, r2, #5
 8002990:	4602      	mov	r2, r0
 8002992:	460b      	mov	r3, r1
 8002994:	4641      	mov	r1, r8
 8002996:	ebb2 0a01 	subs.w	sl, r2, r1
 800299a:	4649      	mov	r1, r9
 800299c:	eb63 0b01 	sbc.w	fp, r3, r1
 80029a0:	f04f 0200 	mov.w	r2, #0
 80029a4:	f04f 0300 	mov.w	r3, #0
 80029a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80029ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80029b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80029b4:	ebb2 040a 	subs.w	r4, r2, sl
 80029b8:	eb63 050b 	sbc.w	r5, r3, fp
 80029bc:	f04f 0200 	mov.w	r2, #0
 80029c0:	f04f 0300 	mov.w	r3, #0
 80029c4:	00eb      	lsls	r3, r5, #3
 80029c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029ca:	00e2      	lsls	r2, r4, #3
 80029cc:	4614      	mov	r4, r2
 80029ce:	461d      	mov	r5, r3
 80029d0:	4643      	mov	r3, r8
 80029d2:	18e3      	adds	r3, r4, r3
 80029d4:	603b      	str	r3, [r7, #0]
 80029d6:	464b      	mov	r3, r9
 80029d8:	eb45 0303 	adc.w	r3, r5, r3
 80029dc:	607b      	str	r3, [r7, #4]
 80029de:	f04f 0200 	mov.w	r2, #0
 80029e2:	f04f 0300 	mov.w	r3, #0
 80029e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029ea:	4629      	mov	r1, r5
 80029ec:	028b      	lsls	r3, r1, #10
 80029ee:	4621      	mov	r1, r4
 80029f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029f4:	4621      	mov	r1, r4
 80029f6:	028a      	lsls	r2, r1, #10
 80029f8:	4610      	mov	r0, r2
 80029fa:	4619      	mov	r1, r3
 80029fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029fe:	2200      	movs	r2, #0
 8002a00:	61bb      	str	r3, [r7, #24]
 8002a02:	61fa      	str	r2, [r7, #28]
 8002a04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a08:	f7fd fc52 	bl	80002b0 <__aeabi_uldivmod>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	460b      	mov	r3, r1
 8002a10:	4613      	mov	r3, r2
 8002a12:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002a14:	4b0b      	ldr	r3, [pc, #44]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	0c1b      	lsrs	r3, r3, #16
 8002a1a:	f003 0303 	and.w	r3, r3, #3
 8002a1e:	3301      	adds	r3, #1
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002a24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002a26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a2c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a2e:	e002      	b.n	8002a36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a30:	4b05      	ldr	r3, [pc, #20]	@ (8002a48 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a32:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3750      	adds	r7, #80	@ 0x50
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a42:	bf00      	nop
 8002a44:	40023800 	.word	0x40023800
 8002a48:	00f42400 	.word	0x00f42400
 8002a4c:	007a1200 	.word	0x007a1200

08002a50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a54:	4b03      	ldr	r3, [pc, #12]	@ (8002a64 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a56:	681b      	ldr	r3, [r3, #0]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	20000018 	.word	0x20000018

08002a68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a6c:	f7ff fff0 	bl	8002a50 <HAL_RCC_GetHCLKFreq>
 8002a70:	4602      	mov	r2, r0
 8002a72:	4b05      	ldr	r3, [pc, #20]	@ (8002a88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	0a9b      	lsrs	r3, r3, #10
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	4903      	ldr	r1, [pc, #12]	@ (8002a8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a7e:	5ccb      	ldrb	r3, [r1, r3]
 8002a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	080089b0 	.word	0x080089b0

08002a90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a94:	f7ff ffdc 	bl	8002a50 <HAL_RCC_GetHCLKFreq>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	4b05      	ldr	r3, [pc, #20]	@ (8002ab0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	0b5b      	lsrs	r3, r3, #13
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	4903      	ldr	r1, [pc, #12]	@ (8002ab4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aa6:	5ccb      	ldrb	r3, [r1, r3]
 8002aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	080089b0 	.word	0x080089b0

08002ab8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	220f      	movs	r2, #15
 8002ac6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ac8:	4b12      	ldr	r3, [pc, #72]	@ (8002b14 <HAL_RCC_GetClockConfig+0x5c>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f003 0203 	and.w	r2, r3, #3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8002b14 <HAL_RCC_GetClockConfig+0x5c>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8002b14 <HAL_RCC_GetClockConfig+0x5c>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002aec:	4b09      	ldr	r3, [pc, #36]	@ (8002b14 <HAL_RCC_GetClockConfig+0x5c>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	08db      	lsrs	r3, r3, #3
 8002af2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002afa:	4b07      	ldr	r3, [pc, #28]	@ (8002b18 <HAL_RCC_GetClockConfig+0x60>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0207 	and.w	r2, r3, #7
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	601a      	str	r2, [r3, #0]
}
 8002b06:	bf00      	nop
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	40023800 	.word	0x40023800
 8002b18:	40023c00 	.word	0x40023c00

08002b1c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d105      	bne.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d035      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b44:	4b67      	ldr	r3, [pc, #412]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b4a:	f7fe ffff 	bl	8001b4c <HAL_GetTick>
 8002b4e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b50:	e008      	b.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b52:	f7fe fffb 	bl	8001b4c <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e0ba      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b64:	4b60      	ldr	r3, [pc, #384]	@ (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1f0      	bne.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	019a      	lsls	r2, r3, #6
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	071b      	lsls	r3, r3, #28
 8002b7c:	495a      	ldr	r1, [pc, #360]	@ (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002b84:	4b57      	ldr	r3, [pc, #348]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002b86:	2201      	movs	r2, #1
 8002b88:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b8a:	f7fe ffdf 	bl	8001b4c <HAL_GetTick>
 8002b8e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b90:	e008      	b.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b92:	f7fe ffdb 	bl	8001b4c <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e09a      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ba4:	4b50      	ldr	r3, [pc, #320]	@ (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0f0      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 8083 	beq.w	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	4b49      	ldr	r3, [pc, #292]	@ (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc6:	4a48      	ldr	r2, [pc, #288]	@ (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002bc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bce:	4b46      	ldr	r3, [pc, #280]	@ (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bd6:	60fb      	str	r3, [r7, #12]
 8002bd8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002bda:	4b44      	ldr	r3, [pc, #272]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a43      	ldr	r2, [pc, #268]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002be0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002be4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002be6:	f7fe ffb1 	bl	8001b4c <HAL_GetTick>
 8002bea:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002bec:	e008      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bee:	f7fe ffad 	bl	8001b4c <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e06c      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002c00:	4b3a      	ldr	r3, [pc, #232]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0f0      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c0c:	4b36      	ldr	r3, [pc, #216]	@ (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002c0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c14:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d02f      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d028      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c2a:	4b2f      	ldr	r3, [pc, #188]	@ (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002c2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c32:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c34:	4b2e      	ldr	r3, [pc, #184]	@ (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c36:	2201      	movs	r2, #1
 8002c38:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c3a:	4b2d      	ldr	r3, [pc, #180]	@ (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002c40:	4a29      	ldr	r2, [pc, #164]	@ (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c46:	4b28      	ldr	r3, [pc, #160]	@ (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002c48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d114      	bne.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002c52:	f7fe ff7b 	bl	8001b4c <HAL_GetTick>
 8002c56:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c58:	e00a      	b.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c5a:	f7fe ff77 	bl	8001b4c <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e034      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c70:	4b1d      	ldr	r3, [pc, #116]	@ (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002c72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0ee      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c88:	d10d      	bne.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002c8a:	4b17      	ldr	r3, [pc, #92]	@ (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002c9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c9e:	4912      	ldr	r1, [pc, #72]	@ (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	608b      	str	r3, [r1, #8]
 8002ca4:	e005      	b.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002ca6:	4b10      	ldr	r3, [pc, #64]	@ (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	4a0f      	ldr	r2, [pc, #60]	@ (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002cac:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002cb0:	6093      	str	r3, [r2, #8]
 8002cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002cb4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cbe:	490a      	ldr	r1, [pc, #40]	@ (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0308 	and.w	r3, r3, #8
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d003      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	7c1a      	ldrb	r2, [r3, #16]
 8002cd4:	4b07      	ldr	r3, [pc, #28]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002cd6:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3718      	adds	r7, #24
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	42470068 	.word	0x42470068
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	40007000 	.word	0x40007000
 8002cf0:	42470e40 	.word	0x42470e40
 8002cf4:	424711e0 	.word	0x424711e0

08002cf8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e073      	b.n	8002df2 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	7f5b      	ldrb	r3, [r3, #29]
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d105      	bne.n	8002d20 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7fe f99e 	bl	800105c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2202      	movs	r2, #2
 8002d24:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	f003 0310 	and.w	r3, r3, #16
 8002d30:	2b10      	cmp	r3, #16
 8002d32:	d055      	beq.n	8002de0 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	22ca      	movs	r2, #202	@ 0xca
 8002d3a:	625a      	str	r2, [r3, #36]	@ 0x24
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2253      	movs	r2, #83	@ 0x53
 8002d42:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 fa49 	bl	80031dc <RTC_EnterInitMode>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002d4e:	7bfb      	ldrb	r3, [r7, #15]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d12c      	bne.n	8002dae <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	6812      	ldr	r2, [r2, #0]
 8002d5e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8002d62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d66:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6899      	ldr	r1, [r3, #8]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	431a      	orrs	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	68d2      	ldr	r2, [r2, #12]
 8002d8e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6919      	ldr	r1, [r3, #16]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	041a      	lsls	r2, r3, #16
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	430a      	orrs	r2, r1
 8002da2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 fa50 	bl	800324a <RTC_ExitInitMode>
 8002daa:	4603      	mov	r3, r0
 8002dac:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002dae:	7bfb      	ldrb	r3, [r7, #15]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d110      	bne.n	8002dd6 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002dc2:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	699a      	ldr	r2, [r3, #24]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	22ff      	movs	r2, #255	@ 0xff
 8002ddc:	625a      	str	r2, [r3, #36]	@ 0x24
 8002dde:	e001      	b.n	8002de4 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002de0:	2300      	movs	r3, #0
 8002de2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002de4:	7bfb      	ldrb	r3, [r7, #15]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d102      	bne.n	8002df0 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2201      	movs	r2, #1
 8002dee:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002dfa:	b590      	push	{r4, r7, lr}
 8002dfc:	b087      	sub	sp, #28
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	60f8      	str	r0, [r7, #12]
 8002e02:	60b9      	str	r1, [r7, #8]
 8002e04:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002e06:	2300      	movs	r3, #0
 8002e08:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	7f1b      	ldrb	r3, [r3, #28]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d101      	bne.n	8002e16 <HAL_RTC_SetTime+0x1c>
 8002e12:	2302      	movs	r3, #2
 8002e14:	e087      	b.n	8002f26 <HAL_RTC_SetTime+0x12c>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2202      	movs	r2, #2
 8002e20:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d126      	bne.n	8002e76 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d102      	bne.n	8002e3c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f000 fa27 	bl	8003294 <RTC_ByteToBcd2>
 8002e46:	4603      	mov	r3, r0
 8002e48:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	785b      	ldrb	r3, [r3, #1]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f000 fa20 	bl	8003294 <RTC_ByteToBcd2>
 8002e54:	4603      	mov	r3, r0
 8002e56:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002e58:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	789b      	ldrb	r3, [r3, #2]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f000 fa18 	bl	8003294 <RTC_ByteToBcd2>
 8002e64:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002e66:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	78db      	ldrb	r3, [r3, #3]
 8002e6e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002e70:	4313      	orrs	r3, r2
 8002e72:	617b      	str	r3, [r7, #20]
 8002e74:	e018      	b.n	8002ea8 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d102      	bne.n	8002e8a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	2200      	movs	r2, #0
 8002e88:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	785b      	ldrb	r3, [r3, #1]
 8002e94:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002e96:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002e98:	68ba      	ldr	r2, [r7, #8]
 8002e9a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002e9c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	78db      	ldrb	r3, [r3, #3]
 8002ea2:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	22ca      	movs	r2, #202	@ 0xca
 8002eae:	625a      	str	r2, [r3, #36]	@ 0x24
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2253      	movs	r2, #83	@ 0x53
 8002eb6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f000 f98f 	bl	80031dc <RTC_EnterInitMode>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002ec2:	7cfb      	ldrb	r3, [r7, #19]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d120      	bne.n	8002f0a <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8002ed2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002ed6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002ee6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6899      	ldr	r1, [r3, #8]
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	68da      	ldr	r2, [r3, #12]
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f000 f9a2 	bl	800324a <RTC_ExitInitMode>
 8002f06:	4603      	mov	r3, r0
 8002f08:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002f0a:	7cfb      	ldrb	r3, [r7, #19]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d102      	bne.n	8002f16 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2201      	movs	r2, #1
 8002f14:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	22ff      	movs	r2, #255	@ 0xff
 8002f1c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	771a      	strb	r2, [r3, #28]

  return status;
 8002f24:	7cfb      	ldrb	r3, [r7, #19]
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	371c      	adds	r7, #28
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd90      	pop	{r4, r7, pc}

08002f2e <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b086      	sub	sp, #24
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	60f8      	str	r0, [r7, #12]
 8002f36:	60b9      	str	r1, [r7, #8]
 8002f38:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8002f60:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002f64:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	0c1b      	lsrs	r3, r3, #16
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f70:	b2da      	uxtb	r2, r3
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	0a1b      	lsrs	r3, r3, #8
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f80:	b2da      	uxtb	r2, r3
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f8e:	b2da      	uxtb	r2, r3
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	0d9b      	lsrs	r3, r3, #22
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	b2da      	uxtb	r2, r3
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d11a      	bne.n	8002fe0 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f000 f98e 	bl	80032d0 <RTC_Bcd2ToByte>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	785b      	ldrb	r3, [r3, #1]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f000 f985 	bl	80032d0 <RTC_Bcd2ToByte>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	461a      	mov	r2, r3
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	789b      	ldrb	r3, [r3, #2]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f000 f97c 	bl	80032d0 <RTC_Bcd2ToByte>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	461a      	mov	r2, r3
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3718      	adds	r7, #24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002fea:	b590      	push	{r4, r7, lr}
 8002fec:	b087      	sub	sp, #28
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	60f8      	str	r0, [r7, #12]
 8002ff2:	60b9      	str	r1, [r7, #8]
 8002ff4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	7f1b      	ldrb	r3, [r3, #28]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d101      	bne.n	8003006 <HAL_RTC_SetDate+0x1c>
 8003002:	2302      	movs	r3, #2
 8003004:	e071      	b.n	80030ea <HAL_RTC_SetDate+0x100>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2201      	movs	r2, #1
 800300a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2202      	movs	r2, #2
 8003010:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d10e      	bne.n	8003036 <HAL_RTC_SetDate+0x4c>
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	785b      	ldrb	r3, [r3, #1]
 800301c:	f003 0310 	and.w	r3, r3, #16
 8003020:	2b00      	cmp	r3, #0
 8003022:	d008      	beq.n	8003036 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	785b      	ldrb	r3, [r3, #1]
 8003028:	f023 0310 	bic.w	r3, r3, #16
 800302c:	b2db      	uxtb	r3, r3
 800302e:	330a      	adds	r3, #10
 8003030:	b2da      	uxtb	r2, r3
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d11c      	bne.n	8003076 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	78db      	ldrb	r3, [r3, #3]
 8003040:	4618      	mov	r0, r3
 8003042:	f000 f927 	bl	8003294 <RTC_ByteToBcd2>
 8003046:	4603      	mov	r3, r0
 8003048:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	785b      	ldrb	r3, [r3, #1]
 800304e:	4618      	mov	r0, r3
 8003050:	f000 f920 	bl	8003294 <RTC_ByteToBcd2>
 8003054:	4603      	mov	r3, r0
 8003056:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003058:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	789b      	ldrb	r3, [r3, #2]
 800305e:	4618      	mov	r0, r3
 8003060:	f000 f918 	bl	8003294 <RTC_ByteToBcd2>
 8003064:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003066:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003070:	4313      	orrs	r3, r2
 8003072:	617b      	str	r3, [r7, #20]
 8003074:	e00e      	b.n	8003094 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	78db      	ldrb	r3, [r3, #3]
 800307a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	785b      	ldrb	r3, [r3, #1]
 8003080:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003082:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003084:	68ba      	ldr	r2, [r7, #8]
 8003086:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003088:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003090:	4313      	orrs	r3, r2
 8003092:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	22ca      	movs	r2, #202	@ 0xca
 800309a:	625a      	str	r2, [r3, #36]	@ 0x24
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2253      	movs	r2, #83	@ 0x53
 80030a2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f000 f899 	bl	80031dc <RTC_EnterInitMode>
 80030aa:	4603      	mov	r3, r0
 80030ac:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80030ae:	7cfb      	ldrb	r3, [r7, #19]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d10c      	bne.n	80030ce <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80030be:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80030c2:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f000 f8c0 	bl	800324a <RTC_ExitInitMode>
 80030ca:	4603      	mov	r3, r0
 80030cc:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80030ce:	7cfb      	ldrb	r3, [r7, #19]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d102      	bne.n	80030da <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2201      	movs	r2, #1
 80030d8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	22ff      	movs	r2, #255	@ 0xff
 80030e0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	771a      	strb	r2, [r3, #28]

  return status;
 80030e8:	7cfb      	ldrb	r3, [r7, #19]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	371c      	adds	r7, #28
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd90      	pop	{r4, r7, pc}

080030f2 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b086      	sub	sp, #24
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	60f8      	str	r0, [r7, #12]
 80030fa:	60b9      	str	r1, [r7, #8]
 80030fc:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80030fe:	2300      	movs	r3, #0
 8003100:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800310c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003110:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	0c1b      	lsrs	r3, r3, #16
 8003116:	b2da      	uxtb	r2, r3
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	0a1b      	lsrs	r3, r3, #8
 8003120:	b2db      	uxtb	r3, r3
 8003122:	f003 031f 	and.w	r3, r3, #31
 8003126:	b2da      	uxtb	r2, r3
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	b2db      	uxtb	r3, r3
 8003130:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003134:	b2da      	uxtb	r2, r3
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	0b5b      	lsrs	r3, r3, #13
 800313e:	b2db      	uxtb	r3, r3
 8003140:	f003 0307 	and.w	r3, r3, #7
 8003144:	b2da      	uxtb	r2, r3
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d11a      	bne.n	8003186 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	78db      	ldrb	r3, [r3, #3]
 8003154:	4618      	mov	r0, r3
 8003156:	f000 f8bb 	bl	80032d0 <RTC_Bcd2ToByte>
 800315a:	4603      	mov	r3, r0
 800315c:	461a      	mov	r2, r3
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	785b      	ldrb	r3, [r3, #1]
 8003166:	4618      	mov	r0, r3
 8003168:	f000 f8b2 	bl	80032d0 <RTC_Bcd2ToByte>
 800316c:	4603      	mov	r3, r0
 800316e:	461a      	mov	r2, r3
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	789b      	ldrb	r3, [r3, #2]
 8003178:	4618      	mov	r0, r3
 800317a:	f000 f8a9 	bl	80032d0 <RTC_Bcd2ToByte>
 800317e:	4603      	mov	r3, r0
 8003180:	461a      	mov	r2, r3
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3718      	adds	r7, #24
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003198:	2300      	movs	r3, #0
 800319a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a0d      	ldr	r2, [pc, #52]	@ (80031d8 <HAL_RTC_WaitForSynchro+0x48>)
 80031a2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031a4:	f7fe fcd2 	bl	8001b4c <HAL_GetTick>
 80031a8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80031aa:	e009      	b.n	80031c0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80031ac:	f7fe fcce 	bl	8001b4c <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80031ba:	d901      	bls.n	80031c0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e007      	b.n	80031d0 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	f003 0320 	and.w	r3, r3, #32
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d0ee      	beq.n	80031ac <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	00013f5f 	.word	0x00013f5f

080031dc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031e4:	2300      	movs	r3, #0
 80031e6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80031e8:	2300      	movs	r3, #0
 80031ea:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d122      	bne.n	8003240 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68da      	ldr	r2, [r3, #12]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003208:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800320a:	f7fe fc9f 	bl	8001b4c <HAL_GetTick>
 800320e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003210:	e00c      	b.n	800322c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003212:	f7fe fc9b 	bl	8001b4c <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003220:	d904      	bls.n	800322c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2204      	movs	r2, #4
 8003226:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003236:	2b00      	cmp	r3, #0
 8003238:	d102      	bne.n	8003240 <RTC_EnterInitMode+0x64>
 800323a:	7bfb      	ldrb	r3, [r7, #15]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d1e8      	bne.n	8003212 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003240:	7bfb      	ldrb	r3, [r7, #15]
}
 8003242:	4618      	mov	r0, r3
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b084      	sub	sp, #16
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003252:	2300      	movs	r3, #0
 8003254:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68da      	ldr	r2, [r3, #12]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003264:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f003 0320 	and.w	r3, r3, #32
 8003270:	2b00      	cmp	r3, #0
 8003272:	d10a      	bne.n	800328a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f7ff ff8b 	bl	8003190 <HAL_RTC_WaitForSynchro>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d004      	beq.n	800328a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2204      	movs	r2, #4
 8003284:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800328a:	7bfb      	ldrb	r3, [r7, #15]
}
 800328c:	4618      	mov	r0, r3
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	4603      	mov	r3, r0
 800329c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800329e:	2300      	movs	r3, #0
 80032a0:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80032a2:	e005      	b.n	80032b0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	3301      	adds	r3, #1
 80032a8:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80032aa:	79fb      	ldrb	r3, [r7, #7]
 80032ac:	3b0a      	subs	r3, #10
 80032ae:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80032b0:	79fb      	ldrb	r3, [r7, #7]
 80032b2:	2b09      	cmp	r3, #9
 80032b4:	d8f6      	bhi.n	80032a4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	011b      	lsls	r3, r3, #4
 80032bc:	b2da      	uxtb	r2, r3
 80032be:	79fb      	ldrb	r3, [r7, #7]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	b2db      	uxtb	r3, r3
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3714      	adds	r7, #20
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	4603      	mov	r3, r0
 80032d8:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80032da:	2300      	movs	r3, #0
 80032dc:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80032de:	79fb      	ldrb	r3, [r7, #7]
 80032e0:	091b      	lsrs	r3, r3, #4
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	461a      	mov	r2, r3
 80032e6:	4613      	mov	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	4413      	add	r3, r2
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	b2da      	uxtb	r2, r3
 80032f4:	79fb      	ldrb	r3, [r7, #7]
 80032f6:	f003 030f 	and.w	r3, r3, #15
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	4413      	add	r3, r2
 80032fe:	b2db      	uxtb	r3, r3
}
 8003300:	4618      	mov	r0, r3
 8003302:	3714      	adds	r7, #20
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e041      	b.n	80033a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d106      	bne.n	8003338 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 f839 	bl	80033aa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2202      	movs	r2, #2
 800333c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3304      	adds	r3, #4
 8003348:	4619      	mov	r1, r3
 800334a:	4610      	mov	r0, r2
 800334c:	f000 f9b2 	bl	80036b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b083      	sub	sp, #12
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
	...

080033c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d001      	beq.n	80033d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e044      	b.n	8003462 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2202      	movs	r2, #2
 80033dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68da      	ldr	r2, [r3, #12]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f042 0201 	orr.w	r2, r2, #1
 80033ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a1e      	ldr	r2, [pc, #120]	@ (8003470 <HAL_TIM_Base_Start_IT+0xb0>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d018      	beq.n	800342c <HAL_TIM_Base_Start_IT+0x6c>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003402:	d013      	beq.n	800342c <HAL_TIM_Base_Start_IT+0x6c>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a1a      	ldr	r2, [pc, #104]	@ (8003474 <HAL_TIM_Base_Start_IT+0xb4>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d00e      	beq.n	800342c <HAL_TIM_Base_Start_IT+0x6c>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a19      	ldr	r2, [pc, #100]	@ (8003478 <HAL_TIM_Base_Start_IT+0xb8>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d009      	beq.n	800342c <HAL_TIM_Base_Start_IT+0x6c>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a17      	ldr	r2, [pc, #92]	@ (800347c <HAL_TIM_Base_Start_IT+0xbc>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d004      	beq.n	800342c <HAL_TIM_Base_Start_IT+0x6c>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a16      	ldr	r2, [pc, #88]	@ (8003480 <HAL_TIM_Base_Start_IT+0xc0>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d111      	bne.n	8003450 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 0307 	and.w	r3, r3, #7
 8003436:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2b06      	cmp	r3, #6
 800343c:	d010      	beq.n	8003460 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f042 0201 	orr.w	r2, r2, #1
 800344c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800344e:	e007      	b.n	8003460 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f042 0201 	orr.w	r2, r2, #1
 800345e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	40010000 	.word	0x40010000
 8003474:	40000400 	.word	0x40000400
 8003478:	40000800 	.word	0x40000800
 800347c:	40000c00 	.word	0x40000c00
 8003480:	40014000 	.word	0x40014000

08003484 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d020      	beq.n	80034e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d01b      	beq.n	80034e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f06f 0202 	mvn.w	r2, #2
 80034b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	f003 0303 	and.w	r3, r3, #3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 f8d2 	bl	8003678 <HAL_TIM_IC_CaptureCallback>
 80034d4:	e005      	b.n	80034e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 f8c4 	bl	8003664 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 f8d5 	bl	800368c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	f003 0304 	and.w	r3, r3, #4
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d020      	beq.n	8003534 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f003 0304 	and.w	r3, r3, #4
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d01b      	beq.n	8003534 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f06f 0204 	mvn.w	r2, #4
 8003504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2202      	movs	r2, #2
 800350a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f8ac 	bl	8003678 <HAL_TIM_IC_CaptureCallback>
 8003520:	e005      	b.n	800352e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f89e 	bl	8003664 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 f8af 	bl	800368c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	2b00      	cmp	r3, #0
 800353c:	d020      	beq.n	8003580 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f003 0308 	and.w	r3, r3, #8
 8003544:	2b00      	cmp	r3, #0
 8003546:	d01b      	beq.n	8003580 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f06f 0208 	mvn.w	r2, #8
 8003550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2204      	movs	r2, #4
 8003556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	f003 0303 	and.w	r3, r3, #3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f886 	bl	8003678 <HAL_TIM_IC_CaptureCallback>
 800356c:	e005      	b.n	800357a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f878 	bl	8003664 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 f889 	bl	800368c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	f003 0310 	and.w	r3, r3, #16
 8003586:	2b00      	cmp	r3, #0
 8003588:	d020      	beq.n	80035cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f003 0310 	and.w	r3, r3, #16
 8003590:	2b00      	cmp	r3, #0
 8003592:	d01b      	beq.n	80035cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f06f 0210 	mvn.w	r2, #16
 800359c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2208      	movs	r2, #8
 80035a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f860 	bl	8003678 <HAL_TIM_IC_CaptureCallback>
 80035b8:	e005      	b.n	80035c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 f852 	bl	8003664 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 f863 	bl	800368c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00c      	beq.n	80035f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d007      	beq.n	80035f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f06f 0201 	mvn.w	r2, #1
 80035e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7fd fc5e 	bl	8000eac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00c      	beq.n	8003614 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003600:	2b00      	cmp	r3, #0
 8003602:	d007      	beq.n	8003614 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800360c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f8e0 	bl	80037d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00c      	beq.n	8003638 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003624:	2b00      	cmp	r3, #0
 8003626:	d007      	beq.n	8003638 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f834 	bl	80036a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	f003 0320 	and.w	r3, r3, #32
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00c      	beq.n	800365c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f003 0320 	and.w	r3, r3, #32
 8003648:	2b00      	cmp	r3, #0
 800364a:	d007      	beq.n	800365c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f06f 0220 	mvn.w	r2, #32
 8003654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 f8b2 	bl	80037c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800365c:	bf00      	nop
 800365e:	3710      	adds	r7, #16
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a37      	ldr	r2, [pc, #220]	@ (80037a4 <TIM_Base_SetConfig+0xf0>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d00f      	beq.n	80036ec <TIM_Base_SetConfig+0x38>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036d2:	d00b      	beq.n	80036ec <TIM_Base_SetConfig+0x38>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a34      	ldr	r2, [pc, #208]	@ (80037a8 <TIM_Base_SetConfig+0xf4>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d007      	beq.n	80036ec <TIM_Base_SetConfig+0x38>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a33      	ldr	r2, [pc, #204]	@ (80037ac <TIM_Base_SetConfig+0xf8>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d003      	beq.n	80036ec <TIM_Base_SetConfig+0x38>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a32      	ldr	r2, [pc, #200]	@ (80037b0 <TIM_Base_SetConfig+0xfc>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d108      	bne.n	80036fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a28      	ldr	r2, [pc, #160]	@ (80037a4 <TIM_Base_SetConfig+0xf0>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d01b      	beq.n	800373e <TIM_Base_SetConfig+0x8a>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800370c:	d017      	beq.n	800373e <TIM_Base_SetConfig+0x8a>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a25      	ldr	r2, [pc, #148]	@ (80037a8 <TIM_Base_SetConfig+0xf4>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d013      	beq.n	800373e <TIM_Base_SetConfig+0x8a>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a24      	ldr	r2, [pc, #144]	@ (80037ac <TIM_Base_SetConfig+0xf8>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d00f      	beq.n	800373e <TIM_Base_SetConfig+0x8a>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a23      	ldr	r2, [pc, #140]	@ (80037b0 <TIM_Base_SetConfig+0xfc>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d00b      	beq.n	800373e <TIM_Base_SetConfig+0x8a>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a22      	ldr	r2, [pc, #136]	@ (80037b4 <TIM_Base_SetConfig+0x100>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d007      	beq.n	800373e <TIM_Base_SetConfig+0x8a>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a21      	ldr	r2, [pc, #132]	@ (80037b8 <TIM_Base_SetConfig+0x104>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d003      	beq.n	800373e <TIM_Base_SetConfig+0x8a>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a20      	ldr	r2, [pc, #128]	@ (80037bc <TIM_Base_SetConfig+0x108>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d108      	bne.n	8003750 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003744:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	4313      	orrs	r3, r2
 800374e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	4313      	orrs	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	689a      	ldr	r2, [r3, #8]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a0c      	ldr	r2, [pc, #48]	@ (80037a4 <TIM_Base_SetConfig+0xf0>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d103      	bne.n	800377e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	691a      	ldr	r2, [r3, #16]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f043 0204 	orr.w	r2, r3, #4
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	601a      	str	r2, [r3, #0]
}
 8003796:	bf00      	nop
 8003798:	3714      	adds	r7, #20
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	40010000 	.word	0x40010000
 80037a8:	40000400 	.word	0x40000400
 80037ac:	40000800 	.word	0x40000800
 80037b0:	40000c00 	.word	0x40000c00
 80037b4:	40014000 	.word	0x40014000
 80037b8:	40014400 	.word	0x40014400
 80037bc:	40014800 	.word	0x40014800

080037c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e042      	b.n	8003880 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d106      	bne.n	8003814 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7fd fc50 	bl	80010b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2224      	movs	r2, #36	@ 0x24
 8003818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68da      	ldr	r2, [r3, #12]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800382a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 fdd3 	bl	80043d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	691a      	ldr	r2, [r3, #16]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003840:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	695a      	ldr	r2, [r3, #20]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003850:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68da      	ldr	r2, [r3, #12]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003860:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2220      	movs	r2, #32
 800386c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2220      	movs	r2, #32
 8003874:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b08a      	sub	sp, #40	@ 0x28
 800388c:	af02      	add	r7, sp, #8
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	603b      	str	r3, [r7, #0]
 8003894:	4613      	mov	r3, r2
 8003896:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003898:	2300      	movs	r3, #0
 800389a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b20      	cmp	r3, #32
 80038a6:	d175      	bne.n	8003994 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d002      	beq.n	80038b4 <HAL_UART_Transmit+0x2c>
 80038ae:	88fb      	ldrh	r3, [r7, #6]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d101      	bne.n	80038b8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e06e      	b.n	8003996 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2221      	movs	r2, #33	@ 0x21
 80038c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038c6:	f7fe f941 	bl	8001b4c <HAL_GetTick>
 80038ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	88fa      	ldrh	r2, [r7, #6]
 80038d0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	88fa      	ldrh	r2, [r7, #6]
 80038d6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038e0:	d108      	bne.n	80038f4 <HAL_UART_Transmit+0x6c>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d104      	bne.n	80038f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80038ea:	2300      	movs	r3, #0
 80038ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	61bb      	str	r3, [r7, #24]
 80038f2:	e003      	b.n	80038fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038f8:	2300      	movs	r3, #0
 80038fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80038fc:	e02e      	b.n	800395c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	2200      	movs	r2, #0
 8003906:	2180      	movs	r1, #128	@ 0x80
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f000 fb37 	bl	8003f7c <UART_WaitOnFlagUntilTimeout>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d005      	beq.n	8003920 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2220      	movs	r2, #32
 8003918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e03a      	b.n	8003996 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10b      	bne.n	800393e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	881b      	ldrh	r3, [r3, #0]
 800392a:	461a      	mov	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003934:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	3302      	adds	r3, #2
 800393a:	61bb      	str	r3, [r7, #24]
 800393c:	e007      	b.n	800394e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	781a      	ldrb	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	3301      	adds	r3, #1
 800394c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003952:	b29b      	uxth	r3, r3
 8003954:	3b01      	subs	r3, #1
 8003956:	b29a      	uxth	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003960:	b29b      	uxth	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1cb      	bne.n	80038fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	2200      	movs	r2, #0
 800396e:	2140      	movs	r1, #64	@ 0x40
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f000 fb03 	bl	8003f7c <UART_WaitOnFlagUntilTimeout>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d005      	beq.n	8003988 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2220      	movs	r2, #32
 8003980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e006      	b.n	8003996 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2220      	movs	r2, #32
 800398c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003990:	2300      	movs	r3, #0
 8003992:	e000      	b.n	8003996 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003994:	2302      	movs	r3, #2
  }
}
 8003996:	4618      	mov	r0, r3
 8003998:	3720      	adds	r7, #32
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b084      	sub	sp, #16
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	60f8      	str	r0, [r7, #12]
 80039a6:	60b9      	str	r1, [r7, #8]
 80039a8:	4613      	mov	r3, r2
 80039aa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b20      	cmp	r3, #32
 80039b6:	d112      	bne.n	80039de <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d002      	beq.n	80039c4 <HAL_UART_Receive_IT+0x26>
 80039be:	88fb      	ldrh	r3, [r7, #6]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d101      	bne.n	80039c8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e00b      	b.n	80039e0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80039ce:	88fb      	ldrh	r3, [r7, #6]
 80039d0:	461a      	mov	r2, r3
 80039d2:	68b9      	ldr	r1, [r7, #8]
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f000 fb2a 	bl	800402e <UART_Start_Receive_IT>
 80039da:	4603      	mov	r3, r0
 80039dc:	e000      	b.n	80039e0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80039de:	2302      	movs	r3, #2
  }
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b0ba      	sub	sp, #232	@ 0xe8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003a14:	2300      	movs	r3, #0
 8003a16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a1e:	f003 030f 	and.w	r3, r3, #15
 8003a22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003a26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d10f      	bne.n	8003a4e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a32:	f003 0320 	and.w	r3, r3, #32
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d009      	beq.n	8003a4e <HAL_UART_IRQHandler+0x66>
 8003a3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a3e:	f003 0320 	and.w	r3, r3, #32
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 fc07 	bl	800425a <UART_Receive_IT>
      return;
 8003a4c:	e273      	b.n	8003f36 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	f000 80de 	beq.w	8003c14 <HAL_UART_IRQHandler+0x22c>
 8003a58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d106      	bne.n	8003a72 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a68:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f000 80d1 	beq.w	8003c14 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00b      	beq.n	8003a96 <HAL_UART_IRQHandler+0xae>
 8003a7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d005      	beq.n	8003a96 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a8e:	f043 0201 	orr.w	r2, r3, #1
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a9a:	f003 0304 	and.w	r3, r3, #4
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00b      	beq.n	8003aba <HAL_UART_IRQHandler+0xd2>
 8003aa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d005      	beq.n	8003aba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ab2:	f043 0202 	orr.w	r2, r3, #2
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00b      	beq.n	8003ade <HAL_UART_IRQHandler+0xf6>
 8003ac6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d005      	beq.n	8003ade <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ad6:	f043 0204 	orr.w	r2, r3, #4
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ae2:	f003 0308 	and.w	r3, r3, #8
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d011      	beq.n	8003b0e <HAL_UART_IRQHandler+0x126>
 8003aea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003aee:	f003 0320 	and.w	r3, r3, #32
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d105      	bne.n	8003b02 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003af6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d005      	beq.n	8003b0e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b06:	f043 0208 	orr.w	r2, r3, #8
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f000 820a 	beq.w	8003f2c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b1c:	f003 0320 	and.w	r3, r3, #32
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d008      	beq.n	8003b36 <HAL_UART_IRQHandler+0x14e>
 8003b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b28:	f003 0320 	and.w	r3, r3, #32
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d002      	beq.n	8003b36 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 fb92 	bl	800425a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b40:	2b40      	cmp	r3, #64	@ 0x40
 8003b42:	bf0c      	ite	eq
 8003b44:	2301      	moveq	r3, #1
 8003b46:	2300      	movne	r3, #0
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b52:	f003 0308 	and.w	r3, r3, #8
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d103      	bne.n	8003b62 <HAL_UART_IRQHandler+0x17a>
 8003b5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d04f      	beq.n	8003c02 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 fa9d 	bl	80040a2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b72:	2b40      	cmp	r3, #64	@ 0x40
 8003b74:	d141      	bne.n	8003bfa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	3314      	adds	r3, #20
 8003b7c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b80:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003b84:	e853 3f00 	ldrex	r3, [r3]
 8003b88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003b8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003b90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	3314      	adds	r3, #20
 8003b9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003ba2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003ba6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003baa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003bae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003bb2:	e841 2300 	strex	r3, r2, [r1]
 8003bb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003bba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1d9      	bne.n	8003b76 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d013      	beq.n	8003bf2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bce:	4a8a      	ldr	r2, [pc, #552]	@ (8003df8 <HAL_UART_IRQHandler+0x410>)
 8003bd0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7fe f916 	bl	8001e08 <HAL_DMA_Abort_IT>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d016      	beq.n	8003c10 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003be6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003bec:	4610      	mov	r0, r2
 8003bee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bf0:	e00e      	b.n	8003c10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f9ac 	bl	8003f50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bf8:	e00a      	b.n	8003c10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f9a8 	bl	8003f50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c00:	e006      	b.n	8003c10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f9a4 	bl	8003f50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003c0e:	e18d      	b.n	8003f2c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c10:	bf00      	nop
    return;
 8003c12:	e18b      	b.n	8003f2c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	f040 8167 	bne.w	8003eec <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c22:	f003 0310 	and.w	r3, r3, #16
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f000 8160 	beq.w	8003eec <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8003c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c30:	f003 0310 	and.w	r3, r3, #16
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f000 8159 	beq.w	8003eec <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60bb      	str	r3, [r7, #8]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	60bb      	str	r3, [r7, #8]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	60bb      	str	r3, [r7, #8]
 8003c4e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c5a:	2b40      	cmp	r3, #64	@ 0x40
 8003c5c:	f040 80ce 	bne.w	8003dfc <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c6c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f000 80a9 	beq.w	8003dc8 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003c7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	f080 80a2 	bcs.w	8003dc8 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c8a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c96:	f000 8088 	beq.w	8003daa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	330c      	adds	r3, #12
 8003ca0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ca8:	e853 3f00 	ldrex	r3, [r3]
 8003cac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003cb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003cb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cb8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	330c      	adds	r3, #12
 8003cc2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003cc6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003cca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003cd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003cd6:	e841 2300 	strex	r3, r2, [r1]
 8003cda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003cde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1d9      	bne.n	8003c9a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	3314      	adds	r3, #20
 8003cec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cf0:	e853 3f00 	ldrex	r3, [r3]
 8003cf4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003cf6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003cf8:	f023 0301 	bic.w	r3, r3, #1
 8003cfc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	3314      	adds	r3, #20
 8003d06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003d0a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003d0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d10:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003d12:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003d16:	e841 2300 	strex	r3, r2, [r1]
 8003d1a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003d1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1e1      	bne.n	8003ce6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	3314      	adds	r3, #20
 8003d28:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d2c:	e853 3f00 	ldrex	r3, [r3]
 8003d30:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003d32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	3314      	adds	r3, #20
 8003d42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003d46:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003d48:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003d4c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003d4e:	e841 2300 	strex	r3, r2, [r1]
 8003d52:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003d54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1e3      	bne.n	8003d22 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2220      	movs	r2, #32
 8003d5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	330c      	adds	r3, #12
 8003d6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d72:	e853 3f00 	ldrex	r3, [r3]
 8003d76:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003d78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d7a:	f023 0310 	bic.w	r3, r3, #16
 8003d7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	330c      	adds	r3, #12
 8003d88:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003d8c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003d8e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d90:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003d92:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003d94:	e841 2300 	strex	r3, r2, [r1]
 8003d98:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003d9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1e3      	bne.n	8003d68 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7fd ffbf 	bl	8001d28 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2202      	movs	r2, #2
 8003dae:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 f8cf 	bl	8003f64 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003dc6:	e0b3      	b.n	8003f30 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003dcc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	f040 80ad 	bne.w	8003f30 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dda:	69db      	ldr	r3, [r3, #28]
 8003ddc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003de0:	f040 80a6 	bne.w	8003f30 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2202      	movs	r2, #2
 8003de8:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003dee:	4619      	mov	r1, r3
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 f8b7 	bl	8003f64 <HAL_UARTEx_RxEventCallback>
      return;
 8003df6:	e09b      	b.n	8003f30 <HAL_UART_IRQHandler+0x548>
 8003df8:	08004169 	.word	0x08004169
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f000 808e 	beq.w	8003f34 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8003e18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 8089 	beq.w	8003f34 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	330c      	adds	r3, #12
 8003e28:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e2c:	e853 3f00 	ldrex	r3, [r3]
 8003e30:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e38:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	330c      	adds	r3, #12
 8003e42:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003e46:	647a      	str	r2, [r7, #68]	@ 0x44
 8003e48:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e4e:	e841 2300 	strex	r3, r2, [r1]
 8003e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1e3      	bne.n	8003e22 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	3314      	adds	r3, #20
 8003e60:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e64:	e853 3f00 	ldrex	r3, [r3]
 8003e68:	623b      	str	r3, [r7, #32]
   return(result);
 8003e6a:	6a3b      	ldr	r3, [r7, #32]
 8003e6c:	f023 0301 	bic.w	r3, r3, #1
 8003e70:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	3314      	adds	r3, #20
 8003e7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003e7e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e86:	e841 2300 	strex	r3, r2, [r1]
 8003e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1e3      	bne.n	8003e5a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2220      	movs	r2, #32
 8003e96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	330c      	adds	r3, #12
 8003ea6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	e853 3f00 	ldrex	r3, [r3]
 8003eae:	60fb      	str	r3, [r7, #12]
   return(result);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f023 0310 	bic.w	r3, r3, #16
 8003eb6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	330c      	adds	r3, #12
 8003ec0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003ec4:	61fa      	str	r2, [r7, #28]
 8003ec6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec8:	69b9      	ldr	r1, [r7, #24]
 8003eca:	69fa      	ldr	r2, [r7, #28]
 8003ecc:	e841 2300 	strex	r3, r2, [r1]
 8003ed0:	617b      	str	r3, [r7, #20]
   return(result);
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1e3      	bne.n	8003ea0 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2202      	movs	r2, #2
 8003edc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ede:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f000 f83d 	bl	8003f64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003eea:	e023      	b.n	8003f34 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ef0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d009      	beq.n	8003f0c <HAL_UART_IRQHandler+0x524>
 8003ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003efc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d003      	beq.n	8003f0c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 f940 	bl	800418a <UART_Transmit_IT>
    return;
 8003f0a:	e014      	b.n	8003f36 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00e      	beq.n	8003f36 <HAL_UART_IRQHandler+0x54e>
 8003f18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d008      	beq.n	8003f36 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 f980 	bl	800422a <UART_EndTransmit_IT>
    return;
 8003f2a:	e004      	b.n	8003f36 <HAL_UART_IRQHandler+0x54e>
    return;
 8003f2c:	bf00      	nop
 8003f2e:	e002      	b.n	8003f36 <HAL_UART_IRQHandler+0x54e>
      return;
 8003f30:	bf00      	nop
 8003f32:	e000      	b.n	8003f36 <HAL_UART_IRQHandler+0x54e>
      return;
 8003f34:	bf00      	nop
  }
}
 8003f36:	37e8      	adds	r7, #232	@ 0xe8
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b086      	sub	sp, #24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	603b      	str	r3, [r7, #0]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f8c:	e03b      	b.n	8004006 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f8e:	6a3b      	ldr	r3, [r7, #32]
 8003f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f94:	d037      	beq.n	8004006 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f96:	f7fd fdd9 	bl	8001b4c <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	6a3a      	ldr	r2, [r7, #32]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d302      	bcc.n	8003fac <UART_WaitOnFlagUntilTimeout+0x30>
 8003fa6:	6a3b      	ldr	r3, [r7, #32]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d101      	bne.n	8003fb0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e03a      	b.n	8004026 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	f003 0304 	and.w	r3, r3, #4
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d023      	beq.n	8004006 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	2b80      	cmp	r3, #128	@ 0x80
 8003fc2:	d020      	beq.n	8004006 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	2b40      	cmp	r3, #64	@ 0x40
 8003fc8:	d01d      	beq.n	8004006 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0308 	and.w	r3, r3, #8
 8003fd4:	2b08      	cmp	r3, #8
 8003fd6:	d116      	bne.n	8004006 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003fd8:	2300      	movs	r3, #0
 8003fda:	617b      	str	r3, [r7, #20]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	617b      	str	r3, [r7, #20]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	617b      	str	r3, [r7, #20]
 8003fec:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f000 f857 	bl	80040a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2208      	movs	r2, #8
 8003ff8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e00f      	b.n	8004026 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	4013      	ands	r3, r2
 8004010:	68ba      	ldr	r2, [r7, #8]
 8004012:	429a      	cmp	r2, r3
 8004014:	bf0c      	ite	eq
 8004016:	2301      	moveq	r3, #1
 8004018:	2300      	movne	r3, #0
 800401a:	b2db      	uxtb	r3, r3
 800401c:	461a      	mov	r2, r3
 800401e:	79fb      	ldrb	r3, [r7, #7]
 8004020:	429a      	cmp	r2, r3
 8004022:	d0b4      	beq.n	8003f8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3718      	adds	r7, #24
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800402e:	b480      	push	{r7}
 8004030:	b085      	sub	sp, #20
 8004032:	af00      	add	r7, sp, #0
 8004034:	60f8      	str	r0, [r7, #12]
 8004036:	60b9      	str	r1, [r7, #8]
 8004038:	4613      	mov	r3, r2
 800403a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	88fa      	ldrh	r2, [r7, #6]
 8004046:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	88fa      	ldrh	r2, [r7, #6]
 800404c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2222      	movs	r2, #34	@ 0x22
 8004058:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d007      	beq.n	8004074 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68da      	ldr	r2, [r3, #12]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004072:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	695a      	ldr	r2, [r3, #20]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f042 0201 	orr.w	r2, r2, #1
 8004082:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68da      	ldr	r2, [r3, #12]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f042 0220 	orr.w	r2, r2, #32
 8004092:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3714      	adds	r7, #20
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr

080040a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040a2:	b480      	push	{r7}
 80040a4:	b095      	sub	sp, #84	@ 0x54
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	330c      	adds	r3, #12
 80040b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040b4:	e853 3f00 	ldrex	r3, [r3]
 80040b8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80040ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	330c      	adds	r3, #12
 80040c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80040ca:	643a      	str	r2, [r7, #64]	@ 0x40
 80040cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80040d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80040d2:	e841 2300 	strex	r3, r2, [r1]
 80040d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80040d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1e5      	bne.n	80040aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	3314      	adds	r3, #20
 80040e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e6:	6a3b      	ldr	r3, [r7, #32]
 80040e8:	e853 3f00 	ldrex	r3, [r3]
 80040ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	f023 0301 	bic.w	r3, r3, #1
 80040f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	3314      	adds	r3, #20
 80040fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004100:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004102:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004104:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004106:	e841 2300 	strex	r3, r2, [r1]
 800410a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800410c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1e5      	bne.n	80040de <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004116:	2b01      	cmp	r3, #1
 8004118:	d119      	bne.n	800414e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	330c      	adds	r3, #12
 8004120:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	e853 3f00 	ldrex	r3, [r3]
 8004128:	60bb      	str	r3, [r7, #8]
   return(result);
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	f023 0310 	bic.w	r3, r3, #16
 8004130:	647b      	str	r3, [r7, #68]	@ 0x44
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	330c      	adds	r3, #12
 8004138:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800413a:	61ba      	str	r2, [r7, #24]
 800413c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413e:	6979      	ldr	r1, [r7, #20]
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	e841 2300 	strex	r3, r2, [r1]
 8004146:	613b      	str	r3, [r7, #16]
   return(result);
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1e5      	bne.n	800411a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2220      	movs	r2, #32
 8004152:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800415c:	bf00      	nop
 800415e:	3754      	adds	r7, #84	@ 0x54
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004174:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	f7ff fee7 	bl	8003f50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004182:	bf00      	nop
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800418a:	b480      	push	{r7}
 800418c:	b085      	sub	sp, #20
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b21      	cmp	r3, #33	@ 0x21
 800419c:	d13e      	bne.n	800421c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041a6:	d114      	bne.n	80041d2 <UART_Transmit_IT+0x48>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d110      	bne.n	80041d2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	881b      	ldrh	r3, [r3, #0]
 80041ba:	461a      	mov	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	1c9a      	adds	r2, r3, #2
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	621a      	str	r2, [r3, #32]
 80041d0:	e008      	b.n	80041e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	1c59      	adds	r1, r3, #1
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	6211      	str	r1, [r2, #32]
 80041dc:	781a      	ldrb	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	3b01      	subs	r3, #1
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	4619      	mov	r1, r3
 80041f2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d10f      	bne.n	8004218 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68da      	ldr	r2, [r3, #12]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004206:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68da      	ldr	r2, [r3, #12]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004216:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004218:	2300      	movs	r3, #0
 800421a:	e000      	b.n	800421e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800421c:	2302      	movs	r3, #2
  }
}
 800421e:	4618      	mov	r0, r3
 8004220:	3714      	adds	r7, #20
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b082      	sub	sp, #8
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68da      	ldr	r2, [r3, #12]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004240:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2220      	movs	r2, #32
 8004246:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f7ff fe76 	bl	8003f3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3708      	adds	r7, #8
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b08c      	sub	sp, #48	@ 0x30
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8004262:	2300      	movs	r3, #0
 8004264:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8004266:	2300      	movs	r3, #0
 8004268:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b22      	cmp	r3, #34	@ 0x22
 8004274:	f040 80aa 	bne.w	80043cc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004280:	d115      	bne.n	80042ae <UART_Receive_IT+0x54>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d111      	bne.n	80042ae <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800428e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	b29b      	uxth	r3, r3
 8004298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800429c:	b29a      	uxth	r2, r3
 800429e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a6:	1c9a      	adds	r2, r3, #2
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	629a      	str	r2, [r3, #40]	@ 0x28
 80042ac:	e024      	b.n	80042f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042bc:	d007      	beq.n	80042ce <UART_Receive_IT+0x74>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10a      	bne.n	80042dc <UART_Receive_IT+0x82>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d106      	bne.n	80042dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	b2da      	uxtb	r2, r3
 80042d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042d8:	701a      	strb	r2, [r3, #0]
 80042da:	e008      	b.n	80042ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042e8:	b2da      	uxtb	r2, r3
 80042ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042f2:	1c5a      	adds	r2, r3, #1
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	3b01      	subs	r3, #1
 8004300:	b29b      	uxth	r3, r3
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	4619      	mov	r1, r3
 8004306:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004308:	2b00      	cmp	r3, #0
 800430a:	d15d      	bne.n	80043c8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68da      	ldr	r2, [r3, #12]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f022 0220 	bic.w	r2, r2, #32
 800431a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68da      	ldr	r2, [r3, #12]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800432a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	695a      	ldr	r2, [r3, #20]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f022 0201 	bic.w	r2, r2, #1
 800433a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2220      	movs	r2, #32
 8004340:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800434e:	2b01      	cmp	r3, #1
 8004350:	d135      	bne.n	80043be <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	330c      	adds	r3, #12
 800435e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	e853 3f00 	ldrex	r3, [r3]
 8004366:	613b      	str	r3, [r7, #16]
   return(result);
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	f023 0310 	bic.w	r3, r3, #16
 800436e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	330c      	adds	r3, #12
 8004376:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004378:	623a      	str	r2, [r7, #32]
 800437a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437c:	69f9      	ldr	r1, [r7, #28]
 800437e:	6a3a      	ldr	r2, [r7, #32]
 8004380:	e841 2300 	strex	r3, r2, [r1]
 8004384:	61bb      	str	r3, [r7, #24]
   return(result);
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1e5      	bne.n	8004358 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0310 	and.w	r3, r3, #16
 8004396:	2b10      	cmp	r3, #16
 8004398:	d10a      	bne.n	80043b0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800439a:	2300      	movs	r3, #0
 800439c:	60fb      	str	r3, [r7, #12]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	60fb      	str	r3, [r7, #12]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	60fb      	str	r3, [r7, #12]
 80043ae:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80043b4:	4619      	mov	r1, r3
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f7ff fdd4 	bl	8003f64 <HAL_UARTEx_RxEventCallback>
 80043bc:	e002      	b.n	80043c4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f7fc fcf2 	bl	8000da8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80043c4:	2300      	movs	r3, #0
 80043c6:	e002      	b.n	80043ce <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80043c8:	2300      	movs	r3, #0
 80043ca:	e000      	b.n	80043ce <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80043cc:	2302      	movs	r3, #2
  }
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3730      	adds	r7, #48	@ 0x30
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
	...

080043d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043dc:	b0c0      	sub	sp, #256	@ 0x100
 80043de:	af00      	add	r7, sp, #0
 80043e0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80043f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043f4:	68d9      	ldr	r1, [r3, #12]
 80043f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	ea40 0301 	orr.w	r3, r0, r1
 8004400:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004406:	689a      	ldr	r2, [r3, #8]
 8004408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	431a      	orrs	r2, r3
 8004410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	431a      	orrs	r2, r3
 8004418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	4313      	orrs	r3, r2
 8004420:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004430:	f021 010c 	bic.w	r1, r1, #12
 8004434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800443e:	430b      	orrs	r3, r1
 8004440:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800444e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004452:	6999      	ldr	r1, [r3, #24]
 8004454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	ea40 0301 	orr.w	r3, r0, r1
 800445e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	4b8f      	ldr	r3, [pc, #572]	@ (80046a4 <UART_SetConfig+0x2cc>)
 8004468:	429a      	cmp	r2, r3
 800446a:	d005      	beq.n	8004478 <UART_SetConfig+0xa0>
 800446c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	4b8d      	ldr	r3, [pc, #564]	@ (80046a8 <UART_SetConfig+0x2d0>)
 8004474:	429a      	cmp	r2, r3
 8004476:	d104      	bne.n	8004482 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004478:	f7fe fb0a 	bl	8002a90 <HAL_RCC_GetPCLK2Freq>
 800447c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004480:	e003      	b.n	800448a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004482:	f7fe faf1 	bl	8002a68 <HAL_RCC_GetPCLK1Freq>
 8004486:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800448a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800448e:	69db      	ldr	r3, [r3, #28]
 8004490:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004494:	f040 810c 	bne.w	80046b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004498:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800449c:	2200      	movs	r2, #0
 800449e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80044a2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80044a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80044aa:	4622      	mov	r2, r4
 80044ac:	462b      	mov	r3, r5
 80044ae:	1891      	adds	r1, r2, r2
 80044b0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80044b2:	415b      	adcs	r3, r3
 80044b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80044ba:	4621      	mov	r1, r4
 80044bc:	eb12 0801 	adds.w	r8, r2, r1
 80044c0:	4629      	mov	r1, r5
 80044c2:	eb43 0901 	adc.w	r9, r3, r1
 80044c6:	f04f 0200 	mov.w	r2, #0
 80044ca:	f04f 0300 	mov.w	r3, #0
 80044ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044da:	4690      	mov	r8, r2
 80044dc:	4699      	mov	r9, r3
 80044de:	4623      	mov	r3, r4
 80044e0:	eb18 0303 	adds.w	r3, r8, r3
 80044e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80044e8:	462b      	mov	r3, r5
 80044ea:	eb49 0303 	adc.w	r3, r9, r3
 80044ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80044f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80044fe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004502:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004506:	460b      	mov	r3, r1
 8004508:	18db      	adds	r3, r3, r3
 800450a:	653b      	str	r3, [r7, #80]	@ 0x50
 800450c:	4613      	mov	r3, r2
 800450e:	eb42 0303 	adc.w	r3, r2, r3
 8004512:	657b      	str	r3, [r7, #84]	@ 0x54
 8004514:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004518:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800451c:	f7fb fec8 	bl	80002b0 <__aeabi_uldivmod>
 8004520:	4602      	mov	r2, r0
 8004522:	460b      	mov	r3, r1
 8004524:	4b61      	ldr	r3, [pc, #388]	@ (80046ac <UART_SetConfig+0x2d4>)
 8004526:	fba3 2302 	umull	r2, r3, r3, r2
 800452a:	095b      	lsrs	r3, r3, #5
 800452c:	011c      	lsls	r4, r3, #4
 800452e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004532:	2200      	movs	r2, #0
 8004534:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004538:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800453c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004540:	4642      	mov	r2, r8
 8004542:	464b      	mov	r3, r9
 8004544:	1891      	adds	r1, r2, r2
 8004546:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004548:	415b      	adcs	r3, r3
 800454a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800454c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004550:	4641      	mov	r1, r8
 8004552:	eb12 0a01 	adds.w	sl, r2, r1
 8004556:	4649      	mov	r1, r9
 8004558:	eb43 0b01 	adc.w	fp, r3, r1
 800455c:	f04f 0200 	mov.w	r2, #0
 8004560:	f04f 0300 	mov.w	r3, #0
 8004564:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004568:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800456c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004570:	4692      	mov	sl, r2
 8004572:	469b      	mov	fp, r3
 8004574:	4643      	mov	r3, r8
 8004576:	eb1a 0303 	adds.w	r3, sl, r3
 800457a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800457e:	464b      	mov	r3, r9
 8004580:	eb4b 0303 	adc.w	r3, fp, r3
 8004584:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004594:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004598:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800459c:	460b      	mov	r3, r1
 800459e:	18db      	adds	r3, r3, r3
 80045a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80045a2:	4613      	mov	r3, r2
 80045a4:	eb42 0303 	adc.w	r3, r2, r3
 80045a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80045aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80045ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80045b2:	f7fb fe7d 	bl	80002b0 <__aeabi_uldivmod>
 80045b6:	4602      	mov	r2, r0
 80045b8:	460b      	mov	r3, r1
 80045ba:	4611      	mov	r1, r2
 80045bc:	4b3b      	ldr	r3, [pc, #236]	@ (80046ac <UART_SetConfig+0x2d4>)
 80045be:	fba3 2301 	umull	r2, r3, r3, r1
 80045c2:	095b      	lsrs	r3, r3, #5
 80045c4:	2264      	movs	r2, #100	@ 0x64
 80045c6:	fb02 f303 	mul.w	r3, r2, r3
 80045ca:	1acb      	subs	r3, r1, r3
 80045cc:	00db      	lsls	r3, r3, #3
 80045ce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80045d2:	4b36      	ldr	r3, [pc, #216]	@ (80046ac <UART_SetConfig+0x2d4>)
 80045d4:	fba3 2302 	umull	r2, r3, r3, r2
 80045d8:	095b      	lsrs	r3, r3, #5
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80045e0:	441c      	add	r4, r3
 80045e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045e6:	2200      	movs	r2, #0
 80045e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80045ec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80045f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80045f4:	4642      	mov	r2, r8
 80045f6:	464b      	mov	r3, r9
 80045f8:	1891      	adds	r1, r2, r2
 80045fa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80045fc:	415b      	adcs	r3, r3
 80045fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004600:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004604:	4641      	mov	r1, r8
 8004606:	1851      	adds	r1, r2, r1
 8004608:	6339      	str	r1, [r7, #48]	@ 0x30
 800460a:	4649      	mov	r1, r9
 800460c:	414b      	adcs	r3, r1
 800460e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004610:	f04f 0200 	mov.w	r2, #0
 8004614:	f04f 0300 	mov.w	r3, #0
 8004618:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800461c:	4659      	mov	r1, fp
 800461e:	00cb      	lsls	r3, r1, #3
 8004620:	4651      	mov	r1, sl
 8004622:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004626:	4651      	mov	r1, sl
 8004628:	00ca      	lsls	r2, r1, #3
 800462a:	4610      	mov	r0, r2
 800462c:	4619      	mov	r1, r3
 800462e:	4603      	mov	r3, r0
 8004630:	4642      	mov	r2, r8
 8004632:	189b      	adds	r3, r3, r2
 8004634:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004638:	464b      	mov	r3, r9
 800463a:	460a      	mov	r2, r1
 800463c:	eb42 0303 	adc.w	r3, r2, r3
 8004640:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004650:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004654:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004658:	460b      	mov	r3, r1
 800465a:	18db      	adds	r3, r3, r3
 800465c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800465e:	4613      	mov	r3, r2
 8004660:	eb42 0303 	adc.w	r3, r2, r3
 8004664:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004666:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800466a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800466e:	f7fb fe1f 	bl	80002b0 <__aeabi_uldivmod>
 8004672:	4602      	mov	r2, r0
 8004674:	460b      	mov	r3, r1
 8004676:	4b0d      	ldr	r3, [pc, #52]	@ (80046ac <UART_SetConfig+0x2d4>)
 8004678:	fba3 1302 	umull	r1, r3, r3, r2
 800467c:	095b      	lsrs	r3, r3, #5
 800467e:	2164      	movs	r1, #100	@ 0x64
 8004680:	fb01 f303 	mul.w	r3, r1, r3
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	00db      	lsls	r3, r3, #3
 8004688:	3332      	adds	r3, #50	@ 0x32
 800468a:	4a08      	ldr	r2, [pc, #32]	@ (80046ac <UART_SetConfig+0x2d4>)
 800468c:	fba2 2303 	umull	r2, r3, r2, r3
 8004690:	095b      	lsrs	r3, r3, #5
 8004692:	f003 0207 	and.w	r2, r3, #7
 8004696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4422      	add	r2, r4
 800469e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046a0:	e106      	b.n	80048b0 <UART_SetConfig+0x4d8>
 80046a2:	bf00      	nop
 80046a4:	40011000 	.word	0x40011000
 80046a8:	40011400 	.word	0x40011400
 80046ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046b4:	2200      	movs	r2, #0
 80046b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80046ba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80046be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80046c2:	4642      	mov	r2, r8
 80046c4:	464b      	mov	r3, r9
 80046c6:	1891      	adds	r1, r2, r2
 80046c8:	6239      	str	r1, [r7, #32]
 80046ca:	415b      	adcs	r3, r3
 80046cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80046ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046d2:	4641      	mov	r1, r8
 80046d4:	1854      	adds	r4, r2, r1
 80046d6:	4649      	mov	r1, r9
 80046d8:	eb43 0501 	adc.w	r5, r3, r1
 80046dc:	f04f 0200 	mov.w	r2, #0
 80046e0:	f04f 0300 	mov.w	r3, #0
 80046e4:	00eb      	lsls	r3, r5, #3
 80046e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046ea:	00e2      	lsls	r2, r4, #3
 80046ec:	4614      	mov	r4, r2
 80046ee:	461d      	mov	r5, r3
 80046f0:	4643      	mov	r3, r8
 80046f2:	18e3      	adds	r3, r4, r3
 80046f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80046f8:	464b      	mov	r3, r9
 80046fa:	eb45 0303 	adc.w	r3, r5, r3
 80046fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800470e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004712:	f04f 0200 	mov.w	r2, #0
 8004716:	f04f 0300 	mov.w	r3, #0
 800471a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800471e:	4629      	mov	r1, r5
 8004720:	008b      	lsls	r3, r1, #2
 8004722:	4621      	mov	r1, r4
 8004724:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004728:	4621      	mov	r1, r4
 800472a:	008a      	lsls	r2, r1, #2
 800472c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004730:	f7fb fdbe 	bl	80002b0 <__aeabi_uldivmod>
 8004734:	4602      	mov	r2, r0
 8004736:	460b      	mov	r3, r1
 8004738:	4b60      	ldr	r3, [pc, #384]	@ (80048bc <UART_SetConfig+0x4e4>)
 800473a:	fba3 2302 	umull	r2, r3, r3, r2
 800473e:	095b      	lsrs	r3, r3, #5
 8004740:	011c      	lsls	r4, r3, #4
 8004742:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004746:	2200      	movs	r2, #0
 8004748:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800474c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004750:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004754:	4642      	mov	r2, r8
 8004756:	464b      	mov	r3, r9
 8004758:	1891      	adds	r1, r2, r2
 800475a:	61b9      	str	r1, [r7, #24]
 800475c:	415b      	adcs	r3, r3
 800475e:	61fb      	str	r3, [r7, #28]
 8004760:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004764:	4641      	mov	r1, r8
 8004766:	1851      	adds	r1, r2, r1
 8004768:	6139      	str	r1, [r7, #16]
 800476a:	4649      	mov	r1, r9
 800476c:	414b      	adcs	r3, r1
 800476e:	617b      	str	r3, [r7, #20]
 8004770:	f04f 0200 	mov.w	r2, #0
 8004774:	f04f 0300 	mov.w	r3, #0
 8004778:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800477c:	4659      	mov	r1, fp
 800477e:	00cb      	lsls	r3, r1, #3
 8004780:	4651      	mov	r1, sl
 8004782:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004786:	4651      	mov	r1, sl
 8004788:	00ca      	lsls	r2, r1, #3
 800478a:	4610      	mov	r0, r2
 800478c:	4619      	mov	r1, r3
 800478e:	4603      	mov	r3, r0
 8004790:	4642      	mov	r2, r8
 8004792:	189b      	adds	r3, r3, r2
 8004794:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004798:	464b      	mov	r3, r9
 800479a:	460a      	mov	r2, r1
 800479c:	eb42 0303 	adc.w	r3, r2, r3
 80047a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80047a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80047ae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80047b0:	f04f 0200 	mov.w	r2, #0
 80047b4:	f04f 0300 	mov.w	r3, #0
 80047b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80047bc:	4649      	mov	r1, r9
 80047be:	008b      	lsls	r3, r1, #2
 80047c0:	4641      	mov	r1, r8
 80047c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047c6:	4641      	mov	r1, r8
 80047c8:	008a      	lsls	r2, r1, #2
 80047ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80047ce:	f7fb fd6f 	bl	80002b0 <__aeabi_uldivmod>
 80047d2:	4602      	mov	r2, r0
 80047d4:	460b      	mov	r3, r1
 80047d6:	4611      	mov	r1, r2
 80047d8:	4b38      	ldr	r3, [pc, #224]	@ (80048bc <UART_SetConfig+0x4e4>)
 80047da:	fba3 2301 	umull	r2, r3, r3, r1
 80047de:	095b      	lsrs	r3, r3, #5
 80047e0:	2264      	movs	r2, #100	@ 0x64
 80047e2:	fb02 f303 	mul.w	r3, r2, r3
 80047e6:	1acb      	subs	r3, r1, r3
 80047e8:	011b      	lsls	r3, r3, #4
 80047ea:	3332      	adds	r3, #50	@ 0x32
 80047ec:	4a33      	ldr	r2, [pc, #204]	@ (80048bc <UART_SetConfig+0x4e4>)
 80047ee:	fba2 2303 	umull	r2, r3, r2, r3
 80047f2:	095b      	lsrs	r3, r3, #5
 80047f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047f8:	441c      	add	r4, r3
 80047fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047fe:	2200      	movs	r2, #0
 8004800:	673b      	str	r3, [r7, #112]	@ 0x70
 8004802:	677a      	str	r2, [r7, #116]	@ 0x74
 8004804:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004808:	4642      	mov	r2, r8
 800480a:	464b      	mov	r3, r9
 800480c:	1891      	adds	r1, r2, r2
 800480e:	60b9      	str	r1, [r7, #8]
 8004810:	415b      	adcs	r3, r3
 8004812:	60fb      	str	r3, [r7, #12]
 8004814:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004818:	4641      	mov	r1, r8
 800481a:	1851      	adds	r1, r2, r1
 800481c:	6039      	str	r1, [r7, #0]
 800481e:	4649      	mov	r1, r9
 8004820:	414b      	adcs	r3, r1
 8004822:	607b      	str	r3, [r7, #4]
 8004824:	f04f 0200 	mov.w	r2, #0
 8004828:	f04f 0300 	mov.w	r3, #0
 800482c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004830:	4659      	mov	r1, fp
 8004832:	00cb      	lsls	r3, r1, #3
 8004834:	4651      	mov	r1, sl
 8004836:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800483a:	4651      	mov	r1, sl
 800483c:	00ca      	lsls	r2, r1, #3
 800483e:	4610      	mov	r0, r2
 8004840:	4619      	mov	r1, r3
 8004842:	4603      	mov	r3, r0
 8004844:	4642      	mov	r2, r8
 8004846:	189b      	adds	r3, r3, r2
 8004848:	66bb      	str	r3, [r7, #104]	@ 0x68
 800484a:	464b      	mov	r3, r9
 800484c:	460a      	mov	r2, r1
 800484e:	eb42 0303 	adc.w	r3, r2, r3
 8004852:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	663b      	str	r3, [r7, #96]	@ 0x60
 800485e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004860:	f04f 0200 	mov.w	r2, #0
 8004864:	f04f 0300 	mov.w	r3, #0
 8004868:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800486c:	4649      	mov	r1, r9
 800486e:	008b      	lsls	r3, r1, #2
 8004870:	4641      	mov	r1, r8
 8004872:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004876:	4641      	mov	r1, r8
 8004878:	008a      	lsls	r2, r1, #2
 800487a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800487e:	f7fb fd17 	bl	80002b0 <__aeabi_uldivmod>
 8004882:	4602      	mov	r2, r0
 8004884:	460b      	mov	r3, r1
 8004886:	4b0d      	ldr	r3, [pc, #52]	@ (80048bc <UART_SetConfig+0x4e4>)
 8004888:	fba3 1302 	umull	r1, r3, r3, r2
 800488c:	095b      	lsrs	r3, r3, #5
 800488e:	2164      	movs	r1, #100	@ 0x64
 8004890:	fb01 f303 	mul.w	r3, r1, r3
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	011b      	lsls	r3, r3, #4
 8004898:	3332      	adds	r3, #50	@ 0x32
 800489a:	4a08      	ldr	r2, [pc, #32]	@ (80048bc <UART_SetConfig+0x4e4>)
 800489c:	fba2 2303 	umull	r2, r3, r2, r3
 80048a0:	095b      	lsrs	r3, r3, #5
 80048a2:	f003 020f 	and.w	r2, r3, #15
 80048a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4422      	add	r2, r4
 80048ae:	609a      	str	r2, [r3, #8]
}
 80048b0:	bf00      	nop
 80048b2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80048b6:	46bd      	mov	sp, r7
 80048b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048bc:	51eb851f 	.word	0x51eb851f

080048c0 <__NVIC_SetPriority>:
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	4603      	mov	r3, r0
 80048c8:	6039      	str	r1, [r7, #0]
 80048ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	db0a      	blt.n	80048ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	b2da      	uxtb	r2, r3
 80048d8:	490c      	ldr	r1, [pc, #48]	@ (800490c <__NVIC_SetPriority+0x4c>)
 80048da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048de:	0112      	lsls	r2, r2, #4
 80048e0:	b2d2      	uxtb	r2, r2
 80048e2:	440b      	add	r3, r1
 80048e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80048e8:	e00a      	b.n	8004900 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	b2da      	uxtb	r2, r3
 80048ee:	4908      	ldr	r1, [pc, #32]	@ (8004910 <__NVIC_SetPriority+0x50>)
 80048f0:	79fb      	ldrb	r3, [r7, #7]
 80048f2:	f003 030f 	and.w	r3, r3, #15
 80048f6:	3b04      	subs	r3, #4
 80048f8:	0112      	lsls	r2, r2, #4
 80048fa:	b2d2      	uxtb	r2, r2
 80048fc:	440b      	add	r3, r1
 80048fe:	761a      	strb	r2, [r3, #24]
}
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr
 800490c:	e000e100 	.word	0xe000e100
 8004910:	e000ed00 	.word	0xe000ed00

08004914 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004914:	b580      	push	{r7, lr}
 8004916:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004918:	4b05      	ldr	r3, [pc, #20]	@ (8004930 <SysTick_Handler+0x1c>)
 800491a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800491c:	f001 fe2c 	bl	8006578 <xTaskGetSchedulerState>
 8004920:	4603      	mov	r3, r0
 8004922:	2b01      	cmp	r3, #1
 8004924:	d001      	beq.n	800492a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004926:	f002 feaf 	bl	8007688 <xPortSysTickHandler>
  }
}
 800492a:	bf00      	nop
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	e000e010 	.word	0xe000e010

08004934 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004934:	b580      	push	{r7, lr}
 8004936:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004938:	2100      	movs	r1, #0
 800493a:	f06f 0004 	mvn.w	r0, #4
 800493e:	f7ff ffbf 	bl	80048c0 <__NVIC_SetPriority>
#endif
}
 8004942:	bf00      	nop
 8004944:	bd80      	pop	{r7, pc}
	...

08004948 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800494e:	f3ef 8305 	mrs	r3, IPSR
 8004952:	603b      	str	r3, [r7, #0]
  return(result);
 8004954:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800495a:	f06f 0305 	mvn.w	r3, #5
 800495e:	607b      	str	r3, [r7, #4]
 8004960:	e00c      	b.n	800497c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004962:	4b0a      	ldr	r3, [pc, #40]	@ (800498c <osKernelInitialize+0x44>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d105      	bne.n	8004976 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800496a:	4b08      	ldr	r3, [pc, #32]	@ (800498c <osKernelInitialize+0x44>)
 800496c:	2201      	movs	r2, #1
 800496e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004970:	2300      	movs	r3, #0
 8004972:	607b      	str	r3, [r7, #4]
 8004974:	e002      	b.n	800497c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004976:	f04f 33ff 	mov.w	r3, #4294967295
 800497a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800497c:	687b      	ldr	r3, [r7, #4]
}
 800497e:	4618      	mov	r0, r3
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	200001ec 	.word	0x200001ec

08004990 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004996:	f3ef 8305 	mrs	r3, IPSR
 800499a:	603b      	str	r3, [r7, #0]
  return(result);
 800499c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d003      	beq.n	80049aa <osKernelStart+0x1a>
    stat = osErrorISR;
 80049a2:	f06f 0305 	mvn.w	r3, #5
 80049a6:	607b      	str	r3, [r7, #4]
 80049a8:	e010      	b.n	80049cc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80049aa:	4b0b      	ldr	r3, [pc, #44]	@ (80049d8 <osKernelStart+0x48>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d109      	bne.n	80049c6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80049b2:	f7ff ffbf 	bl	8004934 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80049b6:	4b08      	ldr	r3, [pc, #32]	@ (80049d8 <osKernelStart+0x48>)
 80049b8:	2202      	movs	r2, #2
 80049ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80049bc:	f001 f978 	bl	8005cb0 <vTaskStartScheduler>
      stat = osOK;
 80049c0:	2300      	movs	r3, #0
 80049c2:	607b      	str	r3, [r7, #4]
 80049c4:	e002      	b.n	80049cc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80049c6:	f04f 33ff 	mov.w	r3, #4294967295
 80049ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80049cc:	687b      	ldr	r3, [r7, #4]
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3708      	adds	r7, #8
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	200001ec 	.word	0x200001ec

080049dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80049dc:	b580      	push	{r7, lr}
 80049de:	b08e      	sub	sp, #56	@ 0x38
 80049e0:	af04      	add	r7, sp, #16
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80049e8:	2300      	movs	r3, #0
 80049ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049ec:	f3ef 8305 	mrs	r3, IPSR
 80049f0:	617b      	str	r3, [r7, #20]
  return(result);
 80049f2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d17e      	bne.n	8004af6 <osThreadNew+0x11a>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d07b      	beq.n	8004af6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80049fe:	2380      	movs	r3, #128	@ 0x80
 8004a00:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004a02:	2318      	movs	r3, #24
 8004a04:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004a06:	2300      	movs	r3, #0
 8004a08:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a0e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d045      	beq.n	8004aa2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d002      	beq.n	8004a24 <osThreadNew+0x48>
        name = attr->name;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d002      	beq.n	8004a32 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d008      	beq.n	8004a4a <osThreadNew+0x6e>
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	2b38      	cmp	r3, #56	@ 0x38
 8004a3c:	d805      	bhi.n	8004a4a <osThreadNew+0x6e>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <osThreadNew+0x72>
        return (NULL);
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	e054      	b.n	8004af8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d003      	beq.n	8004a5e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	089b      	lsrs	r3, r3, #2
 8004a5c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00e      	beq.n	8004a84 <osThreadNew+0xa8>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	2ba7      	cmp	r3, #167	@ 0xa7
 8004a6c:	d90a      	bls.n	8004a84 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d006      	beq.n	8004a84 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d002      	beq.n	8004a84 <osThreadNew+0xa8>
        mem = 1;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	61bb      	str	r3, [r7, #24]
 8004a82:	e010      	b.n	8004aa6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d10c      	bne.n	8004aa6 <osThreadNew+0xca>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d108      	bne.n	8004aa6 <osThreadNew+0xca>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d104      	bne.n	8004aa6 <osThreadNew+0xca>
          mem = 0;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	61bb      	str	r3, [r7, #24]
 8004aa0:	e001      	b.n	8004aa6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d110      	bne.n	8004ace <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004ab4:	9202      	str	r2, [sp, #8]
 8004ab6:	9301      	str	r3, [sp, #4]
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	6a3a      	ldr	r2, [r7, #32]
 8004ac0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f000 ff00 	bl	80058c8 <xTaskCreateStatic>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	613b      	str	r3, [r7, #16]
 8004acc:	e013      	b.n	8004af6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d110      	bne.n	8004af6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004ad4:	6a3b      	ldr	r3, [r7, #32]
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	f107 0310 	add.w	r3, r7, #16
 8004adc:	9301      	str	r3, [sp, #4]
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	9300      	str	r3, [sp, #0]
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004ae6:	68f8      	ldr	r0, [r7, #12]
 8004ae8:	f000 ff4e 	bl	8005988 <xTaskCreate>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d001      	beq.n	8004af6 <osThreadNew+0x11a>
            hTask = NULL;
 8004af2:	2300      	movs	r3, #0
 8004af4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004af6:	693b      	ldr	r3, [r7, #16]
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3728      	adds	r7, #40	@ 0x28
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b08:	f3ef 8305 	mrs	r3, IPSR
 8004b0c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b0e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d003      	beq.n	8004b1c <osDelay+0x1c>
    stat = osErrorISR;
 8004b14:	f06f 0305 	mvn.w	r3, #5
 8004b18:	60fb      	str	r3, [r7, #12]
 8004b1a:	e007      	b.n	8004b2c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d002      	beq.n	8004b2c <osDelay+0x2c>
      vTaskDelay(ticks);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f001 f88c 	bl	8005c44 <vTaskDelay>
    }
  }

  return (stat);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3710      	adds	r7, #16
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
	...

08004b38 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	4a07      	ldr	r2, [pc, #28]	@ (8004b64 <vApplicationGetIdleTaskMemory+0x2c>)
 8004b48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	4a06      	ldr	r2, [pc, #24]	@ (8004b68 <vApplicationGetIdleTaskMemory+0x30>)
 8004b4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2280      	movs	r2, #128	@ 0x80
 8004b54:	601a      	str	r2, [r3, #0]
}
 8004b56:	bf00      	nop
 8004b58:	3714      	adds	r7, #20
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	200001f0 	.word	0x200001f0
 8004b68:	20000298 	.word	0x20000298

08004b6c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	4a07      	ldr	r2, [pc, #28]	@ (8004b98 <vApplicationGetTimerTaskMemory+0x2c>)
 8004b7c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	4a06      	ldr	r2, [pc, #24]	@ (8004b9c <vApplicationGetTimerTaskMemory+0x30>)
 8004b82:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b8a:	601a      	str	r2, [r3, #0]
}
 8004b8c:	bf00      	nop
 8004b8e:	3714      	adds	r7, #20
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr
 8004b98:	20000498 	.word	0x20000498
 8004b9c:	20000540 	.word	0x20000540

08004ba0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f103 0208 	add.w	r2, r3, #8
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8004bb8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f103 0208 	add.w	r2, r3, #8
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f103 0208 	add.w	r2, r3, #8
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004bee:	bf00      	nop
 8004bf0:	370c      	adds	r7, #12
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b085      	sub	sp, #20
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
 8004c02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	689a      	ldr	r2, [r3, #8]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	683a      	ldr	r2, [r7, #0]
 8004c1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	683a      	ldr	r2, [r7, #0]
 8004c24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	1c5a      	adds	r2, r3, #1
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	601a      	str	r2, [r3, #0]
}
 8004c36:	bf00      	nop
 8004c38:	3714      	adds	r7, #20
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr

08004c42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c42:	b480      	push	{r7}
 8004c44:	b085      	sub	sp, #20
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
 8004c4a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c58:	d103      	bne.n	8004c62 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	60fb      	str	r3, [r7, #12]
 8004c60:	e00c      	b.n	8004c7c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	3308      	adds	r3, #8
 8004c66:	60fb      	str	r3, [r7, #12]
 8004c68:	e002      	b.n	8004c70 <vListInsert+0x2e>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	60fb      	str	r3, [r7, #12]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d2f6      	bcs.n	8004c6a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	685a      	ldr	r2, [r3, #4]
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	683a      	ldr	r2, [r7, #0]
 8004c8a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	683a      	ldr	r2, [r7, #0]
 8004c96:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	1c5a      	adds	r2, r3, #1
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	601a      	str	r2, [r3, #0]
}
 8004ca8:	bf00      	nop
 8004caa:	3714      	adds	r7, #20
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	6892      	ldr	r2, [r2, #8]
 8004cca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	6852      	ldr	r2, [r2, #4]
 8004cd4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d103      	bne.n	8004ce8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	689a      	ldr	r2, [r3, #8]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	1e5a      	subs	r2, r3, #1
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3714      	adds	r7, #20
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d10b      	bne.n	8004d34 <xQueueGenericReset+0x2c>
	__asm volatile
 8004d1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d20:	f383 8811 	msr	BASEPRI, r3
 8004d24:	f3bf 8f6f 	isb	sy
 8004d28:	f3bf 8f4f 	dsb	sy
 8004d2c:	60bb      	str	r3, [r7, #8]
}
 8004d2e:	bf00      	nop
 8004d30:	bf00      	nop
 8004d32:	e7fd      	b.n	8004d30 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004d34:	f002 fc18 	bl	8007568 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d40:	68f9      	ldr	r1, [r7, #12]
 8004d42:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004d44:	fb01 f303 	mul.w	r3, r1, r3
 8004d48:	441a      	add	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d64:	3b01      	subs	r3, #1
 8004d66:	68f9      	ldr	r1, [r7, #12]
 8004d68:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004d6a:	fb01 f303 	mul.w	r3, r1, r3
 8004d6e:	441a      	add	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	22ff      	movs	r2, #255	@ 0xff
 8004d78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	22ff      	movs	r2, #255	@ 0xff
 8004d80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d114      	bne.n	8004db4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d01a      	beq.n	8004dc8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	3310      	adds	r3, #16
 8004d96:	4618      	mov	r0, r3
 8004d98:	f001 fa28 	bl	80061ec <xTaskRemoveFromEventList>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d012      	beq.n	8004dc8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004da2:	4b0d      	ldr	r3, [pc, #52]	@ (8004dd8 <xQueueGenericReset+0xd0>)
 8004da4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004da8:	601a      	str	r2, [r3, #0]
 8004daa:	f3bf 8f4f 	dsb	sy
 8004dae:	f3bf 8f6f 	isb	sy
 8004db2:	e009      	b.n	8004dc8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	3310      	adds	r3, #16
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7ff fef1 	bl	8004ba0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	3324      	adds	r3, #36	@ 0x24
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7ff feec 	bl	8004ba0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004dc8:	f002 fc00 	bl	80075cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004dcc:	2301      	movs	r3, #1
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	e000ed04 	.word	0xe000ed04

08004ddc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b08e      	sub	sp, #56	@ 0x38
 8004de0:	af02      	add	r7, sp, #8
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
 8004de8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d10b      	bne.n	8004e08 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004df4:	f383 8811 	msr	BASEPRI, r3
 8004df8:	f3bf 8f6f 	isb	sy
 8004dfc:	f3bf 8f4f 	dsb	sy
 8004e00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004e02:	bf00      	nop
 8004e04:	bf00      	nop
 8004e06:	e7fd      	b.n	8004e04 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10b      	bne.n	8004e26 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e12:	f383 8811 	msr	BASEPRI, r3
 8004e16:	f3bf 8f6f 	isb	sy
 8004e1a:	f3bf 8f4f 	dsb	sy
 8004e1e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004e20:	bf00      	nop
 8004e22:	bf00      	nop
 8004e24:	e7fd      	b.n	8004e22 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d002      	beq.n	8004e32 <xQueueGenericCreateStatic+0x56>
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d001      	beq.n	8004e36 <xQueueGenericCreateStatic+0x5a>
 8004e32:	2301      	movs	r3, #1
 8004e34:	e000      	b.n	8004e38 <xQueueGenericCreateStatic+0x5c>
 8004e36:	2300      	movs	r3, #0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d10b      	bne.n	8004e54 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e40:	f383 8811 	msr	BASEPRI, r3
 8004e44:	f3bf 8f6f 	isb	sy
 8004e48:	f3bf 8f4f 	dsb	sy
 8004e4c:	623b      	str	r3, [r7, #32]
}
 8004e4e:	bf00      	nop
 8004e50:	bf00      	nop
 8004e52:	e7fd      	b.n	8004e50 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d102      	bne.n	8004e60 <xQueueGenericCreateStatic+0x84>
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <xQueueGenericCreateStatic+0x88>
 8004e60:	2301      	movs	r3, #1
 8004e62:	e000      	b.n	8004e66 <xQueueGenericCreateStatic+0x8a>
 8004e64:	2300      	movs	r3, #0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10b      	bne.n	8004e82 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e6e:	f383 8811 	msr	BASEPRI, r3
 8004e72:	f3bf 8f6f 	isb	sy
 8004e76:	f3bf 8f4f 	dsb	sy
 8004e7a:	61fb      	str	r3, [r7, #28]
}
 8004e7c:	bf00      	nop
 8004e7e:	bf00      	nop
 8004e80:	e7fd      	b.n	8004e7e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004e82:	2350      	movs	r3, #80	@ 0x50
 8004e84:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	2b50      	cmp	r3, #80	@ 0x50
 8004e8a:	d00b      	beq.n	8004ea4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e90:	f383 8811 	msr	BASEPRI, r3
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	61bb      	str	r3, [r7, #24]
}
 8004e9e:	bf00      	nop
 8004ea0:	bf00      	nop
 8004ea2:	e7fd      	b.n	8004ea0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004ea4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00d      	beq.n	8004ecc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004eb8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ebe:	9300      	str	r3, [sp, #0]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	68b9      	ldr	r1, [r7, #8]
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f000 f840 	bl	8004f4c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3730      	adds	r7, #48	@ 0x30
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b08a      	sub	sp, #40	@ 0x28
 8004eda:	af02      	add	r7, sp, #8
 8004edc:	60f8      	str	r0, [r7, #12]
 8004ede:	60b9      	str	r1, [r7, #8]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d10b      	bne.n	8004f02 <xQueueGenericCreate+0x2c>
	__asm volatile
 8004eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eee:	f383 8811 	msr	BASEPRI, r3
 8004ef2:	f3bf 8f6f 	isb	sy
 8004ef6:	f3bf 8f4f 	dsb	sy
 8004efa:	613b      	str	r3, [r7, #16]
}
 8004efc:	bf00      	nop
 8004efe:	bf00      	nop
 8004f00:	e7fd      	b.n	8004efe <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	68ba      	ldr	r2, [r7, #8]
 8004f06:	fb02 f303 	mul.w	r3, r2, r3
 8004f0a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	3350      	adds	r3, #80	@ 0x50
 8004f10:	4618      	mov	r0, r3
 8004f12:	f002 fc4b 	bl	80077ac <pvPortMalloc>
 8004f16:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d011      	beq.n	8004f42 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	3350      	adds	r3, #80	@ 0x50
 8004f26:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f30:	79fa      	ldrb	r2, [r7, #7]
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	9300      	str	r3, [sp, #0]
 8004f36:	4613      	mov	r3, r2
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	68b9      	ldr	r1, [r7, #8]
 8004f3c:	68f8      	ldr	r0, [r7, #12]
 8004f3e:	f000 f805 	bl	8004f4c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004f42:	69bb      	ldr	r3, [r7, #24]
	}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3720      	adds	r7, #32
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
 8004f58:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d103      	bne.n	8004f68 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	69ba      	ldr	r2, [r7, #24]
 8004f64:	601a      	str	r2, [r3, #0]
 8004f66:	e002      	b.n	8004f6e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004f7a:	2101      	movs	r1, #1
 8004f7c:	69b8      	ldr	r0, [r7, #24]
 8004f7e:	f7ff fec3 	bl	8004d08 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	78fa      	ldrb	r2, [r7, #3]
 8004f86:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004f8a:	bf00      	nop
 8004f8c:	3710      	adds	r7, #16
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
	...

08004f94 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b08e      	sub	sp, #56	@ 0x38
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
 8004fa0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d10b      	bne.n	8004fc8 <xQueueGenericSend+0x34>
	__asm volatile
 8004fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb4:	f383 8811 	msr	BASEPRI, r3
 8004fb8:	f3bf 8f6f 	isb	sy
 8004fbc:	f3bf 8f4f 	dsb	sy
 8004fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004fc2:	bf00      	nop
 8004fc4:	bf00      	nop
 8004fc6:	e7fd      	b.n	8004fc4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d103      	bne.n	8004fd6 <xQueueGenericSend+0x42>
 8004fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <xQueueGenericSend+0x46>
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e000      	b.n	8004fdc <xQueueGenericSend+0x48>
 8004fda:	2300      	movs	r3, #0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d10b      	bne.n	8004ff8 <xQueueGenericSend+0x64>
	__asm volatile
 8004fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fe4:	f383 8811 	msr	BASEPRI, r3
 8004fe8:	f3bf 8f6f 	isb	sy
 8004fec:	f3bf 8f4f 	dsb	sy
 8004ff0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004ff2:	bf00      	nop
 8004ff4:	bf00      	nop
 8004ff6:	e7fd      	b.n	8004ff4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d103      	bne.n	8005006 <xQueueGenericSend+0x72>
 8004ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005000:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005002:	2b01      	cmp	r3, #1
 8005004:	d101      	bne.n	800500a <xQueueGenericSend+0x76>
 8005006:	2301      	movs	r3, #1
 8005008:	e000      	b.n	800500c <xQueueGenericSend+0x78>
 800500a:	2300      	movs	r3, #0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d10b      	bne.n	8005028 <xQueueGenericSend+0x94>
	__asm volatile
 8005010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005014:	f383 8811 	msr	BASEPRI, r3
 8005018:	f3bf 8f6f 	isb	sy
 800501c:	f3bf 8f4f 	dsb	sy
 8005020:	623b      	str	r3, [r7, #32]
}
 8005022:	bf00      	nop
 8005024:	bf00      	nop
 8005026:	e7fd      	b.n	8005024 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005028:	f001 faa6 	bl	8006578 <xTaskGetSchedulerState>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d102      	bne.n	8005038 <xQueueGenericSend+0xa4>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d101      	bne.n	800503c <xQueueGenericSend+0xa8>
 8005038:	2301      	movs	r3, #1
 800503a:	e000      	b.n	800503e <xQueueGenericSend+0xaa>
 800503c:	2300      	movs	r3, #0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10b      	bne.n	800505a <xQueueGenericSend+0xc6>
	__asm volatile
 8005042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005046:	f383 8811 	msr	BASEPRI, r3
 800504a:	f3bf 8f6f 	isb	sy
 800504e:	f3bf 8f4f 	dsb	sy
 8005052:	61fb      	str	r3, [r7, #28]
}
 8005054:	bf00      	nop
 8005056:	bf00      	nop
 8005058:	e7fd      	b.n	8005056 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800505a:	f002 fa85 	bl	8007568 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800505e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005060:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005066:	429a      	cmp	r2, r3
 8005068:	d302      	bcc.n	8005070 <xQueueGenericSend+0xdc>
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	2b02      	cmp	r3, #2
 800506e:	d129      	bne.n	80050c4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005070:	683a      	ldr	r2, [r7, #0]
 8005072:	68b9      	ldr	r1, [r7, #8]
 8005074:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005076:	f000 fa91 	bl	800559c <prvCopyDataToQueue>
 800507a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800507c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800507e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005080:	2b00      	cmp	r3, #0
 8005082:	d010      	beq.n	80050a6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005086:	3324      	adds	r3, #36	@ 0x24
 8005088:	4618      	mov	r0, r3
 800508a:	f001 f8af 	bl	80061ec <xTaskRemoveFromEventList>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d013      	beq.n	80050bc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005094:	4b3f      	ldr	r3, [pc, #252]	@ (8005194 <xQueueGenericSend+0x200>)
 8005096:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800509a:	601a      	str	r2, [r3, #0]
 800509c:	f3bf 8f4f 	dsb	sy
 80050a0:	f3bf 8f6f 	isb	sy
 80050a4:	e00a      	b.n	80050bc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80050a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d007      	beq.n	80050bc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80050ac:	4b39      	ldr	r3, [pc, #228]	@ (8005194 <xQueueGenericSend+0x200>)
 80050ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050b2:	601a      	str	r2, [r3, #0]
 80050b4:	f3bf 8f4f 	dsb	sy
 80050b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80050bc:	f002 fa86 	bl	80075cc <vPortExitCritical>
				return pdPASS;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e063      	b.n	800518c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d103      	bne.n	80050d2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80050ca:	f002 fa7f 	bl	80075cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80050ce:	2300      	movs	r3, #0
 80050d0:	e05c      	b.n	800518c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80050d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d106      	bne.n	80050e6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80050d8:	f107 0314 	add.w	r3, r7, #20
 80050dc:	4618      	mov	r0, r3
 80050de:	f001 f8e9 	bl	80062b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80050e2:	2301      	movs	r3, #1
 80050e4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80050e6:	f002 fa71 	bl	80075cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80050ea:	f000 fe51 	bl	8005d90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80050ee:	f002 fa3b 	bl	8007568 <vPortEnterCritical>
 80050f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80050f8:	b25b      	sxtb	r3, r3
 80050fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050fe:	d103      	bne.n	8005108 <xQueueGenericSend+0x174>
 8005100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005102:	2200      	movs	r2, #0
 8005104:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800510a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800510e:	b25b      	sxtb	r3, r3
 8005110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005114:	d103      	bne.n	800511e <xQueueGenericSend+0x18a>
 8005116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005118:	2200      	movs	r2, #0
 800511a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800511e:	f002 fa55 	bl	80075cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005122:	1d3a      	adds	r2, r7, #4
 8005124:	f107 0314 	add.w	r3, r7, #20
 8005128:	4611      	mov	r1, r2
 800512a:	4618      	mov	r0, r3
 800512c:	f001 f8d8 	bl	80062e0 <xTaskCheckForTimeOut>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d124      	bne.n	8005180 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005136:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005138:	f000 fb28 	bl	800578c <prvIsQueueFull>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d018      	beq.n	8005174 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005144:	3310      	adds	r3, #16
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	4611      	mov	r1, r2
 800514a:	4618      	mov	r0, r3
 800514c:	f000 fffc 	bl	8006148 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005150:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005152:	f000 fab3 	bl	80056bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005156:	f000 fe29 	bl	8005dac <xTaskResumeAll>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	f47f af7c 	bne.w	800505a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005162:	4b0c      	ldr	r3, [pc, #48]	@ (8005194 <xQueueGenericSend+0x200>)
 8005164:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005168:	601a      	str	r2, [r3, #0]
 800516a:	f3bf 8f4f 	dsb	sy
 800516e:	f3bf 8f6f 	isb	sy
 8005172:	e772      	b.n	800505a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005174:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005176:	f000 faa1 	bl	80056bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800517a:	f000 fe17 	bl	8005dac <xTaskResumeAll>
 800517e:	e76c      	b.n	800505a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005180:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005182:	f000 fa9b 	bl	80056bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005186:	f000 fe11 	bl	8005dac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800518a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800518c:	4618      	mov	r0, r3
 800518e:	3738      	adds	r7, #56	@ 0x38
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	e000ed04 	.word	0xe000ed04

08005198 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b090      	sub	sp, #64	@ 0x40
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
 80051a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80051aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10b      	bne.n	80051c8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80051b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b4:	f383 8811 	msr	BASEPRI, r3
 80051b8:	f3bf 8f6f 	isb	sy
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80051c2:	bf00      	nop
 80051c4:	bf00      	nop
 80051c6:	e7fd      	b.n	80051c4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d103      	bne.n	80051d6 <xQueueGenericSendFromISR+0x3e>
 80051ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d101      	bne.n	80051da <xQueueGenericSendFromISR+0x42>
 80051d6:	2301      	movs	r3, #1
 80051d8:	e000      	b.n	80051dc <xQueueGenericSendFromISR+0x44>
 80051da:	2300      	movs	r3, #0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d10b      	bne.n	80051f8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80051e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e4:	f383 8811 	msr	BASEPRI, r3
 80051e8:	f3bf 8f6f 	isb	sy
 80051ec:	f3bf 8f4f 	dsb	sy
 80051f0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80051f2:	bf00      	nop
 80051f4:	bf00      	nop
 80051f6:	e7fd      	b.n	80051f4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d103      	bne.n	8005206 <xQueueGenericSendFromISR+0x6e>
 80051fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005200:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005202:	2b01      	cmp	r3, #1
 8005204:	d101      	bne.n	800520a <xQueueGenericSendFromISR+0x72>
 8005206:	2301      	movs	r3, #1
 8005208:	e000      	b.n	800520c <xQueueGenericSendFromISR+0x74>
 800520a:	2300      	movs	r3, #0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d10b      	bne.n	8005228 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005214:	f383 8811 	msr	BASEPRI, r3
 8005218:	f3bf 8f6f 	isb	sy
 800521c:	f3bf 8f4f 	dsb	sy
 8005220:	623b      	str	r3, [r7, #32]
}
 8005222:	bf00      	nop
 8005224:	bf00      	nop
 8005226:	e7fd      	b.n	8005224 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005228:	f002 fa7e 	bl	8007728 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800522c:	f3ef 8211 	mrs	r2, BASEPRI
 8005230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005234:	f383 8811 	msr	BASEPRI, r3
 8005238:	f3bf 8f6f 	isb	sy
 800523c:	f3bf 8f4f 	dsb	sy
 8005240:	61fa      	str	r2, [r7, #28]
 8005242:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005244:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005246:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800524a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800524c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800524e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005250:	429a      	cmp	r2, r3
 8005252:	d302      	bcc.n	800525a <xQueueGenericSendFromISR+0xc2>
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	2b02      	cmp	r3, #2
 8005258:	d12f      	bne.n	80052ba <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800525a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800525c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005260:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005268:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800526a:	683a      	ldr	r2, [r7, #0]
 800526c:	68b9      	ldr	r1, [r7, #8]
 800526e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005270:	f000 f994 	bl	800559c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005274:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800527c:	d112      	bne.n	80052a4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800527e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005282:	2b00      	cmp	r3, #0
 8005284:	d016      	beq.n	80052b4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005288:	3324      	adds	r3, #36	@ 0x24
 800528a:	4618      	mov	r0, r3
 800528c:	f000 ffae 	bl	80061ec <xTaskRemoveFromEventList>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00e      	beq.n	80052b4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00b      	beq.n	80052b4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	601a      	str	r2, [r3, #0]
 80052a2:	e007      	b.n	80052b4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80052a4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80052a8:	3301      	adds	r3, #1
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	b25a      	sxtb	r2, r3
 80052ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80052b4:	2301      	movs	r3, #1
 80052b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80052b8:	e001      	b.n	80052be <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80052ba:	2300      	movs	r3, #0
 80052bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052c0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80052c8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80052ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3740      	adds	r7, #64	@ 0x40
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b08c      	sub	sp, #48	@ 0x30
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80052e0:	2300      	movs	r3, #0
 80052e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80052e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d10b      	bne.n	8005306 <xQueueReceive+0x32>
	__asm volatile
 80052ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052f2:	f383 8811 	msr	BASEPRI, r3
 80052f6:	f3bf 8f6f 	isb	sy
 80052fa:	f3bf 8f4f 	dsb	sy
 80052fe:	623b      	str	r3, [r7, #32]
}
 8005300:	bf00      	nop
 8005302:	bf00      	nop
 8005304:	e7fd      	b.n	8005302 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d103      	bne.n	8005314 <xQueueReceive+0x40>
 800530c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800530e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005310:	2b00      	cmp	r3, #0
 8005312:	d101      	bne.n	8005318 <xQueueReceive+0x44>
 8005314:	2301      	movs	r3, #1
 8005316:	e000      	b.n	800531a <xQueueReceive+0x46>
 8005318:	2300      	movs	r3, #0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d10b      	bne.n	8005336 <xQueueReceive+0x62>
	__asm volatile
 800531e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005322:	f383 8811 	msr	BASEPRI, r3
 8005326:	f3bf 8f6f 	isb	sy
 800532a:	f3bf 8f4f 	dsb	sy
 800532e:	61fb      	str	r3, [r7, #28]
}
 8005330:	bf00      	nop
 8005332:	bf00      	nop
 8005334:	e7fd      	b.n	8005332 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005336:	f001 f91f 	bl	8006578 <xTaskGetSchedulerState>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d102      	bne.n	8005346 <xQueueReceive+0x72>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d101      	bne.n	800534a <xQueueReceive+0x76>
 8005346:	2301      	movs	r3, #1
 8005348:	e000      	b.n	800534c <xQueueReceive+0x78>
 800534a:	2300      	movs	r3, #0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d10b      	bne.n	8005368 <xQueueReceive+0x94>
	__asm volatile
 8005350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005354:	f383 8811 	msr	BASEPRI, r3
 8005358:	f3bf 8f6f 	isb	sy
 800535c:	f3bf 8f4f 	dsb	sy
 8005360:	61bb      	str	r3, [r7, #24]
}
 8005362:	bf00      	nop
 8005364:	bf00      	nop
 8005366:	e7fd      	b.n	8005364 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005368:	f002 f8fe 	bl	8007568 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800536c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800536e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005370:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005374:	2b00      	cmp	r3, #0
 8005376:	d01f      	beq.n	80053b8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005378:	68b9      	ldr	r1, [r7, #8]
 800537a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800537c:	f000 f978 	bl	8005670 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005382:	1e5a      	subs	r2, r3, #1
 8005384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005386:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d00f      	beq.n	80053b0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005392:	3310      	adds	r3, #16
 8005394:	4618      	mov	r0, r3
 8005396:	f000 ff29 	bl	80061ec <xTaskRemoveFromEventList>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d007      	beq.n	80053b0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80053a0:	4b3c      	ldr	r3, [pc, #240]	@ (8005494 <xQueueReceive+0x1c0>)
 80053a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053a6:	601a      	str	r2, [r3, #0]
 80053a8:	f3bf 8f4f 	dsb	sy
 80053ac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80053b0:	f002 f90c 	bl	80075cc <vPortExitCritical>
				return pdPASS;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e069      	b.n	800548c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d103      	bne.n	80053c6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80053be:	f002 f905 	bl	80075cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80053c2:	2300      	movs	r3, #0
 80053c4:	e062      	b.n	800548c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80053c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d106      	bne.n	80053da <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80053cc:	f107 0310 	add.w	r3, r7, #16
 80053d0:	4618      	mov	r0, r3
 80053d2:	f000 ff6f 	bl	80062b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80053d6:	2301      	movs	r3, #1
 80053d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80053da:	f002 f8f7 	bl	80075cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80053de:	f000 fcd7 	bl	8005d90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80053e2:	f002 f8c1 	bl	8007568 <vPortEnterCritical>
 80053e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80053ec:	b25b      	sxtb	r3, r3
 80053ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f2:	d103      	bne.n	80053fc <xQueueReceive+0x128>
 80053f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005402:	b25b      	sxtb	r3, r3
 8005404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005408:	d103      	bne.n	8005412 <xQueueReceive+0x13e>
 800540a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800540c:	2200      	movs	r2, #0
 800540e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005412:	f002 f8db 	bl	80075cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005416:	1d3a      	adds	r2, r7, #4
 8005418:	f107 0310 	add.w	r3, r7, #16
 800541c:	4611      	mov	r1, r2
 800541e:	4618      	mov	r0, r3
 8005420:	f000 ff5e 	bl	80062e0 <xTaskCheckForTimeOut>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d123      	bne.n	8005472 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800542a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800542c:	f000 f998 	bl	8005760 <prvIsQueueEmpty>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d017      	beq.n	8005466 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005438:	3324      	adds	r3, #36	@ 0x24
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	4611      	mov	r1, r2
 800543e:	4618      	mov	r0, r3
 8005440:	f000 fe82 	bl	8006148 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005444:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005446:	f000 f939 	bl	80056bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800544a:	f000 fcaf 	bl	8005dac <xTaskResumeAll>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d189      	bne.n	8005368 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005454:	4b0f      	ldr	r3, [pc, #60]	@ (8005494 <xQueueReceive+0x1c0>)
 8005456:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800545a:	601a      	str	r2, [r3, #0]
 800545c:	f3bf 8f4f 	dsb	sy
 8005460:	f3bf 8f6f 	isb	sy
 8005464:	e780      	b.n	8005368 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005466:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005468:	f000 f928 	bl	80056bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800546c:	f000 fc9e 	bl	8005dac <xTaskResumeAll>
 8005470:	e77a      	b.n	8005368 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005472:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005474:	f000 f922 	bl	80056bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005478:	f000 fc98 	bl	8005dac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800547c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800547e:	f000 f96f 	bl	8005760 <prvIsQueueEmpty>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	f43f af6f 	beq.w	8005368 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800548a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800548c:	4618      	mov	r0, r3
 800548e:	3730      	adds	r7, #48	@ 0x30
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	e000ed04 	.word	0xe000ed04

08005498 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b08e      	sub	sp, #56	@ 0x38
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80054a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d10b      	bne.n	80054c6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80054ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054b2:	f383 8811 	msr	BASEPRI, r3
 80054b6:	f3bf 8f6f 	isb	sy
 80054ba:	f3bf 8f4f 	dsb	sy
 80054be:	623b      	str	r3, [r7, #32]
}
 80054c0:	bf00      	nop
 80054c2:	bf00      	nop
 80054c4:	e7fd      	b.n	80054c2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d103      	bne.n	80054d4 <xQueueReceiveFromISR+0x3c>
 80054cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d101      	bne.n	80054d8 <xQueueReceiveFromISR+0x40>
 80054d4:	2301      	movs	r3, #1
 80054d6:	e000      	b.n	80054da <xQueueReceiveFromISR+0x42>
 80054d8:	2300      	movs	r3, #0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10b      	bne.n	80054f6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80054de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054e2:	f383 8811 	msr	BASEPRI, r3
 80054e6:	f3bf 8f6f 	isb	sy
 80054ea:	f3bf 8f4f 	dsb	sy
 80054ee:	61fb      	str	r3, [r7, #28]
}
 80054f0:	bf00      	nop
 80054f2:	bf00      	nop
 80054f4:	e7fd      	b.n	80054f2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80054f6:	f002 f917 	bl	8007728 <vPortValidateInterruptPriority>
	__asm volatile
 80054fa:	f3ef 8211 	mrs	r2, BASEPRI
 80054fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005502:	f383 8811 	msr	BASEPRI, r3
 8005506:	f3bf 8f6f 	isb	sy
 800550a:	f3bf 8f4f 	dsb	sy
 800550e:	61ba      	str	r2, [r7, #24]
 8005510:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005512:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005514:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800551a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800551c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800551e:	2b00      	cmp	r3, #0
 8005520:	d02f      	beq.n	8005582 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005524:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005528:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800552c:	68b9      	ldr	r1, [r7, #8]
 800552e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005530:	f000 f89e 	bl	8005670 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005536:	1e5a      	subs	r2, r3, #1
 8005538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800553a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800553c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005544:	d112      	bne.n	800556c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d016      	beq.n	800557c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800554e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005550:	3310      	adds	r3, #16
 8005552:	4618      	mov	r0, r3
 8005554:	f000 fe4a 	bl	80061ec <xTaskRemoveFromEventList>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00e      	beq.n	800557c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00b      	beq.n	800557c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	601a      	str	r2, [r3, #0]
 800556a:	e007      	b.n	800557c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800556c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005570:	3301      	adds	r3, #1
 8005572:	b2db      	uxtb	r3, r3
 8005574:	b25a      	sxtb	r2, r3
 8005576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005578:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800557c:	2301      	movs	r3, #1
 800557e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005580:	e001      	b.n	8005586 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8005582:	2300      	movs	r3, #0
 8005584:	637b      	str	r3, [r7, #52]	@ 0x34
 8005586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005588:	613b      	str	r3, [r7, #16]
	__asm volatile
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	f383 8811 	msr	BASEPRI, r3
}
 8005590:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005594:	4618      	mov	r0, r3
 8005596:	3738      	adds	r7, #56	@ 0x38
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b086      	sub	sp, #24
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80055a8:	2300      	movs	r3, #0
 80055aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10d      	bne.n	80055d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d14d      	bne.n	800565e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	4618      	mov	r0, r3
 80055c8:	f000 fff4 	bl	80065b4 <xTaskPriorityDisinherit>
 80055cc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	609a      	str	r2, [r3, #8]
 80055d4:	e043      	b.n	800565e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d119      	bne.n	8005610 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6858      	ldr	r0, [r3, #4]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e4:	461a      	mov	r2, r3
 80055e6:	68b9      	ldr	r1, [r7, #8]
 80055e8:	f002 fb82 	bl	8007cf0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	685a      	ldr	r2, [r3, #4]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f4:	441a      	add	r2, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	685a      	ldr	r2, [r3, #4]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	429a      	cmp	r2, r3
 8005604:	d32b      	bcc.n	800565e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	605a      	str	r2, [r3, #4]
 800560e:	e026      	b.n	800565e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	68d8      	ldr	r0, [r3, #12]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005618:	461a      	mov	r2, r3
 800561a:	68b9      	ldr	r1, [r7, #8]
 800561c:	f002 fb68 	bl	8007cf0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	68da      	ldr	r2, [r3, #12]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005628:	425b      	negs	r3, r3
 800562a:	441a      	add	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	68da      	ldr	r2, [r3, #12]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	429a      	cmp	r2, r3
 800563a:	d207      	bcs.n	800564c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	689a      	ldr	r2, [r3, #8]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005644:	425b      	negs	r3, r3
 8005646:	441a      	add	r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2b02      	cmp	r3, #2
 8005650:	d105      	bne.n	800565e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d002      	beq.n	800565e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	3b01      	subs	r3, #1
 800565c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	1c5a      	adds	r2, r3, #1
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005666:	697b      	ldr	r3, [r7, #20]
}
 8005668:	4618      	mov	r0, r3
 800566a:	3718      	adds	r7, #24
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800567e:	2b00      	cmp	r3, #0
 8005680:	d018      	beq.n	80056b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	68da      	ldr	r2, [r3, #12]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800568a:	441a      	add	r2, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	68da      	ldr	r2, [r3, #12]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	429a      	cmp	r2, r3
 800569a:	d303      	bcc.n	80056a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	68d9      	ldr	r1, [r3, #12]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ac:	461a      	mov	r2, r3
 80056ae:	6838      	ldr	r0, [r7, #0]
 80056b0:	f002 fb1e 	bl	8007cf0 <memcpy>
	}
}
 80056b4:	bf00      	nop
 80056b6:	3708      	adds	r7, #8
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80056c4:	f001 ff50 	bl	8007568 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80056ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056d0:	e011      	b.n	80056f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d012      	beq.n	8005700 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	3324      	adds	r3, #36	@ 0x24
 80056de:	4618      	mov	r0, r3
 80056e0:	f000 fd84 	bl	80061ec <xTaskRemoveFromEventList>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d001      	beq.n	80056ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80056ea:	f000 fe5d 	bl	80063a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80056ee:	7bfb      	ldrb	r3, [r7, #15]
 80056f0:	3b01      	subs	r3, #1
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	dce9      	bgt.n	80056d2 <prvUnlockQueue+0x16>
 80056fe:	e000      	b.n	8005702 <prvUnlockQueue+0x46>
					break;
 8005700:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	22ff      	movs	r2, #255	@ 0xff
 8005706:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800570a:	f001 ff5f 	bl	80075cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800570e:	f001 ff2b 	bl	8007568 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005718:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800571a:	e011      	b.n	8005740 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d012      	beq.n	800574a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	3310      	adds	r3, #16
 8005728:	4618      	mov	r0, r3
 800572a:	f000 fd5f 	bl	80061ec <xTaskRemoveFromEventList>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d001      	beq.n	8005738 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005734:	f000 fe38 	bl	80063a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005738:	7bbb      	ldrb	r3, [r7, #14]
 800573a:	3b01      	subs	r3, #1
 800573c:	b2db      	uxtb	r3, r3
 800573e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005740:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005744:	2b00      	cmp	r3, #0
 8005746:	dce9      	bgt.n	800571c <prvUnlockQueue+0x60>
 8005748:	e000      	b.n	800574c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800574a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	22ff      	movs	r2, #255	@ 0xff
 8005750:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005754:	f001 ff3a 	bl	80075cc <vPortExitCritical>
}
 8005758:	bf00      	nop
 800575a:	3710      	adds	r7, #16
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005768:	f001 fefe 	bl	8007568 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005770:	2b00      	cmp	r3, #0
 8005772:	d102      	bne.n	800577a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005774:	2301      	movs	r3, #1
 8005776:	60fb      	str	r3, [r7, #12]
 8005778:	e001      	b.n	800577e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800577a:	2300      	movs	r3, #0
 800577c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800577e:	f001 ff25 	bl	80075cc <vPortExitCritical>

	return xReturn;
 8005782:	68fb      	ldr	r3, [r7, #12]
}
 8005784:	4618      	mov	r0, r3
 8005786:	3710      	adds	r7, #16
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005794:	f001 fee8 	bl	8007568 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d102      	bne.n	80057aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80057a4:	2301      	movs	r3, #1
 80057a6:	60fb      	str	r3, [r7, #12]
 80057a8:	e001      	b.n	80057ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80057aa:	2300      	movs	r3, #0
 80057ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80057ae:	f001 ff0d 	bl	80075cc <vPortExitCritical>

	return xReturn;
 80057b2:	68fb      	ldr	r3, [r7, #12]
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3710      	adds	r7, #16
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 80057bc:	b480      	push	{r7}
 80057be:	b087      	sub	sp, #28
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	613b      	str	r3, [r7, #16]

	configASSERT( pxQueue );
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d10b      	bne.n	80057e6 <xQueueIsQueueFullFromISR+0x2a>
	__asm volatile
 80057ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057d2:	f383 8811 	msr	BASEPRI, r3
 80057d6:	f3bf 8f6f 	isb	sy
 80057da:	f3bf 8f4f 	dsb	sy
 80057de:	60fb      	str	r3, [r7, #12]
}
 80057e0:	bf00      	nop
 80057e2:	bf00      	nop
 80057e4:	e7fd      	b.n	80057e2 <xQueueIsQueueFullFromISR+0x26>
	if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d102      	bne.n	80057f8 <xQueueIsQueueFullFromISR+0x3c>
	{
		xReturn = pdTRUE;
 80057f2:	2301      	movs	r3, #1
 80057f4:	617b      	str	r3, [r7, #20]
 80057f6:	e001      	b.n	80057fc <xQueueIsQueueFullFromISR+0x40>
	}
	else
	{
		xReturn = pdFALSE;
 80057f8:	2300      	movs	r3, #0
 80057fa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80057fc:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80057fe:	4618      	mov	r0, r3
 8005800:	371c      	adds	r7, #28
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
	...

0800580c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800580c:	b480      	push	{r7}
 800580e:	b085      	sub	sp, #20
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005816:	2300      	movs	r3, #0
 8005818:	60fb      	str	r3, [r7, #12]
 800581a:	e014      	b.n	8005846 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800581c:	4a0f      	ldr	r2, [pc, #60]	@ (800585c <vQueueAddToRegistry+0x50>)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d10b      	bne.n	8005840 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005828:	490c      	ldr	r1, [pc, #48]	@ (800585c <vQueueAddToRegistry+0x50>)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005832:	4a0a      	ldr	r2, [pc, #40]	@ (800585c <vQueueAddToRegistry+0x50>)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	00db      	lsls	r3, r3, #3
 8005838:	4413      	add	r3, r2
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800583e:	e006      	b.n	800584e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	3301      	adds	r3, #1
 8005844:	60fb      	str	r3, [r7, #12]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2b07      	cmp	r3, #7
 800584a:	d9e7      	bls.n	800581c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800584c:	bf00      	nop
 800584e:	bf00      	nop
 8005850:	3714      	adds	r7, #20
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr
 800585a:	bf00      	nop
 800585c:	20000940 	.word	0x20000940

08005860 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005860:	b580      	push	{r7, lr}
 8005862:	b086      	sub	sp, #24
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005870:	f001 fe7a 	bl	8007568 <vPortEnterCritical>
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800587a:	b25b      	sxtb	r3, r3
 800587c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005880:	d103      	bne.n	800588a <vQueueWaitForMessageRestricted+0x2a>
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005890:	b25b      	sxtb	r3, r3
 8005892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005896:	d103      	bne.n	80058a0 <vQueueWaitForMessageRestricted+0x40>
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058a0:	f001 fe94 	bl	80075cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d106      	bne.n	80058ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	3324      	adds	r3, #36	@ 0x24
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	68b9      	ldr	r1, [r7, #8]
 80058b4:	4618      	mov	r0, r3
 80058b6:	f000 fc6d 	bl	8006194 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80058ba:	6978      	ldr	r0, [r7, #20]
 80058bc:	f7ff fefe 	bl	80056bc <prvUnlockQueue>
	}
 80058c0:	bf00      	nop
 80058c2:	3718      	adds	r7, #24
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b08e      	sub	sp, #56	@ 0x38
 80058cc:	af04      	add	r7, sp, #16
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
 80058d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80058d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10b      	bne.n	80058f4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80058dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e0:	f383 8811 	msr	BASEPRI, r3
 80058e4:	f3bf 8f6f 	isb	sy
 80058e8:	f3bf 8f4f 	dsb	sy
 80058ec:	623b      	str	r3, [r7, #32]
}
 80058ee:	bf00      	nop
 80058f0:	bf00      	nop
 80058f2:	e7fd      	b.n	80058f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80058f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d10b      	bne.n	8005912 <xTaskCreateStatic+0x4a>
	__asm volatile
 80058fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058fe:	f383 8811 	msr	BASEPRI, r3
 8005902:	f3bf 8f6f 	isb	sy
 8005906:	f3bf 8f4f 	dsb	sy
 800590a:	61fb      	str	r3, [r7, #28]
}
 800590c:	bf00      	nop
 800590e:	bf00      	nop
 8005910:	e7fd      	b.n	800590e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005912:	23a8      	movs	r3, #168	@ 0xa8
 8005914:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	2ba8      	cmp	r3, #168	@ 0xa8
 800591a:	d00b      	beq.n	8005934 <xTaskCreateStatic+0x6c>
	__asm volatile
 800591c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005920:	f383 8811 	msr	BASEPRI, r3
 8005924:	f3bf 8f6f 	isb	sy
 8005928:	f3bf 8f4f 	dsb	sy
 800592c:	61bb      	str	r3, [r7, #24]
}
 800592e:	bf00      	nop
 8005930:	bf00      	nop
 8005932:	e7fd      	b.n	8005930 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005934:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005938:	2b00      	cmp	r3, #0
 800593a:	d01e      	beq.n	800597a <xTaskCreateStatic+0xb2>
 800593c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800593e:	2b00      	cmp	r3, #0
 8005940:	d01b      	beq.n	800597a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005944:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005948:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800594a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800594c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800594e:	2202      	movs	r2, #2
 8005950:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005954:	2300      	movs	r3, #0
 8005956:	9303      	str	r3, [sp, #12]
 8005958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800595a:	9302      	str	r3, [sp, #8]
 800595c:	f107 0314 	add.w	r3, r7, #20
 8005960:	9301      	str	r3, [sp, #4]
 8005962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005964:	9300      	str	r3, [sp, #0]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	68b9      	ldr	r1, [r7, #8]
 800596c:	68f8      	ldr	r0, [r7, #12]
 800596e:	f000 f851 	bl	8005a14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005972:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005974:	f000 f8f6 	bl	8005b64 <prvAddNewTaskToReadyList>
 8005978:	e001      	b.n	800597e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800597a:	2300      	movs	r3, #0
 800597c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800597e:	697b      	ldr	r3, [r7, #20]
	}
 8005980:	4618      	mov	r0, r3
 8005982:	3728      	adds	r7, #40	@ 0x28
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005988:	b580      	push	{r7, lr}
 800598a:	b08c      	sub	sp, #48	@ 0x30
 800598c:	af04      	add	r7, sp, #16
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	603b      	str	r3, [r7, #0]
 8005994:	4613      	mov	r3, r2
 8005996:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005998:	88fb      	ldrh	r3, [r7, #6]
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	4618      	mov	r0, r3
 800599e:	f001 ff05 	bl	80077ac <pvPortMalloc>
 80059a2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00e      	beq.n	80059c8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80059aa:	20a8      	movs	r0, #168	@ 0xa8
 80059ac:	f001 fefe 	bl	80077ac <pvPortMalloc>
 80059b0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d003      	beq.n	80059c0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	697a      	ldr	r2, [r7, #20]
 80059bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80059be:	e005      	b.n	80059cc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80059c0:	6978      	ldr	r0, [r7, #20]
 80059c2:	f001 ffc1 	bl	8007948 <vPortFree>
 80059c6:	e001      	b.n	80059cc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80059c8:	2300      	movs	r3, #0
 80059ca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d017      	beq.n	8005a02 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80059da:	88fa      	ldrh	r2, [r7, #6]
 80059dc:	2300      	movs	r3, #0
 80059de:	9303      	str	r3, [sp, #12]
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	9302      	str	r3, [sp, #8]
 80059e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059e6:	9301      	str	r3, [sp, #4]
 80059e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ea:	9300      	str	r3, [sp, #0]
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	68b9      	ldr	r1, [r7, #8]
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f000 f80f 	bl	8005a14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80059f6:	69f8      	ldr	r0, [r7, #28]
 80059f8:	f000 f8b4 	bl	8005b64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80059fc:	2301      	movs	r3, #1
 80059fe:	61bb      	str	r3, [r7, #24]
 8005a00:	e002      	b.n	8005a08 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005a02:	f04f 33ff 	mov.w	r3, #4294967295
 8005a06:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005a08:	69bb      	ldr	r3, [r7, #24]
	}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3720      	adds	r7, #32
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
	...

08005a14 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b088      	sub	sp, #32
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
 8005a20:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a24:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	21a5      	movs	r1, #165	@ 0xa5
 8005a2e:	f002 f8cd 	bl	8007bcc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005a3c:	3b01      	subs	r3, #1
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	4413      	add	r3, r2
 8005a42:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	f023 0307 	bic.w	r3, r3, #7
 8005a4a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	f003 0307 	and.w	r3, r3, #7
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00b      	beq.n	8005a6e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a5a:	f383 8811 	msr	BASEPRI, r3
 8005a5e:	f3bf 8f6f 	isb	sy
 8005a62:	f3bf 8f4f 	dsb	sy
 8005a66:	617b      	str	r3, [r7, #20]
}
 8005a68:	bf00      	nop
 8005a6a:	bf00      	nop
 8005a6c:	e7fd      	b.n	8005a6a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d01f      	beq.n	8005ab4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a74:	2300      	movs	r3, #0
 8005a76:	61fb      	str	r3, [r7, #28]
 8005a78:	e012      	b.n	8005aa0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005a7a:	68ba      	ldr	r2, [r7, #8]
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	4413      	add	r3, r2
 8005a80:	7819      	ldrb	r1, [r3, #0]
 8005a82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	4413      	add	r3, r2
 8005a88:	3334      	adds	r3, #52	@ 0x34
 8005a8a:	460a      	mov	r2, r1
 8005a8c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	4413      	add	r3, r2
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d006      	beq.n	8005aa8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	61fb      	str	r3, [r7, #28]
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	2b0f      	cmp	r3, #15
 8005aa4:	d9e9      	bls.n	8005a7a <prvInitialiseNewTask+0x66>
 8005aa6:	e000      	b.n	8005aaa <prvInitialiseNewTask+0x96>
			{
				break;
 8005aa8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ab2:	e003      	b.n	8005abc <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005abe:	2b37      	cmp	r3, #55	@ 0x37
 8005ac0:	d901      	bls.n	8005ac6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005ac2:	2337      	movs	r3, #55	@ 0x37
 8005ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005aca:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ace:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ad0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ada:	3304      	adds	r3, #4
 8005adc:	4618      	mov	r0, r3
 8005ade:	f7ff f87f 	bl	8004be0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae4:	3318      	adds	r3, #24
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f7ff f87a 	bl	8004be0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005af0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005af4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005afa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005afe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b00:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b04:	2200      	movs	r2, #0
 8005b06:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b14:	3354      	adds	r3, #84	@ 0x54
 8005b16:	224c      	movs	r2, #76	@ 0x4c
 8005b18:	2100      	movs	r1, #0
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f002 f856 	bl	8007bcc <memset>
 8005b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b22:	4a0d      	ldr	r2, [pc, #52]	@ (8005b58 <prvInitialiseNewTask+0x144>)
 8005b24:	659a      	str	r2, [r3, #88]	@ 0x58
 8005b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b28:	4a0c      	ldr	r2, [pc, #48]	@ (8005b5c <prvInitialiseNewTask+0x148>)
 8005b2a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b2e:	4a0c      	ldr	r2, [pc, #48]	@ (8005b60 <prvInitialiseNewTask+0x14c>)
 8005b30:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005b32:	683a      	ldr	r2, [r7, #0]
 8005b34:	68f9      	ldr	r1, [r7, #12]
 8005b36:	69b8      	ldr	r0, [r7, #24]
 8005b38:	f001 fbe2 	bl	8007300 <pxPortInitialiseStack>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b40:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005b42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d002      	beq.n	8005b4e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b4e:	bf00      	nop
 8005b50:	3720      	adds	r7, #32
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	20004bd4 	.word	0x20004bd4
 8005b5c:	20004c3c 	.word	0x20004c3c
 8005b60:	20004ca4 	.word	0x20004ca4

08005b64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005b6c:	f001 fcfc 	bl	8007568 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005b70:	4b2d      	ldr	r3, [pc, #180]	@ (8005c28 <prvAddNewTaskToReadyList+0xc4>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	3301      	adds	r3, #1
 8005b76:	4a2c      	ldr	r2, [pc, #176]	@ (8005c28 <prvAddNewTaskToReadyList+0xc4>)
 8005b78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005b7a:	4b2c      	ldr	r3, [pc, #176]	@ (8005c2c <prvAddNewTaskToReadyList+0xc8>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d109      	bne.n	8005b96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005b82:	4a2a      	ldr	r2, [pc, #168]	@ (8005c2c <prvAddNewTaskToReadyList+0xc8>)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005b88:	4b27      	ldr	r3, [pc, #156]	@ (8005c28 <prvAddNewTaskToReadyList+0xc4>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d110      	bne.n	8005bb2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005b90:	f000 fc2e 	bl	80063f0 <prvInitialiseTaskLists>
 8005b94:	e00d      	b.n	8005bb2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005b96:	4b26      	ldr	r3, [pc, #152]	@ (8005c30 <prvAddNewTaskToReadyList+0xcc>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d109      	bne.n	8005bb2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005b9e:	4b23      	ldr	r3, [pc, #140]	@ (8005c2c <prvAddNewTaskToReadyList+0xc8>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d802      	bhi.n	8005bb2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005bac:	4a1f      	ldr	r2, [pc, #124]	@ (8005c2c <prvAddNewTaskToReadyList+0xc8>)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005bb2:	4b20      	ldr	r3, [pc, #128]	@ (8005c34 <prvAddNewTaskToReadyList+0xd0>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	4a1e      	ldr	r2, [pc, #120]	@ (8005c34 <prvAddNewTaskToReadyList+0xd0>)
 8005bba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005bbc:	4b1d      	ldr	r3, [pc, #116]	@ (8005c34 <prvAddNewTaskToReadyList+0xd0>)
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8005c38 <prvAddNewTaskToReadyList+0xd4>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d903      	bls.n	8005bd8 <prvAddNewTaskToReadyList+0x74>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd4:	4a18      	ldr	r2, [pc, #96]	@ (8005c38 <prvAddNewTaskToReadyList+0xd4>)
 8005bd6:	6013      	str	r3, [r2, #0]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bdc:	4613      	mov	r3, r2
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	4413      	add	r3, r2
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	4a15      	ldr	r2, [pc, #84]	@ (8005c3c <prvAddNewTaskToReadyList+0xd8>)
 8005be6:	441a      	add	r2, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	3304      	adds	r3, #4
 8005bec:	4619      	mov	r1, r3
 8005bee:	4610      	mov	r0, r2
 8005bf0:	f7ff f803 	bl	8004bfa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005bf4:	f001 fcea 	bl	80075cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005bf8:	4b0d      	ldr	r3, [pc, #52]	@ (8005c30 <prvAddNewTaskToReadyList+0xcc>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00e      	beq.n	8005c1e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005c00:	4b0a      	ldr	r3, [pc, #40]	@ (8005c2c <prvAddNewTaskToReadyList+0xc8>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d207      	bcs.n	8005c1e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8005c40 <prvAddNewTaskToReadyList+0xdc>)
 8005c10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c14:	601a      	str	r2, [r3, #0]
 8005c16:	f3bf 8f4f 	dsb	sy
 8005c1a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c1e:	bf00      	nop
 8005c20:	3708      	adds	r7, #8
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	20000e54 	.word	0x20000e54
 8005c2c:	20000980 	.word	0x20000980
 8005c30:	20000e60 	.word	0x20000e60
 8005c34:	20000e70 	.word	0x20000e70
 8005c38:	20000e5c 	.word	0x20000e5c
 8005c3c:	20000984 	.word	0x20000984
 8005c40:	e000ed04 	.word	0xe000ed04

08005c44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d018      	beq.n	8005c88 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005c56:	4b14      	ldr	r3, [pc, #80]	@ (8005ca8 <vTaskDelay+0x64>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00b      	beq.n	8005c76 <vTaskDelay+0x32>
	__asm volatile
 8005c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c62:	f383 8811 	msr	BASEPRI, r3
 8005c66:	f3bf 8f6f 	isb	sy
 8005c6a:	f3bf 8f4f 	dsb	sy
 8005c6e:	60bb      	str	r3, [r7, #8]
}
 8005c70:	bf00      	nop
 8005c72:	bf00      	nop
 8005c74:	e7fd      	b.n	8005c72 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005c76:	f000 f88b 	bl	8005d90 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005c7a:	2100      	movs	r1, #0
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 ff11 	bl	8006aa4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005c82:	f000 f893 	bl	8005dac <xTaskResumeAll>
 8005c86:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d107      	bne.n	8005c9e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005c8e:	4b07      	ldr	r3, [pc, #28]	@ (8005cac <vTaskDelay+0x68>)
 8005c90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c94:	601a      	str	r2, [r3, #0]
 8005c96:	f3bf 8f4f 	dsb	sy
 8005c9a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c9e:	bf00      	nop
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	20000e7c 	.word	0x20000e7c
 8005cac:	e000ed04 	.word	0xe000ed04

08005cb0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b08a      	sub	sp, #40	@ 0x28
 8005cb4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005cbe:	463a      	mov	r2, r7
 8005cc0:	1d39      	adds	r1, r7, #4
 8005cc2:	f107 0308 	add.w	r3, r7, #8
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f7fe ff36 	bl	8004b38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005ccc:	6839      	ldr	r1, [r7, #0]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	68ba      	ldr	r2, [r7, #8]
 8005cd2:	9202      	str	r2, [sp, #8]
 8005cd4:	9301      	str	r3, [sp, #4]
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	9300      	str	r3, [sp, #0]
 8005cda:	2300      	movs	r3, #0
 8005cdc:	460a      	mov	r2, r1
 8005cde:	4924      	ldr	r1, [pc, #144]	@ (8005d70 <vTaskStartScheduler+0xc0>)
 8005ce0:	4824      	ldr	r0, [pc, #144]	@ (8005d74 <vTaskStartScheduler+0xc4>)
 8005ce2:	f7ff fdf1 	bl	80058c8 <xTaskCreateStatic>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	4a23      	ldr	r2, [pc, #140]	@ (8005d78 <vTaskStartScheduler+0xc8>)
 8005cea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005cec:	4b22      	ldr	r3, [pc, #136]	@ (8005d78 <vTaskStartScheduler+0xc8>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d002      	beq.n	8005cfa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	617b      	str	r3, [r7, #20]
 8005cf8:	e001      	b.n	8005cfe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d102      	bne.n	8005d0a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005d04:	f000 ff22 	bl	8006b4c <xTimerCreateTimerTask>
 8005d08:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d11b      	bne.n	8005d48 <vTaskStartScheduler+0x98>
	__asm volatile
 8005d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d14:	f383 8811 	msr	BASEPRI, r3
 8005d18:	f3bf 8f6f 	isb	sy
 8005d1c:	f3bf 8f4f 	dsb	sy
 8005d20:	613b      	str	r3, [r7, #16]
}
 8005d22:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005d24:	4b15      	ldr	r3, [pc, #84]	@ (8005d7c <vTaskStartScheduler+0xcc>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	3354      	adds	r3, #84	@ 0x54
 8005d2a:	4a15      	ldr	r2, [pc, #84]	@ (8005d80 <vTaskStartScheduler+0xd0>)
 8005d2c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005d2e:	4b15      	ldr	r3, [pc, #84]	@ (8005d84 <vTaskStartScheduler+0xd4>)
 8005d30:	f04f 32ff 	mov.w	r2, #4294967295
 8005d34:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005d36:	4b14      	ldr	r3, [pc, #80]	@ (8005d88 <vTaskStartScheduler+0xd8>)
 8005d38:	2201      	movs	r2, #1
 8005d3a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005d3c:	4b13      	ldr	r3, [pc, #76]	@ (8005d8c <vTaskStartScheduler+0xdc>)
 8005d3e:	2200      	movs	r2, #0
 8005d40:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005d42:	f001 fb6d 	bl	8007420 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005d46:	e00f      	b.n	8005d68 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d4e:	d10b      	bne.n	8005d68 <vTaskStartScheduler+0xb8>
	__asm volatile
 8005d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d54:	f383 8811 	msr	BASEPRI, r3
 8005d58:	f3bf 8f6f 	isb	sy
 8005d5c:	f3bf 8f4f 	dsb	sy
 8005d60:	60fb      	str	r3, [r7, #12]
}
 8005d62:	bf00      	nop
 8005d64:	bf00      	nop
 8005d66:	e7fd      	b.n	8005d64 <vTaskStartScheduler+0xb4>
}
 8005d68:	bf00      	nop
 8005d6a:	3718      	adds	r7, #24
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}
 8005d70:	08008964 	.word	0x08008964
 8005d74:	080063c1 	.word	0x080063c1
 8005d78:	20000e78 	.word	0x20000e78
 8005d7c:	20000980 	.word	0x20000980
 8005d80:	2000002c 	.word	0x2000002c
 8005d84:	20000e74 	.word	0x20000e74
 8005d88:	20000e60 	.word	0x20000e60
 8005d8c:	20000e58 	.word	0x20000e58

08005d90 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005d90:	b480      	push	{r7}
 8005d92:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005d94:	4b04      	ldr	r3, [pc, #16]	@ (8005da8 <vTaskSuspendAll+0x18>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	3301      	adds	r3, #1
 8005d9a:	4a03      	ldr	r2, [pc, #12]	@ (8005da8 <vTaskSuspendAll+0x18>)
 8005d9c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005d9e:	bf00      	nop
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr
 8005da8:	20000e7c 	.word	0x20000e7c

08005dac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005db2:	2300      	movs	r3, #0
 8005db4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005db6:	2300      	movs	r3, #0
 8005db8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005dba:	4b42      	ldr	r3, [pc, #264]	@ (8005ec4 <xTaskResumeAll+0x118>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10b      	bne.n	8005dda <xTaskResumeAll+0x2e>
	__asm volatile
 8005dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc6:	f383 8811 	msr	BASEPRI, r3
 8005dca:	f3bf 8f6f 	isb	sy
 8005dce:	f3bf 8f4f 	dsb	sy
 8005dd2:	603b      	str	r3, [r7, #0]
}
 8005dd4:	bf00      	nop
 8005dd6:	bf00      	nop
 8005dd8:	e7fd      	b.n	8005dd6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005dda:	f001 fbc5 	bl	8007568 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005dde:	4b39      	ldr	r3, [pc, #228]	@ (8005ec4 <xTaskResumeAll+0x118>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	3b01      	subs	r3, #1
 8005de4:	4a37      	ldr	r2, [pc, #220]	@ (8005ec4 <xTaskResumeAll+0x118>)
 8005de6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005de8:	4b36      	ldr	r3, [pc, #216]	@ (8005ec4 <xTaskResumeAll+0x118>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d162      	bne.n	8005eb6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005df0:	4b35      	ldr	r3, [pc, #212]	@ (8005ec8 <xTaskResumeAll+0x11c>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d05e      	beq.n	8005eb6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005df8:	e02f      	b.n	8005e5a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dfa:	4b34      	ldr	r3, [pc, #208]	@ (8005ecc <xTaskResumeAll+0x120>)
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	3318      	adds	r3, #24
 8005e06:	4618      	mov	r0, r3
 8005e08:	f7fe ff54 	bl	8004cb4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	3304      	adds	r3, #4
 8005e10:	4618      	mov	r0, r3
 8005e12:	f7fe ff4f 	bl	8004cb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e1a:	4b2d      	ldr	r3, [pc, #180]	@ (8005ed0 <xTaskResumeAll+0x124>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d903      	bls.n	8005e2a <xTaskResumeAll+0x7e>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e26:	4a2a      	ldr	r2, [pc, #168]	@ (8005ed0 <xTaskResumeAll+0x124>)
 8005e28:	6013      	str	r3, [r2, #0]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e2e:	4613      	mov	r3, r2
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	4413      	add	r3, r2
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	4a27      	ldr	r2, [pc, #156]	@ (8005ed4 <xTaskResumeAll+0x128>)
 8005e38:	441a      	add	r2, r3
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	3304      	adds	r3, #4
 8005e3e:	4619      	mov	r1, r3
 8005e40:	4610      	mov	r0, r2
 8005e42:	f7fe feda 	bl	8004bfa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e4a:	4b23      	ldr	r3, [pc, #140]	@ (8005ed8 <xTaskResumeAll+0x12c>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d302      	bcc.n	8005e5a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005e54:	4b21      	ldr	r3, [pc, #132]	@ (8005edc <xTaskResumeAll+0x130>)
 8005e56:	2201      	movs	r2, #1
 8005e58:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e5a:	4b1c      	ldr	r3, [pc, #112]	@ (8005ecc <xTaskResumeAll+0x120>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1cb      	bne.n	8005dfa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d001      	beq.n	8005e6c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005e68:	f000 fb66 	bl	8006538 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005e6c:	4b1c      	ldr	r3, [pc, #112]	@ (8005ee0 <xTaskResumeAll+0x134>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d010      	beq.n	8005e9a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005e78:	f000 f846 	bl	8005f08 <xTaskIncrementTick>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d002      	beq.n	8005e88 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005e82:	4b16      	ldr	r3, [pc, #88]	@ (8005edc <xTaskResumeAll+0x130>)
 8005e84:	2201      	movs	r2, #1
 8005e86:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1f1      	bne.n	8005e78 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005e94:	4b12      	ldr	r3, [pc, #72]	@ (8005ee0 <xTaskResumeAll+0x134>)
 8005e96:	2200      	movs	r2, #0
 8005e98:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005e9a:	4b10      	ldr	r3, [pc, #64]	@ (8005edc <xTaskResumeAll+0x130>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d009      	beq.n	8005eb6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8005ee4 <xTaskResumeAll+0x138>)
 8005ea8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005eac:	601a      	str	r2, [r3, #0]
 8005eae:	f3bf 8f4f 	dsb	sy
 8005eb2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005eb6:	f001 fb89 	bl	80075cc <vPortExitCritical>

	return xAlreadyYielded;
 8005eba:	68bb      	ldr	r3, [r7, #8]
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3710      	adds	r7, #16
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	20000e7c 	.word	0x20000e7c
 8005ec8:	20000e54 	.word	0x20000e54
 8005ecc:	20000e14 	.word	0x20000e14
 8005ed0:	20000e5c 	.word	0x20000e5c
 8005ed4:	20000984 	.word	0x20000984
 8005ed8:	20000980 	.word	0x20000980
 8005edc:	20000e68 	.word	0x20000e68
 8005ee0:	20000e64 	.word	0x20000e64
 8005ee4:	e000ed04 	.word	0xe000ed04

08005ee8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005eee:	4b05      	ldr	r3, [pc, #20]	@ (8005f04 <xTaskGetTickCount+0x1c>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005ef4:	687b      	ldr	r3, [r7, #4]
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	20000e58 	.word	0x20000e58

08005f08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b086      	sub	sp, #24
 8005f0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f12:	4b4f      	ldr	r3, [pc, #316]	@ (8006050 <xTaskIncrementTick+0x148>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	f040 8090 	bne.w	800603c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005f1c:	4b4d      	ldr	r3, [pc, #308]	@ (8006054 <xTaskIncrementTick+0x14c>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	3301      	adds	r3, #1
 8005f22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005f24:	4a4b      	ldr	r2, [pc, #300]	@ (8006054 <xTaskIncrementTick+0x14c>)
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d121      	bne.n	8005f74 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005f30:	4b49      	ldr	r3, [pc, #292]	@ (8006058 <xTaskIncrementTick+0x150>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00b      	beq.n	8005f52 <xTaskIncrementTick+0x4a>
	__asm volatile
 8005f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f3e:	f383 8811 	msr	BASEPRI, r3
 8005f42:	f3bf 8f6f 	isb	sy
 8005f46:	f3bf 8f4f 	dsb	sy
 8005f4a:	603b      	str	r3, [r7, #0]
}
 8005f4c:	bf00      	nop
 8005f4e:	bf00      	nop
 8005f50:	e7fd      	b.n	8005f4e <xTaskIncrementTick+0x46>
 8005f52:	4b41      	ldr	r3, [pc, #260]	@ (8006058 <xTaskIncrementTick+0x150>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	60fb      	str	r3, [r7, #12]
 8005f58:	4b40      	ldr	r3, [pc, #256]	@ (800605c <xTaskIncrementTick+0x154>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a3e      	ldr	r2, [pc, #248]	@ (8006058 <xTaskIncrementTick+0x150>)
 8005f5e:	6013      	str	r3, [r2, #0]
 8005f60:	4a3e      	ldr	r2, [pc, #248]	@ (800605c <xTaskIncrementTick+0x154>)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6013      	str	r3, [r2, #0]
 8005f66:	4b3e      	ldr	r3, [pc, #248]	@ (8006060 <xTaskIncrementTick+0x158>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	4a3c      	ldr	r2, [pc, #240]	@ (8006060 <xTaskIncrementTick+0x158>)
 8005f6e:	6013      	str	r3, [r2, #0]
 8005f70:	f000 fae2 	bl	8006538 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005f74:	4b3b      	ldr	r3, [pc, #236]	@ (8006064 <xTaskIncrementTick+0x15c>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d349      	bcc.n	8006012 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f7e:	4b36      	ldr	r3, [pc, #216]	@ (8006058 <xTaskIncrementTick+0x150>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d104      	bne.n	8005f92 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f88:	4b36      	ldr	r3, [pc, #216]	@ (8006064 <xTaskIncrementTick+0x15c>)
 8005f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f8e:	601a      	str	r2, [r3, #0]
					break;
 8005f90:	e03f      	b.n	8006012 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f92:	4b31      	ldr	r3, [pc, #196]	@ (8006058 <xTaskIncrementTick+0x150>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005fa2:	693a      	ldr	r2, [r7, #16]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d203      	bcs.n	8005fb2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005faa:	4a2e      	ldr	r2, [pc, #184]	@ (8006064 <xTaskIncrementTick+0x15c>)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005fb0:	e02f      	b.n	8006012 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	3304      	adds	r3, #4
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f7fe fe7c 	bl	8004cb4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d004      	beq.n	8005fce <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	3318      	adds	r3, #24
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f7fe fe73 	bl	8004cb4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fd2:	4b25      	ldr	r3, [pc, #148]	@ (8006068 <xTaskIncrementTick+0x160>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d903      	bls.n	8005fe2 <xTaskIncrementTick+0xda>
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fde:	4a22      	ldr	r2, [pc, #136]	@ (8006068 <xTaskIncrementTick+0x160>)
 8005fe0:	6013      	str	r3, [r2, #0]
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	4413      	add	r3, r2
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	4a1f      	ldr	r2, [pc, #124]	@ (800606c <xTaskIncrementTick+0x164>)
 8005ff0:	441a      	add	r2, r3
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	3304      	adds	r3, #4
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	4610      	mov	r0, r2
 8005ffa:	f7fe fdfe 	bl	8004bfa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006002:	4b1b      	ldr	r3, [pc, #108]	@ (8006070 <xTaskIncrementTick+0x168>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006008:	429a      	cmp	r2, r3
 800600a:	d3b8      	bcc.n	8005f7e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800600c:	2301      	movs	r3, #1
 800600e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006010:	e7b5      	b.n	8005f7e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006012:	4b17      	ldr	r3, [pc, #92]	@ (8006070 <xTaskIncrementTick+0x168>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006018:	4914      	ldr	r1, [pc, #80]	@ (800606c <xTaskIncrementTick+0x164>)
 800601a:	4613      	mov	r3, r2
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	4413      	add	r3, r2
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	440b      	add	r3, r1
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2b01      	cmp	r3, #1
 8006028:	d901      	bls.n	800602e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800602a:	2301      	movs	r3, #1
 800602c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800602e:	4b11      	ldr	r3, [pc, #68]	@ (8006074 <xTaskIncrementTick+0x16c>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d007      	beq.n	8006046 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006036:	2301      	movs	r3, #1
 8006038:	617b      	str	r3, [r7, #20]
 800603a:	e004      	b.n	8006046 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800603c:	4b0e      	ldr	r3, [pc, #56]	@ (8006078 <xTaskIncrementTick+0x170>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	3301      	adds	r3, #1
 8006042:	4a0d      	ldr	r2, [pc, #52]	@ (8006078 <xTaskIncrementTick+0x170>)
 8006044:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006046:	697b      	ldr	r3, [r7, #20]
}
 8006048:	4618      	mov	r0, r3
 800604a:	3718      	adds	r7, #24
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	20000e7c 	.word	0x20000e7c
 8006054:	20000e58 	.word	0x20000e58
 8006058:	20000e0c 	.word	0x20000e0c
 800605c:	20000e10 	.word	0x20000e10
 8006060:	20000e6c 	.word	0x20000e6c
 8006064:	20000e74 	.word	0x20000e74
 8006068:	20000e5c 	.word	0x20000e5c
 800606c:	20000984 	.word	0x20000984
 8006070:	20000980 	.word	0x20000980
 8006074:	20000e68 	.word	0x20000e68
 8006078:	20000e64 	.word	0x20000e64

0800607c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800607c:	b480      	push	{r7}
 800607e:	b085      	sub	sp, #20
 8006080:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006082:	4b2b      	ldr	r3, [pc, #172]	@ (8006130 <vTaskSwitchContext+0xb4>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d003      	beq.n	8006092 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800608a:	4b2a      	ldr	r3, [pc, #168]	@ (8006134 <vTaskSwitchContext+0xb8>)
 800608c:	2201      	movs	r2, #1
 800608e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006090:	e047      	b.n	8006122 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8006092:	4b28      	ldr	r3, [pc, #160]	@ (8006134 <vTaskSwitchContext+0xb8>)
 8006094:	2200      	movs	r2, #0
 8006096:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006098:	4b27      	ldr	r3, [pc, #156]	@ (8006138 <vTaskSwitchContext+0xbc>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	60fb      	str	r3, [r7, #12]
 800609e:	e011      	b.n	80060c4 <vTaskSwitchContext+0x48>
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d10b      	bne.n	80060be <vTaskSwitchContext+0x42>
	__asm volatile
 80060a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060aa:	f383 8811 	msr	BASEPRI, r3
 80060ae:	f3bf 8f6f 	isb	sy
 80060b2:	f3bf 8f4f 	dsb	sy
 80060b6:	607b      	str	r3, [r7, #4]
}
 80060b8:	bf00      	nop
 80060ba:	bf00      	nop
 80060bc:	e7fd      	b.n	80060ba <vTaskSwitchContext+0x3e>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	3b01      	subs	r3, #1
 80060c2:	60fb      	str	r3, [r7, #12]
 80060c4:	491d      	ldr	r1, [pc, #116]	@ (800613c <vTaskSwitchContext+0xc0>)
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	4613      	mov	r3, r2
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	4413      	add	r3, r2
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	440b      	add	r3, r1
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d0e3      	beq.n	80060a0 <vTaskSwitchContext+0x24>
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	4613      	mov	r3, r2
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	4413      	add	r3, r2
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	4a16      	ldr	r2, [pc, #88]	@ (800613c <vTaskSwitchContext+0xc0>)
 80060e4:	4413      	add	r3, r2
 80060e6:	60bb      	str	r3, [r7, #8]
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	685a      	ldr	r2, [r3, #4]
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	605a      	str	r2, [r3, #4]
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	685a      	ldr	r2, [r3, #4]
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	3308      	adds	r3, #8
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d104      	bne.n	8006108 <vTaskSwitchContext+0x8c>
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	685a      	ldr	r2, [r3, #4]
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	605a      	str	r2, [r3, #4]
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	4a0c      	ldr	r2, [pc, #48]	@ (8006140 <vTaskSwitchContext+0xc4>)
 8006110:	6013      	str	r3, [r2, #0]
 8006112:	4a09      	ldr	r2, [pc, #36]	@ (8006138 <vTaskSwitchContext+0xbc>)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006118:	4b09      	ldr	r3, [pc, #36]	@ (8006140 <vTaskSwitchContext+0xc4>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	3354      	adds	r3, #84	@ 0x54
 800611e:	4a09      	ldr	r2, [pc, #36]	@ (8006144 <vTaskSwitchContext+0xc8>)
 8006120:	6013      	str	r3, [r2, #0]
}
 8006122:	bf00      	nop
 8006124:	3714      	adds	r7, #20
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	20000e7c 	.word	0x20000e7c
 8006134:	20000e68 	.word	0x20000e68
 8006138:	20000e5c 	.word	0x20000e5c
 800613c:	20000984 	.word	0x20000984
 8006140:	20000980 	.word	0x20000980
 8006144:	2000002c 	.word	0x2000002c

08006148 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d10b      	bne.n	8006170 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800615c:	f383 8811 	msr	BASEPRI, r3
 8006160:	f3bf 8f6f 	isb	sy
 8006164:	f3bf 8f4f 	dsb	sy
 8006168:	60fb      	str	r3, [r7, #12]
}
 800616a:	bf00      	nop
 800616c:	bf00      	nop
 800616e:	e7fd      	b.n	800616c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006170:	4b07      	ldr	r3, [pc, #28]	@ (8006190 <vTaskPlaceOnEventList+0x48>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	3318      	adds	r3, #24
 8006176:	4619      	mov	r1, r3
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f7fe fd62 	bl	8004c42 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800617e:	2101      	movs	r1, #1
 8006180:	6838      	ldr	r0, [r7, #0]
 8006182:	f000 fc8f 	bl	8006aa4 <prvAddCurrentTaskToDelayedList>
}
 8006186:	bf00      	nop
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	20000980 	.word	0x20000980

08006194 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006194:	b580      	push	{r7, lr}
 8006196:	b086      	sub	sp, #24
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d10b      	bne.n	80061be <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80061a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061aa:	f383 8811 	msr	BASEPRI, r3
 80061ae:	f3bf 8f6f 	isb	sy
 80061b2:	f3bf 8f4f 	dsb	sy
 80061b6:	617b      	str	r3, [r7, #20]
}
 80061b8:	bf00      	nop
 80061ba:	bf00      	nop
 80061bc:	e7fd      	b.n	80061ba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80061be:	4b0a      	ldr	r3, [pc, #40]	@ (80061e8 <vTaskPlaceOnEventListRestricted+0x54>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	3318      	adds	r3, #24
 80061c4:	4619      	mov	r1, r3
 80061c6:	68f8      	ldr	r0, [r7, #12]
 80061c8:	f7fe fd17 	bl	8004bfa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d002      	beq.n	80061d8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80061d2:	f04f 33ff 	mov.w	r3, #4294967295
 80061d6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80061d8:	6879      	ldr	r1, [r7, #4]
 80061da:	68b8      	ldr	r0, [r7, #8]
 80061dc:	f000 fc62 	bl	8006aa4 <prvAddCurrentTaskToDelayedList>
	}
 80061e0:	bf00      	nop
 80061e2:	3718      	adds	r7, #24
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	20000980 	.word	0x20000980

080061ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b086      	sub	sp, #24
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d10b      	bne.n	800621a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006206:	f383 8811 	msr	BASEPRI, r3
 800620a:	f3bf 8f6f 	isb	sy
 800620e:	f3bf 8f4f 	dsb	sy
 8006212:	60fb      	str	r3, [r7, #12]
}
 8006214:	bf00      	nop
 8006216:	bf00      	nop
 8006218:	e7fd      	b.n	8006216 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	3318      	adds	r3, #24
 800621e:	4618      	mov	r0, r3
 8006220:	f7fe fd48 	bl	8004cb4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006224:	4b1d      	ldr	r3, [pc, #116]	@ (800629c <xTaskRemoveFromEventList+0xb0>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d11d      	bne.n	8006268 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	3304      	adds	r3, #4
 8006230:	4618      	mov	r0, r3
 8006232:	f7fe fd3f 	bl	8004cb4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800623a:	4b19      	ldr	r3, [pc, #100]	@ (80062a0 <xTaskRemoveFromEventList+0xb4>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	429a      	cmp	r2, r3
 8006240:	d903      	bls.n	800624a <xTaskRemoveFromEventList+0x5e>
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006246:	4a16      	ldr	r2, [pc, #88]	@ (80062a0 <xTaskRemoveFromEventList+0xb4>)
 8006248:	6013      	str	r3, [r2, #0]
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800624e:	4613      	mov	r3, r2
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	4413      	add	r3, r2
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	4a13      	ldr	r2, [pc, #76]	@ (80062a4 <xTaskRemoveFromEventList+0xb8>)
 8006258:	441a      	add	r2, r3
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	3304      	adds	r3, #4
 800625e:	4619      	mov	r1, r3
 8006260:	4610      	mov	r0, r2
 8006262:	f7fe fcca 	bl	8004bfa <vListInsertEnd>
 8006266:	e005      	b.n	8006274 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	3318      	adds	r3, #24
 800626c:	4619      	mov	r1, r3
 800626e:	480e      	ldr	r0, [pc, #56]	@ (80062a8 <xTaskRemoveFromEventList+0xbc>)
 8006270:	f7fe fcc3 	bl	8004bfa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006278:	4b0c      	ldr	r3, [pc, #48]	@ (80062ac <xTaskRemoveFromEventList+0xc0>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800627e:	429a      	cmp	r2, r3
 8006280:	d905      	bls.n	800628e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006282:	2301      	movs	r3, #1
 8006284:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006286:	4b0a      	ldr	r3, [pc, #40]	@ (80062b0 <xTaskRemoveFromEventList+0xc4>)
 8006288:	2201      	movs	r2, #1
 800628a:	601a      	str	r2, [r3, #0]
 800628c:	e001      	b.n	8006292 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800628e:	2300      	movs	r3, #0
 8006290:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006292:	697b      	ldr	r3, [r7, #20]
}
 8006294:	4618      	mov	r0, r3
 8006296:	3718      	adds	r7, #24
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}
 800629c:	20000e7c 	.word	0x20000e7c
 80062a0:	20000e5c 	.word	0x20000e5c
 80062a4:	20000984 	.word	0x20000984
 80062a8:	20000e14 	.word	0x20000e14
 80062ac:	20000980 	.word	0x20000980
 80062b0:	20000e68 	.word	0x20000e68

080062b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80062bc:	4b06      	ldr	r3, [pc, #24]	@ (80062d8 <vTaskInternalSetTimeOutState+0x24>)
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80062c4:	4b05      	ldr	r3, [pc, #20]	@ (80062dc <vTaskInternalSetTimeOutState+0x28>)
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	605a      	str	r2, [r3, #4]
}
 80062cc:	bf00      	nop
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr
 80062d8:	20000e6c 	.word	0x20000e6c
 80062dc:	20000e58 	.word	0x20000e58

080062e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b088      	sub	sp, #32
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d10b      	bne.n	8006308 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80062f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062f4:	f383 8811 	msr	BASEPRI, r3
 80062f8:	f3bf 8f6f 	isb	sy
 80062fc:	f3bf 8f4f 	dsb	sy
 8006300:	613b      	str	r3, [r7, #16]
}
 8006302:	bf00      	nop
 8006304:	bf00      	nop
 8006306:	e7fd      	b.n	8006304 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d10b      	bne.n	8006326 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800630e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006312:	f383 8811 	msr	BASEPRI, r3
 8006316:	f3bf 8f6f 	isb	sy
 800631a:	f3bf 8f4f 	dsb	sy
 800631e:	60fb      	str	r3, [r7, #12]
}
 8006320:	bf00      	nop
 8006322:	bf00      	nop
 8006324:	e7fd      	b.n	8006322 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006326:	f001 f91f 	bl	8007568 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800632a:	4b1d      	ldr	r3, [pc, #116]	@ (80063a0 <xTaskCheckForTimeOut+0xc0>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	69ba      	ldr	r2, [r7, #24]
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006342:	d102      	bne.n	800634a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006344:	2300      	movs	r3, #0
 8006346:	61fb      	str	r3, [r7, #28]
 8006348:	e023      	b.n	8006392 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	4b15      	ldr	r3, [pc, #84]	@ (80063a4 <xTaskCheckForTimeOut+0xc4>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	429a      	cmp	r2, r3
 8006354:	d007      	beq.n	8006366 <xTaskCheckForTimeOut+0x86>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	69ba      	ldr	r2, [r7, #24]
 800635c:	429a      	cmp	r2, r3
 800635e:	d302      	bcc.n	8006366 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006360:	2301      	movs	r3, #1
 8006362:	61fb      	str	r3, [r7, #28]
 8006364:	e015      	b.n	8006392 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	429a      	cmp	r2, r3
 800636e:	d20b      	bcs.n	8006388 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	1ad2      	subs	r2, r2, r3
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f7ff ff99 	bl	80062b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006382:	2300      	movs	r3, #0
 8006384:	61fb      	str	r3, [r7, #28]
 8006386:	e004      	b.n	8006392 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	2200      	movs	r2, #0
 800638c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800638e:	2301      	movs	r3, #1
 8006390:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006392:	f001 f91b 	bl	80075cc <vPortExitCritical>

	return xReturn;
 8006396:	69fb      	ldr	r3, [r7, #28]
}
 8006398:	4618      	mov	r0, r3
 800639a:	3720      	adds	r7, #32
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	20000e58 	.word	0x20000e58
 80063a4:	20000e6c 	.word	0x20000e6c

080063a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80063a8:	b480      	push	{r7}
 80063aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80063ac:	4b03      	ldr	r3, [pc, #12]	@ (80063bc <vTaskMissedYield+0x14>)
 80063ae:	2201      	movs	r2, #1
 80063b0:	601a      	str	r2, [r3, #0]
}
 80063b2:	bf00      	nop
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr
 80063bc:	20000e68 	.word	0x20000e68

080063c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80063c8:	f000 f852 	bl	8006470 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80063cc:	4b06      	ldr	r3, [pc, #24]	@ (80063e8 <prvIdleTask+0x28>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d9f9      	bls.n	80063c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80063d4:	4b05      	ldr	r3, [pc, #20]	@ (80063ec <prvIdleTask+0x2c>)
 80063d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063da:	601a      	str	r2, [r3, #0]
 80063dc:	f3bf 8f4f 	dsb	sy
 80063e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80063e4:	e7f0      	b.n	80063c8 <prvIdleTask+0x8>
 80063e6:	bf00      	nop
 80063e8:	20000984 	.word	0x20000984
 80063ec:	e000ed04 	.word	0xe000ed04

080063f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80063f6:	2300      	movs	r3, #0
 80063f8:	607b      	str	r3, [r7, #4]
 80063fa:	e00c      	b.n	8006416 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	4613      	mov	r3, r2
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	4413      	add	r3, r2
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	4a12      	ldr	r2, [pc, #72]	@ (8006450 <prvInitialiseTaskLists+0x60>)
 8006408:	4413      	add	r3, r2
 800640a:	4618      	mov	r0, r3
 800640c:	f7fe fbc8 	bl	8004ba0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	3301      	adds	r3, #1
 8006414:	607b      	str	r3, [r7, #4]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2b37      	cmp	r3, #55	@ 0x37
 800641a:	d9ef      	bls.n	80063fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800641c:	480d      	ldr	r0, [pc, #52]	@ (8006454 <prvInitialiseTaskLists+0x64>)
 800641e:	f7fe fbbf 	bl	8004ba0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006422:	480d      	ldr	r0, [pc, #52]	@ (8006458 <prvInitialiseTaskLists+0x68>)
 8006424:	f7fe fbbc 	bl	8004ba0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006428:	480c      	ldr	r0, [pc, #48]	@ (800645c <prvInitialiseTaskLists+0x6c>)
 800642a:	f7fe fbb9 	bl	8004ba0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800642e:	480c      	ldr	r0, [pc, #48]	@ (8006460 <prvInitialiseTaskLists+0x70>)
 8006430:	f7fe fbb6 	bl	8004ba0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006434:	480b      	ldr	r0, [pc, #44]	@ (8006464 <prvInitialiseTaskLists+0x74>)
 8006436:	f7fe fbb3 	bl	8004ba0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800643a:	4b0b      	ldr	r3, [pc, #44]	@ (8006468 <prvInitialiseTaskLists+0x78>)
 800643c:	4a05      	ldr	r2, [pc, #20]	@ (8006454 <prvInitialiseTaskLists+0x64>)
 800643e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006440:	4b0a      	ldr	r3, [pc, #40]	@ (800646c <prvInitialiseTaskLists+0x7c>)
 8006442:	4a05      	ldr	r2, [pc, #20]	@ (8006458 <prvInitialiseTaskLists+0x68>)
 8006444:	601a      	str	r2, [r3, #0]
}
 8006446:	bf00      	nop
 8006448:	3708      	adds	r7, #8
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	20000984 	.word	0x20000984
 8006454:	20000de4 	.word	0x20000de4
 8006458:	20000df8 	.word	0x20000df8
 800645c:	20000e14 	.word	0x20000e14
 8006460:	20000e28 	.word	0x20000e28
 8006464:	20000e40 	.word	0x20000e40
 8006468:	20000e0c 	.word	0x20000e0c
 800646c:	20000e10 	.word	0x20000e10

08006470 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006476:	e019      	b.n	80064ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006478:	f001 f876 	bl	8007568 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800647c:	4b10      	ldr	r3, [pc, #64]	@ (80064c0 <prvCheckTasksWaitingTermination+0x50>)
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	3304      	adds	r3, #4
 8006488:	4618      	mov	r0, r3
 800648a:	f7fe fc13 	bl	8004cb4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800648e:	4b0d      	ldr	r3, [pc, #52]	@ (80064c4 <prvCheckTasksWaitingTermination+0x54>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	3b01      	subs	r3, #1
 8006494:	4a0b      	ldr	r2, [pc, #44]	@ (80064c4 <prvCheckTasksWaitingTermination+0x54>)
 8006496:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006498:	4b0b      	ldr	r3, [pc, #44]	@ (80064c8 <prvCheckTasksWaitingTermination+0x58>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	3b01      	subs	r3, #1
 800649e:	4a0a      	ldr	r2, [pc, #40]	@ (80064c8 <prvCheckTasksWaitingTermination+0x58>)
 80064a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80064a2:	f001 f893 	bl	80075cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 f810 	bl	80064cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80064ac:	4b06      	ldr	r3, [pc, #24]	@ (80064c8 <prvCheckTasksWaitingTermination+0x58>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1e1      	bne.n	8006478 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80064b4:	bf00      	nop
 80064b6:	bf00      	nop
 80064b8:	3708      	adds	r7, #8
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	20000e28 	.word	0x20000e28
 80064c4:	20000e54 	.word	0x20000e54
 80064c8:	20000e3c 	.word	0x20000e3c

080064cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	3354      	adds	r3, #84	@ 0x54
 80064d8:	4618      	mov	r0, r3
 80064da:	f001 fb7f 	bl	8007bdc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d108      	bne.n	80064fa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ec:	4618      	mov	r0, r3
 80064ee:	f001 fa2b 	bl	8007948 <vPortFree>
				vPortFree( pxTCB );
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f001 fa28 	bl	8007948 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80064f8:	e019      	b.n	800652e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006500:	2b01      	cmp	r3, #1
 8006502:	d103      	bne.n	800650c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f001 fa1f 	bl	8007948 <vPortFree>
	}
 800650a:	e010      	b.n	800652e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006512:	2b02      	cmp	r3, #2
 8006514:	d00b      	beq.n	800652e <prvDeleteTCB+0x62>
	__asm volatile
 8006516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800651a:	f383 8811 	msr	BASEPRI, r3
 800651e:	f3bf 8f6f 	isb	sy
 8006522:	f3bf 8f4f 	dsb	sy
 8006526:	60fb      	str	r3, [r7, #12]
}
 8006528:	bf00      	nop
 800652a:	bf00      	nop
 800652c:	e7fd      	b.n	800652a <prvDeleteTCB+0x5e>
	}
 800652e:	bf00      	nop
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
	...

08006538 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800653e:	4b0c      	ldr	r3, [pc, #48]	@ (8006570 <prvResetNextTaskUnblockTime+0x38>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d104      	bne.n	8006552 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006548:	4b0a      	ldr	r3, [pc, #40]	@ (8006574 <prvResetNextTaskUnblockTime+0x3c>)
 800654a:	f04f 32ff 	mov.w	r2, #4294967295
 800654e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006550:	e008      	b.n	8006564 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006552:	4b07      	ldr	r3, [pc, #28]	@ (8006570 <prvResetNextTaskUnblockTime+0x38>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	4a04      	ldr	r2, [pc, #16]	@ (8006574 <prvResetNextTaskUnblockTime+0x3c>)
 8006562:	6013      	str	r3, [r2, #0]
}
 8006564:	bf00      	nop
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr
 8006570:	20000e0c 	.word	0x20000e0c
 8006574:	20000e74 	.word	0x20000e74

08006578 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800657e:	4b0b      	ldr	r3, [pc, #44]	@ (80065ac <xTaskGetSchedulerState+0x34>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d102      	bne.n	800658c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006586:	2301      	movs	r3, #1
 8006588:	607b      	str	r3, [r7, #4]
 800658a:	e008      	b.n	800659e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800658c:	4b08      	ldr	r3, [pc, #32]	@ (80065b0 <xTaskGetSchedulerState+0x38>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d102      	bne.n	800659a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006594:	2302      	movs	r3, #2
 8006596:	607b      	str	r3, [r7, #4]
 8006598:	e001      	b.n	800659e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800659a:	2300      	movs	r3, #0
 800659c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800659e:	687b      	ldr	r3, [r7, #4]
	}
 80065a0:	4618      	mov	r0, r3
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr
 80065ac:	20000e60 	.word	0x20000e60
 80065b0:	20000e7c 	.word	0x20000e7c

080065b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b086      	sub	sp, #24
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80065c0:	2300      	movs	r3, #0
 80065c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d058      	beq.n	800667c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80065ca:	4b2f      	ldr	r3, [pc, #188]	@ (8006688 <xTaskPriorityDisinherit+0xd4>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	693a      	ldr	r2, [r7, #16]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d00b      	beq.n	80065ec <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80065d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065d8:	f383 8811 	msr	BASEPRI, r3
 80065dc:	f3bf 8f6f 	isb	sy
 80065e0:	f3bf 8f4f 	dsb	sy
 80065e4:	60fb      	str	r3, [r7, #12]
}
 80065e6:	bf00      	nop
 80065e8:	bf00      	nop
 80065ea:	e7fd      	b.n	80065e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d10b      	bne.n	800660c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80065f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f8:	f383 8811 	msr	BASEPRI, r3
 80065fc:	f3bf 8f6f 	isb	sy
 8006600:	f3bf 8f4f 	dsb	sy
 8006604:	60bb      	str	r3, [r7, #8]
}
 8006606:	bf00      	nop
 8006608:	bf00      	nop
 800660a:	e7fd      	b.n	8006608 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006610:	1e5a      	subs	r2, r3, #1
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800661e:	429a      	cmp	r2, r3
 8006620:	d02c      	beq.n	800667c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006626:	2b00      	cmp	r3, #0
 8006628:	d128      	bne.n	800667c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	3304      	adds	r3, #4
 800662e:	4618      	mov	r0, r3
 8006630:	f7fe fb40 	bl	8004cb4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006640:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800664c:	4b0f      	ldr	r3, [pc, #60]	@ (800668c <xTaskPriorityDisinherit+0xd8>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	429a      	cmp	r2, r3
 8006652:	d903      	bls.n	800665c <xTaskPriorityDisinherit+0xa8>
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006658:	4a0c      	ldr	r2, [pc, #48]	@ (800668c <xTaskPriorityDisinherit+0xd8>)
 800665a:	6013      	str	r3, [r2, #0]
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006660:	4613      	mov	r3, r2
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	4413      	add	r3, r2
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	4a09      	ldr	r2, [pc, #36]	@ (8006690 <xTaskPriorityDisinherit+0xdc>)
 800666a:	441a      	add	r2, r3
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	3304      	adds	r3, #4
 8006670:	4619      	mov	r1, r3
 8006672:	4610      	mov	r0, r2
 8006674:	f7fe fac1 	bl	8004bfa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006678:	2301      	movs	r3, #1
 800667a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800667c:	697b      	ldr	r3, [r7, #20]
	}
 800667e:	4618      	mov	r0, r3
 8006680:	3718      	adds	r7, #24
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	20000980 	.word	0x20000980
 800668c:	20000e5c 	.word	0x20000e5c
 8006690:	20000984 	.word	0x20000984

08006694 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8006694:	b580      	push	{r7, lr}
 8006696:	b086      	sub	sp, #24
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	607a      	str	r2, [r7, #4]
 80066a0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80066a2:	f000 ff61 	bl	8007568 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80066a6:	4b29      	ldr	r3, [pc, #164]	@ (800674c <xTaskNotifyWait+0xb8>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	2b02      	cmp	r3, #2
 80066b2:	d01c      	beq.n	80066ee <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80066b4:	4b25      	ldr	r3, [pc, #148]	@ (800674c <xTaskNotifyWait+0xb8>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	43d2      	mvns	r2, r2
 80066c0:	400a      	ands	r2, r1
 80066c2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80066c6:	4b21      	ldr	r3, [pc, #132]	@ (800674c <xTaskNotifyWait+0xb8>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d00b      	beq.n	80066ee <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80066d6:	2101      	movs	r1, #1
 80066d8:	6838      	ldr	r0, [r7, #0]
 80066da:	f000 f9e3 	bl	8006aa4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80066de:	4b1c      	ldr	r3, [pc, #112]	@ (8006750 <xTaskNotifyWait+0xbc>)
 80066e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066e4:	601a      	str	r2, [r3, #0]
 80066e6:	f3bf 8f4f 	dsb	sy
 80066ea:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80066ee:	f000 ff6d 	bl	80075cc <vPortExitCritical>

		taskENTER_CRITICAL();
 80066f2:	f000 ff39 	bl	8007568 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d005      	beq.n	8006708 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80066fc:	4b13      	ldr	r3, [pc, #76]	@ (800674c <xTaskNotifyWait+0xb8>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006708:	4b10      	ldr	r3, [pc, #64]	@ (800674c <xTaskNotifyWait+0xb8>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8006710:	b2db      	uxtb	r3, r3
 8006712:	2b02      	cmp	r3, #2
 8006714:	d002      	beq.n	800671c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8006716:	2300      	movs	r3, #0
 8006718:	617b      	str	r3, [r7, #20]
 800671a:	e00a      	b.n	8006732 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800671c:	4b0b      	ldr	r3, [pc, #44]	@ (800674c <xTaskNotifyWait+0xb8>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8006724:	68ba      	ldr	r2, [r7, #8]
 8006726:	43d2      	mvns	r2, r2
 8006728:	400a      	ands	r2, r1
 800672a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 800672e:	2301      	movs	r3, #1
 8006730:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006732:	4b06      	ldr	r3, [pc, #24]	@ (800674c <xTaskNotifyWait+0xb8>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2200      	movs	r2, #0
 8006738:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800673c:	f000 ff46 	bl	80075cc <vPortExitCritical>

		return xReturn;
 8006740:	697b      	ldr	r3, [r7, #20]
	}
 8006742:	4618      	mov	r0, r3
 8006744:	3718      	adds	r7, #24
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	20000980 	.word	0x20000980
 8006750:	e000ed04 	.word	0xe000ed04

08006754 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8006754:	b580      	push	{r7, lr}
 8006756:	b08a      	sub	sp, #40	@ 0x28
 8006758:	af00      	add	r7, sp, #0
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	60b9      	str	r1, [r7, #8]
 800675e:	603b      	str	r3, [r7, #0]
 8006760:	4613      	mov	r3, r2
 8006762:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8006764:	2301      	movs	r3, #1
 8006766:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d10b      	bne.n	8006786 <xTaskGenericNotify+0x32>
	__asm volatile
 800676e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006772:	f383 8811 	msr	BASEPRI, r3
 8006776:	f3bf 8f6f 	isb	sy
 800677a:	f3bf 8f4f 	dsb	sy
 800677e:	61bb      	str	r3, [r7, #24]
}
 8006780:	bf00      	nop
 8006782:	bf00      	nop
 8006784:	e7fd      	b.n	8006782 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800678a:	f000 feed 	bl	8007568 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d004      	beq.n	800679e <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006794:	6a3b      	ldr	r3, [r7, #32]
 8006796:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800679e:	6a3b      	ldr	r3, [r7, #32]
 80067a0:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80067a4:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80067a6:	6a3b      	ldr	r3, [r7, #32]
 80067a8:	2202      	movs	r2, #2
 80067aa:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 80067ae:	79fb      	ldrb	r3, [r7, #7]
 80067b0:	2b04      	cmp	r3, #4
 80067b2:	d82e      	bhi.n	8006812 <xTaskGenericNotify+0xbe>
 80067b4:	a201      	add	r2, pc, #4	@ (adr r2, 80067bc <xTaskGenericNotify+0x68>)
 80067b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ba:	bf00      	nop
 80067bc:	08006837 	.word	0x08006837
 80067c0:	080067d1 	.word	0x080067d1
 80067c4:	080067e3 	.word	0x080067e3
 80067c8:	080067f3 	.word	0x080067f3
 80067cc:	080067fd 	.word	0x080067fd
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80067d0:	6a3b      	ldr	r3, [r7, #32]
 80067d2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	431a      	orrs	r2, r3
 80067da:	6a3b      	ldr	r3, [r7, #32]
 80067dc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80067e0:	e02c      	b.n	800683c <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80067e2:	6a3b      	ldr	r3, [r7, #32]
 80067e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80067e8:	1c5a      	adds	r2, r3, #1
 80067ea:	6a3b      	ldr	r3, [r7, #32]
 80067ec:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80067f0:	e024      	b.n	800683c <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80067f2:	6a3b      	ldr	r3, [r7, #32]
 80067f4:	68ba      	ldr	r2, [r7, #8]
 80067f6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80067fa:	e01f      	b.n	800683c <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80067fc:	7ffb      	ldrb	r3, [r7, #31]
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d004      	beq.n	800680c <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8006802:	6a3b      	ldr	r3, [r7, #32]
 8006804:	68ba      	ldr	r2, [r7, #8]
 8006806:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800680a:	e017      	b.n	800683c <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800680c:	2300      	movs	r3, #0
 800680e:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8006810:	e014      	b.n	800683c <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8006812:	6a3b      	ldr	r3, [r7, #32]
 8006814:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800681c:	d00d      	beq.n	800683a <xTaskGenericNotify+0xe6>
	__asm volatile
 800681e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006822:	f383 8811 	msr	BASEPRI, r3
 8006826:	f3bf 8f6f 	isb	sy
 800682a:	f3bf 8f4f 	dsb	sy
 800682e:	617b      	str	r3, [r7, #20]
}
 8006830:	bf00      	nop
 8006832:	bf00      	nop
 8006834:	e7fd      	b.n	8006832 <xTaskGenericNotify+0xde>
					break;
 8006836:	bf00      	nop
 8006838:	e000      	b.n	800683c <xTaskGenericNotify+0xe8>

					break;
 800683a:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800683c:	7ffb      	ldrb	r3, [r7, #31]
 800683e:	2b01      	cmp	r3, #1
 8006840:	d13b      	bne.n	80068ba <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006842:	6a3b      	ldr	r3, [r7, #32]
 8006844:	3304      	adds	r3, #4
 8006846:	4618      	mov	r0, r3
 8006848:	f7fe fa34 	bl	8004cb4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800684c:	6a3b      	ldr	r3, [r7, #32]
 800684e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006850:	4b1d      	ldr	r3, [pc, #116]	@ (80068c8 <xTaskGenericNotify+0x174>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	429a      	cmp	r2, r3
 8006856:	d903      	bls.n	8006860 <xTaskGenericNotify+0x10c>
 8006858:	6a3b      	ldr	r3, [r7, #32]
 800685a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800685c:	4a1a      	ldr	r2, [pc, #104]	@ (80068c8 <xTaskGenericNotify+0x174>)
 800685e:	6013      	str	r3, [r2, #0]
 8006860:	6a3b      	ldr	r3, [r7, #32]
 8006862:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006864:	4613      	mov	r3, r2
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	4413      	add	r3, r2
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	4a17      	ldr	r2, [pc, #92]	@ (80068cc <xTaskGenericNotify+0x178>)
 800686e:	441a      	add	r2, r3
 8006870:	6a3b      	ldr	r3, [r7, #32]
 8006872:	3304      	adds	r3, #4
 8006874:	4619      	mov	r1, r3
 8006876:	4610      	mov	r0, r2
 8006878:	f7fe f9bf 	bl	8004bfa <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800687c:	6a3b      	ldr	r3, [r7, #32]
 800687e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006880:	2b00      	cmp	r3, #0
 8006882:	d00b      	beq.n	800689c <xTaskGenericNotify+0x148>
	__asm volatile
 8006884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006888:	f383 8811 	msr	BASEPRI, r3
 800688c:	f3bf 8f6f 	isb	sy
 8006890:	f3bf 8f4f 	dsb	sy
 8006894:	613b      	str	r3, [r7, #16]
}
 8006896:	bf00      	nop
 8006898:	bf00      	nop
 800689a:	e7fd      	b.n	8006898 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800689c:	6a3b      	ldr	r3, [r7, #32]
 800689e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068a0:	4b0b      	ldr	r3, [pc, #44]	@ (80068d0 <xTaskGenericNotify+0x17c>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d907      	bls.n	80068ba <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80068aa:	4b0a      	ldr	r3, [pc, #40]	@ (80068d4 <xTaskGenericNotify+0x180>)
 80068ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068b0:	601a      	str	r2, [r3, #0]
 80068b2:	f3bf 8f4f 	dsb	sy
 80068b6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80068ba:	f000 fe87 	bl	80075cc <vPortExitCritical>

		return xReturn;
 80068be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3728      	adds	r7, #40	@ 0x28
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	20000e5c 	.word	0x20000e5c
 80068cc:	20000984 	.word	0x20000984
 80068d0:	20000980 	.word	0x20000980
 80068d4:	e000ed04 	.word	0xe000ed04

080068d8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b08e      	sub	sp, #56	@ 0x38
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	603b      	str	r3, [r7, #0]
 80068e4:	4613      	mov	r3, r2
 80068e6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80068e8:	2301      	movs	r3, #1
 80068ea:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d10b      	bne.n	800690a <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 80068f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068f6:	f383 8811 	msr	BASEPRI, r3
 80068fa:	f3bf 8f6f 	isb	sy
 80068fe:	f3bf 8f4f 	dsb	sy
 8006902:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006904:	bf00      	nop
 8006906:	bf00      	nop
 8006908:	e7fd      	b.n	8006906 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800690a:	f000 ff0d 	bl	8007728 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8006912:	f3ef 8211 	mrs	r2, BASEPRI
 8006916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800691a:	f383 8811 	msr	BASEPRI, r3
 800691e:	f3bf 8f6f 	isb	sy
 8006922:	f3bf 8f4f 	dsb	sy
 8006926:	623a      	str	r2, [r7, #32]
 8006928:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800692a:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800692c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d004      	beq.n	800693e <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006936:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800693e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006940:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8006944:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800694a:	2202      	movs	r2, #2
 800694c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8006950:	79fb      	ldrb	r3, [r7, #7]
 8006952:	2b04      	cmp	r3, #4
 8006954:	d82e      	bhi.n	80069b4 <xTaskGenericNotifyFromISR+0xdc>
 8006956:	a201      	add	r2, pc, #4	@ (adr r2, 800695c <xTaskGenericNotifyFromISR+0x84>)
 8006958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800695c:	080069d9 	.word	0x080069d9
 8006960:	08006971 	.word	0x08006971
 8006964:	08006983 	.word	0x08006983
 8006968:	08006993 	.word	0x08006993
 800696c:	0800699d 	.word	0x0800699d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006972:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	431a      	orrs	r2, r3
 800697a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800697c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8006980:	e02d      	b.n	80069de <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8006982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006984:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006988:	1c5a      	adds	r2, r3, #1
 800698a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800698c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8006990:	e025      	b.n	80069de <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8006992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006994:	68ba      	ldr	r2, [r7, #8]
 8006996:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800699a:	e020      	b.n	80069de <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800699c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80069a0:	2b02      	cmp	r3, #2
 80069a2:	d004      	beq.n	80069ae <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80069a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a6:	68ba      	ldr	r2, [r7, #8]
 80069a8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80069ac:	e017      	b.n	80069de <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 80069ae:	2300      	movs	r3, #0
 80069b0:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 80069b2:	e014      	b.n	80069de <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80069b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80069ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069be:	d00d      	beq.n	80069dc <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 80069c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c4:	f383 8811 	msr	BASEPRI, r3
 80069c8:	f3bf 8f6f 	isb	sy
 80069cc:	f3bf 8f4f 	dsb	sy
 80069d0:	61bb      	str	r3, [r7, #24]
}
 80069d2:	bf00      	nop
 80069d4:	bf00      	nop
 80069d6:	e7fd      	b.n	80069d4 <xTaskGenericNotifyFromISR+0xfc>
					break;
 80069d8:	bf00      	nop
 80069da:	e000      	b.n	80069de <xTaskGenericNotifyFromISR+0x106>
					break;
 80069dc:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80069de:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d147      	bne.n	8006a76 <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80069e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00b      	beq.n	8006a06 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 80069ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069f2:	f383 8811 	msr	BASEPRI, r3
 80069f6:	f3bf 8f6f 	isb	sy
 80069fa:	f3bf 8f4f 	dsb	sy
 80069fe:	617b      	str	r3, [r7, #20]
}
 8006a00:	bf00      	nop
 8006a02:	bf00      	nop
 8006a04:	e7fd      	b.n	8006a02 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a06:	4b21      	ldr	r3, [pc, #132]	@ (8006a8c <xTaskGenericNotifyFromISR+0x1b4>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d11d      	bne.n	8006a4a <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a10:	3304      	adds	r3, #4
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7fe f94e 	bl	8004cb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a1c:	4b1c      	ldr	r3, [pc, #112]	@ (8006a90 <xTaskGenericNotifyFromISR+0x1b8>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d903      	bls.n	8006a2c <xTaskGenericNotifyFromISR+0x154>
 8006a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a28:	4a19      	ldr	r2, [pc, #100]	@ (8006a90 <xTaskGenericNotifyFromISR+0x1b8>)
 8006a2a:	6013      	str	r3, [r2, #0]
 8006a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a30:	4613      	mov	r3, r2
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	4413      	add	r3, r2
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	4a16      	ldr	r2, [pc, #88]	@ (8006a94 <xTaskGenericNotifyFromISR+0x1bc>)
 8006a3a:	441a      	add	r2, r3
 8006a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a3e:	3304      	adds	r3, #4
 8006a40:	4619      	mov	r1, r3
 8006a42:	4610      	mov	r0, r2
 8006a44:	f7fe f8d9 	bl	8004bfa <vListInsertEnd>
 8006a48:	e005      	b.n	8006a56 <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a4c:	3318      	adds	r3, #24
 8006a4e:	4619      	mov	r1, r3
 8006a50:	4811      	ldr	r0, [pc, #68]	@ (8006a98 <xTaskGenericNotifyFromISR+0x1c0>)
 8006a52:	f7fe f8d2 	bl	8004bfa <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a5a:	4b10      	ldr	r3, [pc, #64]	@ (8006a9c <xTaskGenericNotifyFromISR+0x1c4>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d908      	bls.n	8006a76 <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8006a64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d002      	beq.n	8006a70 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8006a6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8006a70:	4b0b      	ldr	r3, [pc, #44]	@ (8006aa0 <xTaskGenericNotifyFromISR+0x1c8>)
 8006a72:	2201      	movs	r2, #1
 8006a74:	601a      	str	r2, [r3, #0]
 8006a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a78:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	f383 8811 	msr	BASEPRI, r3
}
 8006a80:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8006a82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3738      	adds	r7, #56	@ 0x38
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}
 8006a8c:	20000e7c 	.word	0x20000e7c
 8006a90:	20000e5c 	.word	0x20000e5c
 8006a94:	20000984 	.word	0x20000984
 8006a98:	20000e14 	.word	0x20000e14
 8006a9c:	20000980 	.word	0x20000980
 8006aa0:	20000e68 	.word	0x20000e68

08006aa4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006aae:	4b21      	ldr	r3, [pc, #132]	@ (8006b34 <prvAddCurrentTaskToDelayedList+0x90>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ab4:	4b20      	ldr	r3, [pc, #128]	@ (8006b38 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	3304      	adds	r3, #4
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7fe f8fa 	bl	8004cb4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ac6:	d10a      	bne.n	8006ade <prvAddCurrentTaskToDelayedList+0x3a>
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d007      	beq.n	8006ade <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ace:	4b1a      	ldr	r3, [pc, #104]	@ (8006b38 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	3304      	adds	r3, #4
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	4819      	ldr	r0, [pc, #100]	@ (8006b3c <prvAddCurrentTaskToDelayedList+0x98>)
 8006ad8:	f7fe f88f 	bl	8004bfa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006adc:	e026      	b.n	8006b2c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006ae6:	4b14      	ldr	r3, [pc, #80]	@ (8006b38 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	68ba      	ldr	r2, [r7, #8]
 8006aec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006aee:	68ba      	ldr	r2, [r7, #8]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d209      	bcs.n	8006b0a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006af6:	4b12      	ldr	r3, [pc, #72]	@ (8006b40 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	4b0f      	ldr	r3, [pc, #60]	@ (8006b38 <prvAddCurrentTaskToDelayedList+0x94>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	3304      	adds	r3, #4
 8006b00:	4619      	mov	r1, r3
 8006b02:	4610      	mov	r0, r2
 8006b04:	f7fe f89d 	bl	8004c42 <vListInsert>
}
 8006b08:	e010      	b.n	8006b2c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8006b44 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8006b38 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	3304      	adds	r3, #4
 8006b14:	4619      	mov	r1, r3
 8006b16:	4610      	mov	r0, r2
 8006b18:	f7fe f893 	bl	8004c42 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8006b48 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68ba      	ldr	r2, [r7, #8]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d202      	bcs.n	8006b2c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006b26:	4a08      	ldr	r2, [pc, #32]	@ (8006b48 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	6013      	str	r3, [r2, #0]
}
 8006b2c:	bf00      	nop
 8006b2e:	3710      	adds	r7, #16
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	20000e58 	.word	0x20000e58
 8006b38:	20000980 	.word	0x20000980
 8006b3c:	20000e40 	.word	0x20000e40
 8006b40:	20000e10 	.word	0x20000e10
 8006b44:	20000e0c 	.word	0x20000e0c
 8006b48:	20000e74 	.word	0x20000e74

08006b4c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b08a      	sub	sp, #40	@ 0x28
 8006b50:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006b52:	2300      	movs	r3, #0
 8006b54:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006b56:	f000 fb71 	bl	800723c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006b5a:	4b1d      	ldr	r3, [pc, #116]	@ (8006bd0 <xTimerCreateTimerTask+0x84>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d021      	beq.n	8006ba6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006b62:	2300      	movs	r3, #0
 8006b64:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006b66:	2300      	movs	r3, #0
 8006b68:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006b6a:	1d3a      	adds	r2, r7, #4
 8006b6c:	f107 0108 	add.w	r1, r7, #8
 8006b70:	f107 030c 	add.w	r3, r7, #12
 8006b74:	4618      	mov	r0, r3
 8006b76:	f7fd fff9 	bl	8004b6c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006b7a:	6879      	ldr	r1, [r7, #4]
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	68fa      	ldr	r2, [r7, #12]
 8006b80:	9202      	str	r2, [sp, #8]
 8006b82:	9301      	str	r3, [sp, #4]
 8006b84:	2302      	movs	r3, #2
 8006b86:	9300      	str	r3, [sp, #0]
 8006b88:	2300      	movs	r3, #0
 8006b8a:	460a      	mov	r2, r1
 8006b8c:	4911      	ldr	r1, [pc, #68]	@ (8006bd4 <xTimerCreateTimerTask+0x88>)
 8006b8e:	4812      	ldr	r0, [pc, #72]	@ (8006bd8 <xTimerCreateTimerTask+0x8c>)
 8006b90:	f7fe fe9a 	bl	80058c8 <xTaskCreateStatic>
 8006b94:	4603      	mov	r3, r0
 8006b96:	4a11      	ldr	r2, [pc, #68]	@ (8006bdc <xTimerCreateTimerTask+0x90>)
 8006b98:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006b9a:	4b10      	ldr	r3, [pc, #64]	@ (8006bdc <xTimerCreateTimerTask+0x90>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d001      	beq.n	8006ba6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d10b      	bne.n	8006bc4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bb0:	f383 8811 	msr	BASEPRI, r3
 8006bb4:	f3bf 8f6f 	isb	sy
 8006bb8:	f3bf 8f4f 	dsb	sy
 8006bbc:	613b      	str	r3, [r7, #16]
}
 8006bbe:	bf00      	nop
 8006bc0:	bf00      	nop
 8006bc2:	e7fd      	b.n	8006bc0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006bc4:	697b      	ldr	r3, [r7, #20]
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3718      	adds	r7, #24
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	20000eb0 	.word	0x20000eb0
 8006bd4:	0800896c 	.word	0x0800896c
 8006bd8:	08006dd5 	.word	0x08006dd5
 8006bdc:	20000eb4 	.word	0x20000eb4

08006be0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b088      	sub	sp, #32
 8006be4:	af02      	add	r7, sp, #8
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]
 8006bec:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006bee:	202c      	movs	r0, #44	@ 0x2c
 8006bf0:	f000 fddc 	bl	80077ac <pvPortMalloc>
 8006bf4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d00d      	beq.n	8006c18 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	9301      	str	r3, [sp, #4]
 8006c08:	6a3b      	ldr	r3, [r7, #32]
 8006c0a:	9300      	str	r3, [sp, #0]
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	68b9      	ldr	r1, [r7, #8]
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f000 f805 	bl	8006c22 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006c18:	697b      	ldr	r3, [r7, #20]
	}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3718      	adds	r7, #24
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}

08006c22 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b086      	sub	sp, #24
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	60f8      	str	r0, [r7, #12]
 8006c2a:	60b9      	str	r1, [r7, #8]
 8006c2c:	607a      	str	r2, [r7, #4]
 8006c2e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d10b      	bne.n	8006c4e <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8006c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c3a:	f383 8811 	msr	BASEPRI, r3
 8006c3e:	f3bf 8f6f 	isb	sy
 8006c42:	f3bf 8f4f 	dsb	sy
 8006c46:	617b      	str	r3, [r7, #20]
}
 8006c48:	bf00      	nop
 8006c4a:	bf00      	nop
 8006c4c:	e7fd      	b.n	8006c4a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8006c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d01e      	beq.n	8006c92 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8006c54:	f000 faf2 	bl	800723c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8006c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c60:	68ba      	ldr	r2, [r7, #8]
 8006c62:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8006c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c66:	683a      	ldr	r2, [r7, #0]
 8006c68:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c6c:	6a3a      	ldr	r2, [r7, #32]
 8006c6e:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c72:	3304      	adds	r3, #4
 8006c74:	4618      	mov	r0, r3
 8006c76:	f7fd ffb3 	bl	8004be0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d008      	beq.n	8006c92 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c82:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c86:	f043 0304 	orr.w	r3, r3, #4
 8006c8a:	b2da      	uxtb	r2, r3
 8006c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c8e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8006c92:	bf00      	nop
 8006c94:	3718      	adds	r7, #24
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
	...

08006c9c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b08a      	sub	sp, #40	@ 0x28
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	607a      	str	r2, [r7, #4]
 8006ca8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006caa:	2300      	movs	r3, #0
 8006cac:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d10b      	bne.n	8006ccc <xTimerGenericCommand+0x30>
	__asm volatile
 8006cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cb8:	f383 8811 	msr	BASEPRI, r3
 8006cbc:	f3bf 8f6f 	isb	sy
 8006cc0:	f3bf 8f4f 	dsb	sy
 8006cc4:	623b      	str	r3, [r7, #32]
}
 8006cc6:	bf00      	nop
 8006cc8:	bf00      	nop
 8006cca:	e7fd      	b.n	8006cc8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006ccc:	4b19      	ldr	r3, [pc, #100]	@ (8006d34 <xTimerGenericCommand+0x98>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d02a      	beq.n	8006d2a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	2b05      	cmp	r3, #5
 8006ce4:	dc18      	bgt.n	8006d18 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006ce6:	f7ff fc47 	bl	8006578 <xTaskGetSchedulerState>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d109      	bne.n	8006d04 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006cf0:	4b10      	ldr	r3, [pc, #64]	@ (8006d34 <xTimerGenericCommand+0x98>)
 8006cf2:	6818      	ldr	r0, [r3, #0]
 8006cf4:	f107 0110 	add.w	r1, r7, #16
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cfc:	f7fe f94a 	bl	8004f94 <xQueueGenericSend>
 8006d00:	6278      	str	r0, [r7, #36]	@ 0x24
 8006d02:	e012      	b.n	8006d2a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006d04:	4b0b      	ldr	r3, [pc, #44]	@ (8006d34 <xTimerGenericCommand+0x98>)
 8006d06:	6818      	ldr	r0, [r3, #0]
 8006d08:	f107 0110 	add.w	r1, r7, #16
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f7fe f940 	bl	8004f94 <xQueueGenericSend>
 8006d14:	6278      	str	r0, [r7, #36]	@ 0x24
 8006d16:	e008      	b.n	8006d2a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006d18:	4b06      	ldr	r3, [pc, #24]	@ (8006d34 <xTimerGenericCommand+0x98>)
 8006d1a:	6818      	ldr	r0, [r3, #0]
 8006d1c:	f107 0110 	add.w	r1, r7, #16
 8006d20:	2300      	movs	r3, #0
 8006d22:	683a      	ldr	r2, [r7, #0]
 8006d24:	f7fe fa38 	bl	8005198 <xQueueGenericSendFromISR>
 8006d28:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3728      	adds	r7, #40	@ 0x28
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}
 8006d34:	20000eb0 	.word	0x20000eb0

08006d38 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b088      	sub	sp, #32
 8006d3c:	af02      	add	r7, sp, #8
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d42:	4b23      	ldr	r3, [pc, #140]	@ (8006dd0 <prvProcessExpiredTimer+0x98>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	68db      	ldr	r3, [r3, #12]
 8006d4a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	3304      	adds	r3, #4
 8006d50:	4618      	mov	r0, r3
 8006d52:	f7fd ffaf 	bl	8004cb4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d5c:	f003 0304 	and.w	r3, r3, #4
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d023      	beq.n	8006dac <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	699a      	ldr	r2, [r3, #24]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	18d1      	adds	r1, r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	683a      	ldr	r2, [r7, #0]
 8006d70:	6978      	ldr	r0, [r7, #20]
 8006d72:	f000 f8d5 	bl	8006f20 <prvInsertTimerInActiveList>
 8006d76:	4603      	mov	r3, r0
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d020      	beq.n	8006dbe <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	9300      	str	r3, [sp, #0]
 8006d80:	2300      	movs	r3, #0
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	2100      	movs	r1, #0
 8006d86:	6978      	ldr	r0, [r7, #20]
 8006d88:	f7ff ff88 	bl	8006c9c <xTimerGenericCommand>
 8006d8c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d114      	bne.n	8006dbe <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d98:	f383 8811 	msr	BASEPRI, r3
 8006d9c:	f3bf 8f6f 	isb	sy
 8006da0:	f3bf 8f4f 	dsb	sy
 8006da4:	60fb      	str	r3, [r7, #12]
}
 8006da6:	bf00      	nop
 8006da8:	bf00      	nop
 8006daa:	e7fd      	b.n	8006da8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006db2:	f023 0301 	bic.w	r3, r3, #1
 8006db6:	b2da      	uxtb	r2, r3
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	6a1b      	ldr	r3, [r3, #32]
 8006dc2:	6978      	ldr	r0, [r7, #20]
 8006dc4:	4798      	blx	r3
}
 8006dc6:	bf00      	nop
 8006dc8:	3718      	adds	r7, #24
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	20000ea8 	.word	0x20000ea8

08006dd4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ddc:	f107 0308 	add.w	r3, r7, #8
 8006de0:	4618      	mov	r0, r3
 8006de2:	f000 f859 	bl	8006e98 <prvGetNextExpireTime>
 8006de6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	4619      	mov	r1, r3
 8006dec:	68f8      	ldr	r0, [r7, #12]
 8006dee:	f000 f805 	bl	8006dfc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006df2:	f000 f8d7 	bl	8006fa4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006df6:	bf00      	nop
 8006df8:	e7f0      	b.n	8006ddc <prvTimerTask+0x8>
	...

08006dfc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006e06:	f7fe ffc3 	bl	8005d90 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e0a:	f107 0308 	add.w	r3, r7, #8
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f000 f866 	bl	8006ee0 <prvSampleTimeNow>
 8006e14:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d130      	bne.n	8006e7e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d10a      	bne.n	8006e38 <prvProcessTimerOrBlockTask+0x3c>
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d806      	bhi.n	8006e38 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006e2a:	f7fe ffbf 	bl	8005dac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006e2e:	68f9      	ldr	r1, [r7, #12]
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f7ff ff81 	bl	8006d38 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006e36:	e024      	b.n	8006e82 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d008      	beq.n	8006e50 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006e3e:	4b13      	ldr	r3, [pc, #76]	@ (8006e8c <prvProcessTimerOrBlockTask+0x90>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d101      	bne.n	8006e4c <prvProcessTimerOrBlockTask+0x50>
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e000      	b.n	8006e4e <prvProcessTimerOrBlockTask+0x52>
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006e50:	4b0f      	ldr	r3, [pc, #60]	@ (8006e90 <prvProcessTimerOrBlockTask+0x94>)
 8006e52:	6818      	ldr	r0, [r3, #0]
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	683a      	ldr	r2, [r7, #0]
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	f7fe fcff 	bl	8005860 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006e62:	f7fe ffa3 	bl	8005dac <xTaskResumeAll>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d10a      	bne.n	8006e82 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006e6c:	4b09      	ldr	r3, [pc, #36]	@ (8006e94 <prvProcessTimerOrBlockTask+0x98>)
 8006e6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e72:	601a      	str	r2, [r3, #0]
 8006e74:	f3bf 8f4f 	dsb	sy
 8006e78:	f3bf 8f6f 	isb	sy
}
 8006e7c:	e001      	b.n	8006e82 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006e7e:	f7fe ff95 	bl	8005dac <xTaskResumeAll>
}
 8006e82:	bf00      	nop
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	20000eac 	.word	0x20000eac
 8006e90:	20000eb0 	.word	0x20000eb0
 8006e94:	e000ed04 	.word	0xe000ed04

08006e98 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006ea0:	4b0e      	ldr	r3, [pc, #56]	@ (8006edc <prvGetNextExpireTime+0x44>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d101      	bne.n	8006eae <prvGetNextExpireTime+0x16>
 8006eaa:	2201      	movs	r2, #1
 8006eac:	e000      	b.n	8006eb0 <prvGetNextExpireTime+0x18>
 8006eae:	2200      	movs	r2, #0
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d105      	bne.n	8006ec8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ebc:	4b07      	ldr	r3, [pc, #28]	@ (8006edc <prvGetNextExpireTime+0x44>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	60fb      	str	r3, [r7, #12]
 8006ec6:	e001      	b.n	8006ecc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3714      	adds	r7, #20
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr
 8006eda:	bf00      	nop
 8006edc:	20000ea8 	.word	0x20000ea8

08006ee0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006ee8:	f7fe fffe 	bl	8005ee8 <xTaskGetTickCount>
 8006eec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006eee:	4b0b      	ldr	r3, [pc, #44]	@ (8006f1c <prvSampleTimeNow+0x3c>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68fa      	ldr	r2, [r7, #12]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d205      	bcs.n	8006f04 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006ef8:	f000 f93a 	bl	8007170 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	601a      	str	r2, [r3, #0]
 8006f02:	e002      	b.n	8006f0a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006f0a:	4a04      	ldr	r2, [pc, #16]	@ (8006f1c <prvSampleTimeNow+0x3c>)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006f10:	68fb      	ldr	r3, [r7, #12]
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3710      	adds	r7, #16
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	20000eb8 	.word	0x20000eb8

08006f20 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b086      	sub	sp, #24
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	607a      	str	r2, [r7, #4]
 8006f2c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	68ba      	ldr	r2, [r7, #8]
 8006f36:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	68fa      	ldr	r2, [r7, #12]
 8006f3c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006f3e:	68ba      	ldr	r2, [r7, #8]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d812      	bhi.n	8006f6c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	1ad2      	subs	r2, r2, r3
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	699b      	ldr	r3, [r3, #24]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d302      	bcc.n	8006f5a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006f54:	2301      	movs	r3, #1
 8006f56:	617b      	str	r3, [r7, #20]
 8006f58:	e01b      	b.n	8006f92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006f5a:	4b10      	ldr	r3, [pc, #64]	@ (8006f9c <prvInsertTimerInActiveList+0x7c>)
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	3304      	adds	r3, #4
 8006f62:	4619      	mov	r1, r3
 8006f64:	4610      	mov	r0, r2
 8006f66:	f7fd fe6c 	bl	8004c42 <vListInsert>
 8006f6a:	e012      	b.n	8006f92 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d206      	bcs.n	8006f82 <prvInsertTimerInActiveList+0x62>
 8006f74:	68ba      	ldr	r2, [r7, #8]
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d302      	bcc.n	8006f82 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	617b      	str	r3, [r7, #20]
 8006f80:	e007      	b.n	8006f92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f82:	4b07      	ldr	r3, [pc, #28]	@ (8006fa0 <prvInsertTimerInActiveList+0x80>)
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	3304      	adds	r3, #4
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	4610      	mov	r0, r2
 8006f8e:	f7fd fe58 	bl	8004c42 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006f92:	697b      	ldr	r3, [r7, #20]
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3718      	adds	r7, #24
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	20000eac 	.word	0x20000eac
 8006fa0:	20000ea8 	.word	0x20000ea8

08006fa4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b08e      	sub	sp, #56	@ 0x38
 8006fa8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006faa:	e0ce      	b.n	800714a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	da19      	bge.n	8006fe6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006fb2:	1d3b      	adds	r3, r7, #4
 8006fb4:	3304      	adds	r3, #4
 8006fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d10b      	bne.n	8006fd6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fc2:	f383 8811 	msr	BASEPRI, r3
 8006fc6:	f3bf 8f6f 	isb	sy
 8006fca:	f3bf 8f4f 	dsb	sy
 8006fce:	61fb      	str	r3, [r7, #28]
}
 8006fd0:	bf00      	nop
 8006fd2:	bf00      	nop
 8006fd4:	e7fd      	b.n	8006fd2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006fdc:	6850      	ldr	r0, [r2, #4]
 8006fde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006fe0:	6892      	ldr	r2, [r2, #8]
 8006fe2:	4611      	mov	r1, r2
 8006fe4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	f2c0 80ae 	blt.w	800714a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ff4:	695b      	ldr	r3, [r3, #20]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d004      	beq.n	8007004 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ffc:	3304      	adds	r3, #4
 8006ffe:	4618      	mov	r0, r3
 8007000:	f7fd fe58 	bl	8004cb4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007004:	463b      	mov	r3, r7
 8007006:	4618      	mov	r0, r3
 8007008:	f7ff ff6a 	bl	8006ee0 <prvSampleTimeNow>
 800700c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2b09      	cmp	r3, #9
 8007012:	f200 8097 	bhi.w	8007144 <prvProcessReceivedCommands+0x1a0>
 8007016:	a201      	add	r2, pc, #4	@ (adr r2, 800701c <prvProcessReceivedCommands+0x78>)
 8007018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800701c:	08007045 	.word	0x08007045
 8007020:	08007045 	.word	0x08007045
 8007024:	08007045 	.word	0x08007045
 8007028:	080070bb 	.word	0x080070bb
 800702c:	080070cf 	.word	0x080070cf
 8007030:	0800711b 	.word	0x0800711b
 8007034:	08007045 	.word	0x08007045
 8007038:	08007045 	.word	0x08007045
 800703c:	080070bb 	.word	0x080070bb
 8007040:	080070cf 	.word	0x080070cf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007046:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800704a:	f043 0301 	orr.w	r3, r3, #1
 800704e:	b2da      	uxtb	r2, r3
 8007050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007052:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007056:	68ba      	ldr	r2, [r7, #8]
 8007058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800705a:	699b      	ldr	r3, [r3, #24]
 800705c:	18d1      	adds	r1, r2, r3
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007062:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007064:	f7ff ff5c 	bl	8006f20 <prvInsertTimerInActiveList>
 8007068:	4603      	mov	r3, r0
 800706a:	2b00      	cmp	r3, #0
 800706c:	d06c      	beq.n	8007148 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800706e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007070:	6a1b      	ldr	r3, [r3, #32]
 8007072:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007074:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007078:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800707c:	f003 0304 	and.w	r3, r3, #4
 8007080:	2b00      	cmp	r3, #0
 8007082:	d061      	beq.n	8007148 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007084:	68ba      	ldr	r2, [r7, #8]
 8007086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007088:	699b      	ldr	r3, [r3, #24]
 800708a:	441a      	add	r2, r3
 800708c:	2300      	movs	r3, #0
 800708e:	9300      	str	r3, [sp, #0]
 8007090:	2300      	movs	r3, #0
 8007092:	2100      	movs	r1, #0
 8007094:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007096:	f7ff fe01 	bl	8006c9c <xTimerGenericCommand>
 800709a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800709c:	6a3b      	ldr	r3, [r7, #32]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d152      	bne.n	8007148 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80070a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070a6:	f383 8811 	msr	BASEPRI, r3
 80070aa:	f3bf 8f6f 	isb	sy
 80070ae:	f3bf 8f4f 	dsb	sy
 80070b2:	61bb      	str	r3, [r7, #24]
}
 80070b4:	bf00      	nop
 80070b6:	bf00      	nop
 80070b8:	e7fd      	b.n	80070b6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80070ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80070c0:	f023 0301 	bic.w	r3, r3, #1
 80070c4:	b2da      	uxtb	r2, r3
 80070c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80070cc:	e03d      	b.n	800714a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80070ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80070d4:	f043 0301 	orr.w	r3, r3, #1
 80070d8:	b2da      	uxtb	r2, r3
 80070da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070dc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80070e0:	68ba      	ldr	r2, [r7, #8]
 80070e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80070e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e8:	699b      	ldr	r3, [r3, #24]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d10b      	bne.n	8007106 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80070ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070f2:	f383 8811 	msr	BASEPRI, r3
 80070f6:	f3bf 8f6f 	isb	sy
 80070fa:	f3bf 8f4f 	dsb	sy
 80070fe:	617b      	str	r3, [r7, #20]
}
 8007100:	bf00      	nop
 8007102:	bf00      	nop
 8007104:	e7fd      	b.n	8007102 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007108:	699a      	ldr	r2, [r3, #24]
 800710a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800710c:	18d1      	adds	r1, r2, r3
 800710e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007110:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007112:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007114:	f7ff ff04 	bl	8006f20 <prvInsertTimerInActiveList>
					break;
 8007118:	e017      	b.n	800714a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800711a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800711c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007120:	f003 0302 	and.w	r3, r3, #2
 8007124:	2b00      	cmp	r3, #0
 8007126:	d103      	bne.n	8007130 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007128:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800712a:	f000 fc0d 	bl	8007948 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800712e:	e00c      	b.n	800714a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007132:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007136:	f023 0301 	bic.w	r3, r3, #1
 800713a:	b2da      	uxtb	r2, r3
 800713c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800713e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007142:	e002      	b.n	800714a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007144:	bf00      	nop
 8007146:	e000      	b.n	800714a <prvProcessReceivedCommands+0x1a6>
					break;
 8007148:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800714a:	4b08      	ldr	r3, [pc, #32]	@ (800716c <prvProcessReceivedCommands+0x1c8>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	1d39      	adds	r1, r7, #4
 8007150:	2200      	movs	r2, #0
 8007152:	4618      	mov	r0, r3
 8007154:	f7fe f8be 	bl	80052d4 <xQueueReceive>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	f47f af26 	bne.w	8006fac <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007160:	bf00      	nop
 8007162:	bf00      	nop
 8007164:	3730      	adds	r7, #48	@ 0x30
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	20000eb0 	.word	0x20000eb0

08007170 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b088      	sub	sp, #32
 8007174:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007176:	e049      	b.n	800720c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007178:	4b2e      	ldr	r3, [pc, #184]	@ (8007234 <prvSwitchTimerLists+0xc4>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007182:	4b2c      	ldr	r3, [pc, #176]	@ (8007234 <prvSwitchTimerLists+0xc4>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	3304      	adds	r3, #4
 8007190:	4618      	mov	r0, r3
 8007192:	f7fd fd8f 	bl	8004cb4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	6a1b      	ldr	r3, [r3, #32]
 800719a:	68f8      	ldr	r0, [r7, #12]
 800719c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80071a4:	f003 0304 	and.w	r3, r3, #4
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d02f      	beq.n	800720c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	699b      	ldr	r3, [r3, #24]
 80071b0:	693a      	ldr	r2, [r7, #16]
 80071b2:	4413      	add	r3, r2
 80071b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80071b6:	68ba      	ldr	r2, [r7, #8]
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d90e      	bls.n	80071dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	68ba      	ldr	r2, [r7, #8]
 80071c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80071ca:	4b1a      	ldr	r3, [pc, #104]	@ (8007234 <prvSwitchTimerLists+0xc4>)
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	3304      	adds	r3, #4
 80071d2:	4619      	mov	r1, r3
 80071d4:	4610      	mov	r0, r2
 80071d6:	f7fd fd34 	bl	8004c42 <vListInsert>
 80071da:	e017      	b.n	800720c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80071dc:	2300      	movs	r3, #0
 80071de:	9300      	str	r3, [sp, #0]
 80071e0:	2300      	movs	r3, #0
 80071e2:	693a      	ldr	r2, [r7, #16]
 80071e4:	2100      	movs	r1, #0
 80071e6:	68f8      	ldr	r0, [r7, #12]
 80071e8:	f7ff fd58 	bl	8006c9c <xTimerGenericCommand>
 80071ec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d10b      	bne.n	800720c <prvSwitchTimerLists+0x9c>
	__asm volatile
 80071f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071f8:	f383 8811 	msr	BASEPRI, r3
 80071fc:	f3bf 8f6f 	isb	sy
 8007200:	f3bf 8f4f 	dsb	sy
 8007204:	603b      	str	r3, [r7, #0]
}
 8007206:	bf00      	nop
 8007208:	bf00      	nop
 800720a:	e7fd      	b.n	8007208 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800720c:	4b09      	ldr	r3, [pc, #36]	@ (8007234 <prvSwitchTimerLists+0xc4>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d1b0      	bne.n	8007178 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007216:	4b07      	ldr	r3, [pc, #28]	@ (8007234 <prvSwitchTimerLists+0xc4>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800721c:	4b06      	ldr	r3, [pc, #24]	@ (8007238 <prvSwitchTimerLists+0xc8>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a04      	ldr	r2, [pc, #16]	@ (8007234 <prvSwitchTimerLists+0xc4>)
 8007222:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007224:	4a04      	ldr	r2, [pc, #16]	@ (8007238 <prvSwitchTimerLists+0xc8>)
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	6013      	str	r3, [r2, #0]
}
 800722a:	bf00      	nop
 800722c:	3718      	adds	r7, #24
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	20000ea8 	.word	0x20000ea8
 8007238:	20000eac 	.word	0x20000eac

0800723c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007242:	f000 f991 	bl	8007568 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007246:	4b15      	ldr	r3, [pc, #84]	@ (800729c <prvCheckForValidListAndQueue+0x60>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d120      	bne.n	8007290 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800724e:	4814      	ldr	r0, [pc, #80]	@ (80072a0 <prvCheckForValidListAndQueue+0x64>)
 8007250:	f7fd fca6 	bl	8004ba0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007254:	4813      	ldr	r0, [pc, #76]	@ (80072a4 <prvCheckForValidListAndQueue+0x68>)
 8007256:	f7fd fca3 	bl	8004ba0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800725a:	4b13      	ldr	r3, [pc, #76]	@ (80072a8 <prvCheckForValidListAndQueue+0x6c>)
 800725c:	4a10      	ldr	r2, [pc, #64]	@ (80072a0 <prvCheckForValidListAndQueue+0x64>)
 800725e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007260:	4b12      	ldr	r3, [pc, #72]	@ (80072ac <prvCheckForValidListAndQueue+0x70>)
 8007262:	4a10      	ldr	r2, [pc, #64]	@ (80072a4 <prvCheckForValidListAndQueue+0x68>)
 8007264:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007266:	2300      	movs	r3, #0
 8007268:	9300      	str	r3, [sp, #0]
 800726a:	4b11      	ldr	r3, [pc, #68]	@ (80072b0 <prvCheckForValidListAndQueue+0x74>)
 800726c:	4a11      	ldr	r2, [pc, #68]	@ (80072b4 <prvCheckForValidListAndQueue+0x78>)
 800726e:	2110      	movs	r1, #16
 8007270:	200a      	movs	r0, #10
 8007272:	f7fd fdb3 	bl	8004ddc <xQueueGenericCreateStatic>
 8007276:	4603      	mov	r3, r0
 8007278:	4a08      	ldr	r2, [pc, #32]	@ (800729c <prvCheckForValidListAndQueue+0x60>)
 800727a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800727c:	4b07      	ldr	r3, [pc, #28]	@ (800729c <prvCheckForValidListAndQueue+0x60>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d005      	beq.n	8007290 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007284:	4b05      	ldr	r3, [pc, #20]	@ (800729c <prvCheckForValidListAndQueue+0x60>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	490b      	ldr	r1, [pc, #44]	@ (80072b8 <prvCheckForValidListAndQueue+0x7c>)
 800728a:	4618      	mov	r0, r3
 800728c:	f7fe fabe 	bl	800580c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007290:	f000 f99c 	bl	80075cc <vPortExitCritical>
}
 8007294:	bf00      	nop
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	20000eb0 	.word	0x20000eb0
 80072a0:	20000e80 	.word	0x20000e80
 80072a4:	20000e94 	.word	0x20000e94
 80072a8:	20000ea8 	.word	0x20000ea8
 80072ac:	20000eac 	.word	0x20000eac
 80072b0:	20000f5c 	.word	0x20000f5c
 80072b4:	20000ebc 	.word	0x20000ebc
 80072b8:	08008974 	.word	0x08008974

080072bc <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b086      	sub	sp, #24
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d10b      	bne.n	80072e6 <pvTimerGetTimerID+0x2a>
	__asm volatile
 80072ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072d2:	f383 8811 	msr	BASEPRI, r3
 80072d6:	f3bf 8f6f 	isb	sy
 80072da:	f3bf 8f4f 	dsb	sy
 80072de:	60fb      	str	r3, [r7, #12]
}
 80072e0:	bf00      	nop
 80072e2:	bf00      	nop
 80072e4:	e7fd      	b.n	80072e2 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 80072e6:	f000 f93f 	bl	8007568 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	69db      	ldr	r3, [r3, #28]
 80072ee:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80072f0:	f000 f96c 	bl	80075cc <vPortExitCritical>

	return pvReturn;
 80072f4:	693b      	ldr	r3, [r7, #16]
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3718      	adds	r7, #24
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
	...

08007300 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007300:	b480      	push	{r7}
 8007302:	b085      	sub	sp, #20
 8007304:	af00      	add	r7, sp, #0
 8007306:	60f8      	str	r0, [r7, #12]
 8007308:	60b9      	str	r1, [r7, #8]
 800730a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	3b04      	subs	r3, #4
 8007310:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007318:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	3b04      	subs	r3, #4
 800731e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	f023 0201 	bic.w	r2, r3, #1
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	3b04      	subs	r3, #4
 800732e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007330:	4a0c      	ldr	r2, [pc, #48]	@ (8007364 <pxPortInitialiseStack+0x64>)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	3b14      	subs	r3, #20
 800733a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	3b04      	subs	r3, #4
 8007346:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f06f 0202 	mvn.w	r2, #2
 800734e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	3b20      	subs	r3, #32
 8007354:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007356:	68fb      	ldr	r3, [r7, #12]
}
 8007358:	4618      	mov	r0, r3
 800735a:	3714      	adds	r7, #20
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr
 8007364:	08007369 	.word	0x08007369

08007368 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007368:	b480      	push	{r7}
 800736a:	b085      	sub	sp, #20
 800736c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800736e:	2300      	movs	r3, #0
 8007370:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007372:	4b13      	ldr	r3, [pc, #76]	@ (80073c0 <prvTaskExitError+0x58>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800737a:	d00b      	beq.n	8007394 <prvTaskExitError+0x2c>
	__asm volatile
 800737c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007380:	f383 8811 	msr	BASEPRI, r3
 8007384:	f3bf 8f6f 	isb	sy
 8007388:	f3bf 8f4f 	dsb	sy
 800738c:	60fb      	str	r3, [r7, #12]
}
 800738e:	bf00      	nop
 8007390:	bf00      	nop
 8007392:	e7fd      	b.n	8007390 <prvTaskExitError+0x28>
	__asm volatile
 8007394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007398:	f383 8811 	msr	BASEPRI, r3
 800739c:	f3bf 8f6f 	isb	sy
 80073a0:	f3bf 8f4f 	dsb	sy
 80073a4:	60bb      	str	r3, [r7, #8]
}
 80073a6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80073a8:	bf00      	nop
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d0fc      	beq.n	80073aa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80073b0:	bf00      	nop
 80073b2:	bf00      	nop
 80073b4:	3714      	adds	r7, #20
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr
 80073be:	bf00      	nop
 80073c0:	20000028 	.word	0x20000028
	...

080073d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80073d0:	4b07      	ldr	r3, [pc, #28]	@ (80073f0 <pxCurrentTCBConst2>)
 80073d2:	6819      	ldr	r1, [r3, #0]
 80073d4:	6808      	ldr	r0, [r1, #0]
 80073d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073da:	f380 8809 	msr	PSP, r0
 80073de:	f3bf 8f6f 	isb	sy
 80073e2:	f04f 0000 	mov.w	r0, #0
 80073e6:	f380 8811 	msr	BASEPRI, r0
 80073ea:	4770      	bx	lr
 80073ec:	f3af 8000 	nop.w

080073f0 <pxCurrentTCBConst2>:
 80073f0:	20000980 	.word	0x20000980
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80073f4:	bf00      	nop
 80073f6:	bf00      	nop

080073f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80073f8:	4808      	ldr	r0, [pc, #32]	@ (800741c <prvPortStartFirstTask+0x24>)
 80073fa:	6800      	ldr	r0, [r0, #0]
 80073fc:	6800      	ldr	r0, [r0, #0]
 80073fe:	f380 8808 	msr	MSP, r0
 8007402:	f04f 0000 	mov.w	r0, #0
 8007406:	f380 8814 	msr	CONTROL, r0
 800740a:	b662      	cpsie	i
 800740c:	b661      	cpsie	f
 800740e:	f3bf 8f4f 	dsb	sy
 8007412:	f3bf 8f6f 	isb	sy
 8007416:	df00      	svc	0
 8007418:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800741a:	bf00      	nop
 800741c:	e000ed08 	.word	0xe000ed08

08007420 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b086      	sub	sp, #24
 8007424:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007426:	4b47      	ldr	r3, [pc, #284]	@ (8007544 <xPortStartScheduler+0x124>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a47      	ldr	r2, [pc, #284]	@ (8007548 <xPortStartScheduler+0x128>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d10b      	bne.n	8007448 <xPortStartScheduler+0x28>
	__asm volatile
 8007430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007434:	f383 8811 	msr	BASEPRI, r3
 8007438:	f3bf 8f6f 	isb	sy
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	60fb      	str	r3, [r7, #12]
}
 8007442:	bf00      	nop
 8007444:	bf00      	nop
 8007446:	e7fd      	b.n	8007444 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007448:	4b3e      	ldr	r3, [pc, #248]	@ (8007544 <xPortStartScheduler+0x124>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a3f      	ldr	r2, [pc, #252]	@ (800754c <xPortStartScheduler+0x12c>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d10b      	bne.n	800746a <xPortStartScheduler+0x4a>
	__asm volatile
 8007452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007456:	f383 8811 	msr	BASEPRI, r3
 800745a:	f3bf 8f6f 	isb	sy
 800745e:	f3bf 8f4f 	dsb	sy
 8007462:	613b      	str	r3, [r7, #16]
}
 8007464:	bf00      	nop
 8007466:	bf00      	nop
 8007468:	e7fd      	b.n	8007466 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800746a:	4b39      	ldr	r3, [pc, #228]	@ (8007550 <xPortStartScheduler+0x130>)
 800746c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	b2db      	uxtb	r3, r3
 8007474:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	22ff      	movs	r2, #255	@ 0xff
 800747a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	b2db      	uxtb	r3, r3
 8007482:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007484:	78fb      	ldrb	r3, [r7, #3]
 8007486:	b2db      	uxtb	r3, r3
 8007488:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800748c:	b2da      	uxtb	r2, r3
 800748e:	4b31      	ldr	r3, [pc, #196]	@ (8007554 <xPortStartScheduler+0x134>)
 8007490:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007492:	4b31      	ldr	r3, [pc, #196]	@ (8007558 <xPortStartScheduler+0x138>)
 8007494:	2207      	movs	r2, #7
 8007496:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007498:	e009      	b.n	80074ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800749a:	4b2f      	ldr	r3, [pc, #188]	@ (8007558 <xPortStartScheduler+0x138>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	3b01      	subs	r3, #1
 80074a0:	4a2d      	ldr	r2, [pc, #180]	@ (8007558 <xPortStartScheduler+0x138>)
 80074a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80074a4:	78fb      	ldrb	r3, [r7, #3]
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	005b      	lsls	r3, r3, #1
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80074ae:	78fb      	ldrb	r3, [r7, #3]
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074b6:	2b80      	cmp	r3, #128	@ 0x80
 80074b8:	d0ef      	beq.n	800749a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80074ba:	4b27      	ldr	r3, [pc, #156]	@ (8007558 <xPortStartScheduler+0x138>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f1c3 0307 	rsb	r3, r3, #7
 80074c2:	2b04      	cmp	r3, #4
 80074c4:	d00b      	beq.n	80074de <xPortStartScheduler+0xbe>
	__asm volatile
 80074c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ca:	f383 8811 	msr	BASEPRI, r3
 80074ce:	f3bf 8f6f 	isb	sy
 80074d2:	f3bf 8f4f 	dsb	sy
 80074d6:	60bb      	str	r3, [r7, #8]
}
 80074d8:	bf00      	nop
 80074da:	bf00      	nop
 80074dc:	e7fd      	b.n	80074da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80074de:	4b1e      	ldr	r3, [pc, #120]	@ (8007558 <xPortStartScheduler+0x138>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	021b      	lsls	r3, r3, #8
 80074e4:	4a1c      	ldr	r2, [pc, #112]	@ (8007558 <xPortStartScheduler+0x138>)
 80074e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80074e8:	4b1b      	ldr	r3, [pc, #108]	@ (8007558 <xPortStartScheduler+0x138>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80074f0:	4a19      	ldr	r2, [pc, #100]	@ (8007558 <xPortStartScheduler+0x138>)
 80074f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	b2da      	uxtb	r2, r3
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80074fc:	4b17      	ldr	r3, [pc, #92]	@ (800755c <xPortStartScheduler+0x13c>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a16      	ldr	r2, [pc, #88]	@ (800755c <xPortStartScheduler+0x13c>)
 8007502:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007506:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007508:	4b14      	ldr	r3, [pc, #80]	@ (800755c <xPortStartScheduler+0x13c>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a13      	ldr	r2, [pc, #76]	@ (800755c <xPortStartScheduler+0x13c>)
 800750e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007512:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007514:	f000 f8da 	bl	80076cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007518:	4b11      	ldr	r3, [pc, #68]	@ (8007560 <xPortStartScheduler+0x140>)
 800751a:	2200      	movs	r2, #0
 800751c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800751e:	f000 f8f9 	bl	8007714 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007522:	4b10      	ldr	r3, [pc, #64]	@ (8007564 <xPortStartScheduler+0x144>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a0f      	ldr	r2, [pc, #60]	@ (8007564 <xPortStartScheduler+0x144>)
 8007528:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800752c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800752e:	f7ff ff63 	bl	80073f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007532:	f7fe fda3 	bl	800607c <vTaskSwitchContext>
	prvTaskExitError();
 8007536:	f7ff ff17 	bl	8007368 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800753a:	2300      	movs	r3, #0
}
 800753c:	4618      	mov	r0, r3
 800753e:	3718      	adds	r7, #24
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}
 8007544:	e000ed00 	.word	0xe000ed00
 8007548:	410fc271 	.word	0x410fc271
 800754c:	410fc270 	.word	0x410fc270
 8007550:	e000e400 	.word	0xe000e400
 8007554:	20000fac 	.word	0x20000fac
 8007558:	20000fb0 	.word	0x20000fb0
 800755c:	e000ed20 	.word	0xe000ed20
 8007560:	20000028 	.word	0x20000028
 8007564:	e000ef34 	.word	0xe000ef34

08007568 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
	__asm volatile
 800756e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007572:	f383 8811 	msr	BASEPRI, r3
 8007576:	f3bf 8f6f 	isb	sy
 800757a:	f3bf 8f4f 	dsb	sy
 800757e:	607b      	str	r3, [r7, #4]
}
 8007580:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007582:	4b10      	ldr	r3, [pc, #64]	@ (80075c4 <vPortEnterCritical+0x5c>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	3301      	adds	r3, #1
 8007588:	4a0e      	ldr	r2, [pc, #56]	@ (80075c4 <vPortEnterCritical+0x5c>)
 800758a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800758c:	4b0d      	ldr	r3, [pc, #52]	@ (80075c4 <vPortEnterCritical+0x5c>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2b01      	cmp	r3, #1
 8007592:	d110      	bne.n	80075b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007594:	4b0c      	ldr	r3, [pc, #48]	@ (80075c8 <vPortEnterCritical+0x60>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	b2db      	uxtb	r3, r3
 800759a:	2b00      	cmp	r3, #0
 800759c:	d00b      	beq.n	80075b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800759e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075a2:	f383 8811 	msr	BASEPRI, r3
 80075a6:	f3bf 8f6f 	isb	sy
 80075aa:	f3bf 8f4f 	dsb	sy
 80075ae:	603b      	str	r3, [r7, #0]
}
 80075b0:	bf00      	nop
 80075b2:	bf00      	nop
 80075b4:	e7fd      	b.n	80075b2 <vPortEnterCritical+0x4a>
	}
}
 80075b6:	bf00      	nop
 80075b8:	370c      	adds	r7, #12
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	20000028 	.word	0x20000028
 80075c8:	e000ed04 	.word	0xe000ed04

080075cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80075d2:	4b12      	ldr	r3, [pc, #72]	@ (800761c <vPortExitCritical+0x50>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d10b      	bne.n	80075f2 <vPortExitCritical+0x26>
	__asm volatile
 80075da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075de:	f383 8811 	msr	BASEPRI, r3
 80075e2:	f3bf 8f6f 	isb	sy
 80075e6:	f3bf 8f4f 	dsb	sy
 80075ea:	607b      	str	r3, [r7, #4]
}
 80075ec:	bf00      	nop
 80075ee:	bf00      	nop
 80075f0:	e7fd      	b.n	80075ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80075f2:	4b0a      	ldr	r3, [pc, #40]	@ (800761c <vPortExitCritical+0x50>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	3b01      	subs	r3, #1
 80075f8:	4a08      	ldr	r2, [pc, #32]	@ (800761c <vPortExitCritical+0x50>)
 80075fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80075fc:	4b07      	ldr	r3, [pc, #28]	@ (800761c <vPortExitCritical+0x50>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d105      	bne.n	8007610 <vPortExitCritical+0x44>
 8007604:	2300      	movs	r3, #0
 8007606:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	f383 8811 	msr	BASEPRI, r3
}
 800760e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007610:	bf00      	nop
 8007612:	370c      	adds	r7, #12
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr
 800761c:	20000028 	.word	0x20000028

08007620 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007620:	f3ef 8009 	mrs	r0, PSP
 8007624:	f3bf 8f6f 	isb	sy
 8007628:	4b15      	ldr	r3, [pc, #84]	@ (8007680 <pxCurrentTCBConst>)
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	f01e 0f10 	tst.w	lr, #16
 8007630:	bf08      	it	eq
 8007632:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007636:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800763a:	6010      	str	r0, [r2, #0]
 800763c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007640:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007644:	f380 8811 	msr	BASEPRI, r0
 8007648:	f3bf 8f4f 	dsb	sy
 800764c:	f3bf 8f6f 	isb	sy
 8007650:	f7fe fd14 	bl	800607c <vTaskSwitchContext>
 8007654:	f04f 0000 	mov.w	r0, #0
 8007658:	f380 8811 	msr	BASEPRI, r0
 800765c:	bc09      	pop	{r0, r3}
 800765e:	6819      	ldr	r1, [r3, #0]
 8007660:	6808      	ldr	r0, [r1, #0]
 8007662:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007666:	f01e 0f10 	tst.w	lr, #16
 800766a:	bf08      	it	eq
 800766c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007670:	f380 8809 	msr	PSP, r0
 8007674:	f3bf 8f6f 	isb	sy
 8007678:	4770      	bx	lr
 800767a:	bf00      	nop
 800767c:	f3af 8000 	nop.w

08007680 <pxCurrentTCBConst>:
 8007680:	20000980 	.word	0x20000980
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007684:	bf00      	nop
 8007686:	bf00      	nop

08007688 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b082      	sub	sp, #8
 800768c:	af00      	add	r7, sp, #0
	__asm volatile
 800768e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007692:	f383 8811 	msr	BASEPRI, r3
 8007696:	f3bf 8f6f 	isb	sy
 800769a:	f3bf 8f4f 	dsb	sy
 800769e:	607b      	str	r3, [r7, #4]
}
 80076a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80076a2:	f7fe fc31 	bl	8005f08 <xTaskIncrementTick>
 80076a6:	4603      	mov	r3, r0
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d003      	beq.n	80076b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80076ac:	4b06      	ldr	r3, [pc, #24]	@ (80076c8 <xPortSysTickHandler+0x40>)
 80076ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076b2:	601a      	str	r2, [r3, #0]
 80076b4:	2300      	movs	r3, #0
 80076b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	f383 8811 	msr	BASEPRI, r3
}
 80076be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80076c0:	bf00      	nop
 80076c2:	3708      	adds	r7, #8
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	e000ed04 	.word	0xe000ed04

080076cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80076cc:	b480      	push	{r7}
 80076ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80076d0:	4b0b      	ldr	r3, [pc, #44]	@ (8007700 <vPortSetupTimerInterrupt+0x34>)
 80076d2:	2200      	movs	r2, #0
 80076d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80076d6:	4b0b      	ldr	r3, [pc, #44]	@ (8007704 <vPortSetupTimerInterrupt+0x38>)
 80076d8:	2200      	movs	r2, #0
 80076da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80076dc:	4b0a      	ldr	r3, [pc, #40]	@ (8007708 <vPortSetupTimerInterrupt+0x3c>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a0a      	ldr	r2, [pc, #40]	@ (800770c <vPortSetupTimerInterrupt+0x40>)
 80076e2:	fba2 2303 	umull	r2, r3, r2, r3
 80076e6:	099b      	lsrs	r3, r3, #6
 80076e8:	4a09      	ldr	r2, [pc, #36]	@ (8007710 <vPortSetupTimerInterrupt+0x44>)
 80076ea:	3b01      	subs	r3, #1
 80076ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80076ee:	4b04      	ldr	r3, [pc, #16]	@ (8007700 <vPortSetupTimerInterrupt+0x34>)
 80076f0:	2207      	movs	r2, #7
 80076f2:	601a      	str	r2, [r3, #0]
}
 80076f4:	bf00      	nop
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr
 80076fe:	bf00      	nop
 8007700:	e000e010 	.word	0xe000e010
 8007704:	e000e018 	.word	0xe000e018
 8007708:	20000018 	.word	0x20000018
 800770c:	10624dd3 	.word	0x10624dd3
 8007710:	e000e014 	.word	0xe000e014

08007714 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007714:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007724 <vPortEnableVFP+0x10>
 8007718:	6801      	ldr	r1, [r0, #0]
 800771a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800771e:	6001      	str	r1, [r0, #0]
 8007720:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007722:	bf00      	nop
 8007724:	e000ed88 	.word	0xe000ed88

08007728 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007728:	b480      	push	{r7}
 800772a:	b085      	sub	sp, #20
 800772c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800772e:	f3ef 8305 	mrs	r3, IPSR
 8007732:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2b0f      	cmp	r3, #15
 8007738:	d915      	bls.n	8007766 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800773a:	4a18      	ldr	r2, [pc, #96]	@ (800779c <vPortValidateInterruptPriority+0x74>)
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	4413      	add	r3, r2
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007744:	4b16      	ldr	r3, [pc, #88]	@ (80077a0 <vPortValidateInterruptPriority+0x78>)
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	7afa      	ldrb	r2, [r7, #11]
 800774a:	429a      	cmp	r2, r3
 800774c:	d20b      	bcs.n	8007766 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800774e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007752:	f383 8811 	msr	BASEPRI, r3
 8007756:	f3bf 8f6f 	isb	sy
 800775a:	f3bf 8f4f 	dsb	sy
 800775e:	607b      	str	r3, [r7, #4]
}
 8007760:	bf00      	nop
 8007762:	bf00      	nop
 8007764:	e7fd      	b.n	8007762 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007766:	4b0f      	ldr	r3, [pc, #60]	@ (80077a4 <vPortValidateInterruptPriority+0x7c>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800776e:	4b0e      	ldr	r3, [pc, #56]	@ (80077a8 <vPortValidateInterruptPriority+0x80>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	429a      	cmp	r2, r3
 8007774:	d90b      	bls.n	800778e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800777a:	f383 8811 	msr	BASEPRI, r3
 800777e:	f3bf 8f6f 	isb	sy
 8007782:	f3bf 8f4f 	dsb	sy
 8007786:	603b      	str	r3, [r7, #0]
}
 8007788:	bf00      	nop
 800778a:	bf00      	nop
 800778c:	e7fd      	b.n	800778a <vPortValidateInterruptPriority+0x62>
	}
 800778e:	bf00      	nop
 8007790:	3714      	adds	r7, #20
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	e000e3f0 	.word	0xe000e3f0
 80077a0:	20000fac 	.word	0x20000fac
 80077a4:	e000ed0c 	.word	0xe000ed0c
 80077a8:	20000fb0 	.word	0x20000fb0

080077ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b08a      	sub	sp, #40	@ 0x28
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80077b4:	2300      	movs	r3, #0
 80077b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80077b8:	f7fe faea 	bl	8005d90 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80077bc:	4b5c      	ldr	r3, [pc, #368]	@ (8007930 <pvPortMalloc+0x184>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d101      	bne.n	80077c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80077c4:	f000 f924 	bl	8007a10 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80077c8:	4b5a      	ldr	r3, [pc, #360]	@ (8007934 <pvPortMalloc+0x188>)
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4013      	ands	r3, r2
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f040 8095 	bne.w	8007900 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d01e      	beq.n	800781a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80077dc:	2208      	movs	r2, #8
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4413      	add	r3, r2
 80077e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f003 0307 	and.w	r3, r3, #7
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d015      	beq.n	800781a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f023 0307 	bic.w	r3, r3, #7
 80077f4:	3308      	adds	r3, #8
 80077f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f003 0307 	and.w	r3, r3, #7
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d00b      	beq.n	800781a <pvPortMalloc+0x6e>
	__asm volatile
 8007802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007806:	f383 8811 	msr	BASEPRI, r3
 800780a:	f3bf 8f6f 	isb	sy
 800780e:	f3bf 8f4f 	dsb	sy
 8007812:	617b      	str	r3, [r7, #20]
}
 8007814:	bf00      	nop
 8007816:	bf00      	nop
 8007818:	e7fd      	b.n	8007816 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d06f      	beq.n	8007900 <pvPortMalloc+0x154>
 8007820:	4b45      	ldr	r3, [pc, #276]	@ (8007938 <pvPortMalloc+0x18c>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	429a      	cmp	r2, r3
 8007828:	d86a      	bhi.n	8007900 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800782a:	4b44      	ldr	r3, [pc, #272]	@ (800793c <pvPortMalloc+0x190>)
 800782c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800782e:	4b43      	ldr	r3, [pc, #268]	@ (800793c <pvPortMalloc+0x190>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007834:	e004      	b.n	8007840 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007838:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800783a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	429a      	cmp	r2, r3
 8007848:	d903      	bls.n	8007852 <pvPortMalloc+0xa6>
 800784a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d1f1      	bne.n	8007836 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007852:	4b37      	ldr	r3, [pc, #220]	@ (8007930 <pvPortMalloc+0x184>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007858:	429a      	cmp	r2, r3
 800785a:	d051      	beq.n	8007900 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800785c:	6a3b      	ldr	r3, [r7, #32]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	2208      	movs	r2, #8
 8007862:	4413      	add	r3, r2
 8007864:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	6a3b      	ldr	r3, [r7, #32]
 800786c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800786e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007870:	685a      	ldr	r2, [r3, #4]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	1ad2      	subs	r2, r2, r3
 8007876:	2308      	movs	r3, #8
 8007878:	005b      	lsls	r3, r3, #1
 800787a:	429a      	cmp	r2, r3
 800787c:	d920      	bls.n	80078c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800787e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4413      	add	r3, r2
 8007884:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007886:	69bb      	ldr	r3, [r7, #24]
 8007888:	f003 0307 	and.w	r3, r3, #7
 800788c:	2b00      	cmp	r3, #0
 800788e:	d00b      	beq.n	80078a8 <pvPortMalloc+0xfc>
	__asm volatile
 8007890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007894:	f383 8811 	msr	BASEPRI, r3
 8007898:	f3bf 8f6f 	isb	sy
 800789c:	f3bf 8f4f 	dsb	sy
 80078a0:	613b      	str	r3, [r7, #16]
}
 80078a2:	bf00      	nop
 80078a4:	bf00      	nop
 80078a6:	e7fd      	b.n	80078a4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80078a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078aa:	685a      	ldr	r2, [r3, #4]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	1ad2      	subs	r2, r2, r3
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80078b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80078ba:	69b8      	ldr	r0, [r7, #24]
 80078bc:	f000 f90a 	bl	8007ad4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80078c0:	4b1d      	ldr	r3, [pc, #116]	@ (8007938 <pvPortMalloc+0x18c>)
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	1ad3      	subs	r3, r2, r3
 80078ca:	4a1b      	ldr	r2, [pc, #108]	@ (8007938 <pvPortMalloc+0x18c>)
 80078cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80078ce:	4b1a      	ldr	r3, [pc, #104]	@ (8007938 <pvPortMalloc+0x18c>)
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	4b1b      	ldr	r3, [pc, #108]	@ (8007940 <pvPortMalloc+0x194>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d203      	bcs.n	80078e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80078da:	4b17      	ldr	r3, [pc, #92]	@ (8007938 <pvPortMalloc+0x18c>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a18      	ldr	r2, [pc, #96]	@ (8007940 <pvPortMalloc+0x194>)
 80078e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80078e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e4:	685a      	ldr	r2, [r3, #4]
 80078e6:	4b13      	ldr	r3, [pc, #76]	@ (8007934 <pvPortMalloc+0x188>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	431a      	orrs	r2, r3
 80078ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80078f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f2:	2200      	movs	r2, #0
 80078f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80078f6:	4b13      	ldr	r3, [pc, #76]	@ (8007944 <pvPortMalloc+0x198>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	3301      	adds	r3, #1
 80078fc:	4a11      	ldr	r2, [pc, #68]	@ (8007944 <pvPortMalloc+0x198>)
 80078fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007900:	f7fe fa54 	bl	8005dac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	f003 0307 	and.w	r3, r3, #7
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00b      	beq.n	8007926 <pvPortMalloc+0x17a>
	__asm volatile
 800790e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007912:	f383 8811 	msr	BASEPRI, r3
 8007916:	f3bf 8f6f 	isb	sy
 800791a:	f3bf 8f4f 	dsb	sy
 800791e:	60fb      	str	r3, [r7, #12]
}
 8007920:	bf00      	nop
 8007922:	bf00      	nop
 8007924:	e7fd      	b.n	8007922 <pvPortMalloc+0x176>
	return pvReturn;
 8007926:	69fb      	ldr	r3, [r7, #28]
}
 8007928:	4618      	mov	r0, r3
 800792a:	3728      	adds	r7, #40	@ 0x28
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}
 8007930:	20004bbc 	.word	0x20004bbc
 8007934:	20004bd0 	.word	0x20004bd0
 8007938:	20004bc0 	.word	0x20004bc0
 800793c:	20004bb4 	.word	0x20004bb4
 8007940:	20004bc4 	.word	0x20004bc4
 8007944:	20004bc8 	.word	0x20004bc8

08007948 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b086      	sub	sp, #24
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d04f      	beq.n	80079fa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800795a:	2308      	movs	r3, #8
 800795c:	425b      	negs	r3, r3
 800795e:	697a      	ldr	r2, [r7, #20]
 8007960:	4413      	add	r3, r2
 8007962:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	685a      	ldr	r2, [r3, #4]
 800796c:	4b25      	ldr	r3, [pc, #148]	@ (8007a04 <vPortFree+0xbc>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4013      	ands	r3, r2
 8007972:	2b00      	cmp	r3, #0
 8007974:	d10b      	bne.n	800798e <vPortFree+0x46>
	__asm volatile
 8007976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800797a:	f383 8811 	msr	BASEPRI, r3
 800797e:	f3bf 8f6f 	isb	sy
 8007982:	f3bf 8f4f 	dsb	sy
 8007986:	60fb      	str	r3, [r7, #12]
}
 8007988:	bf00      	nop
 800798a:	bf00      	nop
 800798c:	e7fd      	b.n	800798a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d00b      	beq.n	80079ae <vPortFree+0x66>
	__asm volatile
 8007996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800799a:	f383 8811 	msr	BASEPRI, r3
 800799e:	f3bf 8f6f 	isb	sy
 80079a2:	f3bf 8f4f 	dsb	sy
 80079a6:	60bb      	str	r3, [r7, #8]
}
 80079a8:	bf00      	nop
 80079aa:	bf00      	nop
 80079ac:	e7fd      	b.n	80079aa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	685a      	ldr	r2, [r3, #4]
 80079b2:	4b14      	ldr	r3, [pc, #80]	@ (8007a04 <vPortFree+0xbc>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4013      	ands	r3, r2
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d01e      	beq.n	80079fa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d11a      	bne.n	80079fa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	685a      	ldr	r2, [r3, #4]
 80079c8:	4b0e      	ldr	r3, [pc, #56]	@ (8007a04 <vPortFree+0xbc>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	43db      	mvns	r3, r3
 80079ce:	401a      	ands	r2, r3
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80079d4:	f7fe f9dc 	bl	8005d90 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	685a      	ldr	r2, [r3, #4]
 80079dc:	4b0a      	ldr	r3, [pc, #40]	@ (8007a08 <vPortFree+0xc0>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4413      	add	r3, r2
 80079e2:	4a09      	ldr	r2, [pc, #36]	@ (8007a08 <vPortFree+0xc0>)
 80079e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80079e6:	6938      	ldr	r0, [r7, #16]
 80079e8:	f000 f874 	bl	8007ad4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80079ec:	4b07      	ldr	r3, [pc, #28]	@ (8007a0c <vPortFree+0xc4>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	3301      	adds	r3, #1
 80079f2:	4a06      	ldr	r2, [pc, #24]	@ (8007a0c <vPortFree+0xc4>)
 80079f4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80079f6:	f7fe f9d9 	bl	8005dac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80079fa:	bf00      	nop
 80079fc:	3718      	adds	r7, #24
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	20004bd0 	.word	0x20004bd0
 8007a08:	20004bc0 	.word	0x20004bc0
 8007a0c:	20004bcc 	.word	0x20004bcc

08007a10 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007a10:	b480      	push	{r7}
 8007a12:	b085      	sub	sp, #20
 8007a14:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007a16:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007a1a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007a1c:	4b27      	ldr	r3, [pc, #156]	@ (8007abc <prvHeapInit+0xac>)
 8007a1e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f003 0307 	and.w	r3, r3, #7
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d00c      	beq.n	8007a44 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	3307      	adds	r3, #7
 8007a2e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f023 0307 	bic.w	r3, r3, #7
 8007a36:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007a38:	68ba      	ldr	r2, [r7, #8]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	1ad3      	subs	r3, r2, r3
 8007a3e:	4a1f      	ldr	r2, [pc, #124]	@ (8007abc <prvHeapInit+0xac>)
 8007a40:	4413      	add	r3, r2
 8007a42:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007a48:	4a1d      	ldr	r2, [pc, #116]	@ (8007ac0 <prvHeapInit+0xb0>)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007a4e:	4b1c      	ldr	r3, [pc, #112]	@ (8007ac0 <prvHeapInit+0xb0>)
 8007a50:	2200      	movs	r2, #0
 8007a52:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	68ba      	ldr	r2, [r7, #8]
 8007a58:	4413      	add	r3, r2
 8007a5a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007a5c:	2208      	movs	r2, #8
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	1a9b      	subs	r3, r3, r2
 8007a62:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f023 0307 	bic.w	r3, r3, #7
 8007a6a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	4a15      	ldr	r2, [pc, #84]	@ (8007ac4 <prvHeapInit+0xb4>)
 8007a70:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007a72:	4b14      	ldr	r3, [pc, #80]	@ (8007ac4 <prvHeapInit+0xb4>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2200      	movs	r2, #0
 8007a78:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007a7a:	4b12      	ldr	r3, [pc, #72]	@ (8007ac4 <prvHeapInit+0xb4>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	68fa      	ldr	r2, [r7, #12]
 8007a8a:	1ad2      	subs	r2, r2, r3
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007a90:	4b0c      	ldr	r3, [pc, #48]	@ (8007ac4 <prvHeapInit+0xb4>)
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	4a0a      	ldr	r2, [pc, #40]	@ (8007ac8 <prvHeapInit+0xb8>)
 8007a9e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	4a09      	ldr	r2, [pc, #36]	@ (8007acc <prvHeapInit+0xbc>)
 8007aa6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007aa8:	4b09      	ldr	r3, [pc, #36]	@ (8007ad0 <prvHeapInit+0xc0>)
 8007aaa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007aae:	601a      	str	r2, [r3, #0]
}
 8007ab0:	bf00      	nop
 8007ab2:	3714      	adds	r7, #20
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr
 8007abc:	20000fb4 	.word	0x20000fb4
 8007ac0:	20004bb4 	.word	0x20004bb4
 8007ac4:	20004bbc 	.word	0x20004bbc
 8007ac8:	20004bc4 	.word	0x20004bc4
 8007acc:	20004bc0 	.word	0x20004bc0
 8007ad0:	20004bd0 	.word	0x20004bd0

08007ad4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b085      	sub	sp, #20
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007adc:	4b28      	ldr	r3, [pc, #160]	@ (8007b80 <prvInsertBlockIntoFreeList+0xac>)
 8007ade:	60fb      	str	r3, [r7, #12]
 8007ae0:	e002      	b.n	8007ae8 <prvInsertBlockIntoFreeList+0x14>
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	60fb      	str	r3, [r7, #12]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d8f7      	bhi.n	8007ae2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	68ba      	ldr	r2, [r7, #8]
 8007afc:	4413      	add	r3, r2
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d108      	bne.n	8007b16 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	685a      	ldr	r2, [r3, #4]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	441a      	add	r2, r3
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	68ba      	ldr	r2, [r7, #8]
 8007b20:	441a      	add	r2, r3
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d118      	bne.n	8007b5c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	4b15      	ldr	r3, [pc, #84]	@ (8007b84 <prvInsertBlockIntoFreeList+0xb0>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d00d      	beq.n	8007b52 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	685a      	ldr	r2, [r3, #4]
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	441a      	add	r2, r3
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	601a      	str	r2, [r3, #0]
 8007b50:	e008      	b.n	8007b64 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007b52:	4b0c      	ldr	r3, [pc, #48]	@ (8007b84 <prvInsertBlockIntoFreeList+0xb0>)
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	601a      	str	r2, [r3, #0]
 8007b5a:	e003      	b.n	8007b64 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007b64:	68fa      	ldr	r2, [r7, #12]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d002      	beq.n	8007b72 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b72:	bf00      	nop
 8007b74:	3714      	adds	r7, #20
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr
 8007b7e:	bf00      	nop
 8007b80:	20004bb4 	.word	0x20004bb4
 8007b84:	20004bbc 	.word	0x20004bbc

08007b88 <siprintf>:
 8007b88:	b40e      	push	{r1, r2, r3}
 8007b8a:	b510      	push	{r4, lr}
 8007b8c:	b09d      	sub	sp, #116	@ 0x74
 8007b8e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007b90:	9002      	str	r0, [sp, #8]
 8007b92:	9006      	str	r0, [sp, #24]
 8007b94:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007b98:	480a      	ldr	r0, [pc, #40]	@ (8007bc4 <siprintf+0x3c>)
 8007b9a:	9107      	str	r1, [sp, #28]
 8007b9c:	9104      	str	r1, [sp, #16]
 8007b9e:	490a      	ldr	r1, [pc, #40]	@ (8007bc8 <siprintf+0x40>)
 8007ba0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ba4:	9105      	str	r1, [sp, #20]
 8007ba6:	2400      	movs	r4, #0
 8007ba8:	a902      	add	r1, sp, #8
 8007baa:	6800      	ldr	r0, [r0, #0]
 8007bac:	9301      	str	r3, [sp, #4]
 8007bae:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007bb0:	f000 fa00 	bl	8007fb4 <_svfiprintf_r>
 8007bb4:	9b02      	ldr	r3, [sp, #8]
 8007bb6:	701c      	strb	r4, [r3, #0]
 8007bb8:	b01d      	add	sp, #116	@ 0x74
 8007bba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bbe:	b003      	add	sp, #12
 8007bc0:	4770      	bx	lr
 8007bc2:	bf00      	nop
 8007bc4:	2000002c 	.word	0x2000002c
 8007bc8:	ffff0208 	.word	0xffff0208

08007bcc <memset>:
 8007bcc:	4402      	add	r2, r0
 8007bce:	4603      	mov	r3, r0
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d100      	bne.n	8007bd6 <memset+0xa>
 8007bd4:	4770      	bx	lr
 8007bd6:	f803 1b01 	strb.w	r1, [r3], #1
 8007bda:	e7f9      	b.n	8007bd0 <memset+0x4>

08007bdc <_reclaim_reent>:
 8007bdc:	4b2d      	ldr	r3, [pc, #180]	@ (8007c94 <_reclaim_reent+0xb8>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4283      	cmp	r3, r0
 8007be2:	b570      	push	{r4, r5, r6, lr}
 8007be4:	4604      	mov	r4, r0
 8007be6:	d053      	beq.n	8007c90 <_reclaim_reent+0xb4>
 8007be8:	69c3      	ldr	r3, [r0, #28]
 8007bea:	b31b      	cbz	r3, 8007c34 <_reclaim_reent+0x58>
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	b163      	cbz	r3, 8007c0a <_reclaim_reent+0x2e>
 8007bf0:	2500      	movs	r5, #0
 8007bf2:	69e3      	ldr	r3, [r4, #28]
 8007bf4:	68db      	ldr	r3, [r3, #12]
 8007bf6:	5959      	ldr	r1, [r3, r5]
 8007bf8:	b9b1      	cbnz	r1, 8007c28 <_reclaim_reent+0x4c>
 8007bfa:	3504      	adds	r5, #4
 8007bfc:	2d80      	cmp	r5, #128	@ 0x80
 8007bfe:	d1f8      	bne.n	8007bf2 <_reclaim_reent+0x16>
 8007c00:	69e3      	ldr	r3, [r4, #28]
 8007c02:	4620      	mov	r0, r4
 8007c04:	68d9      	ldr	r1, [r3, #12]
 8007c06:	f000 f881 	bl	8007d0c <_free_r>
 8007c0a:	69e3      	ldr	r3, [r4, #28]
 8007c0c:	6819      	ldr	r1, [r3, #0]
 8007c0e:	b111      	cbz	r1, 8007c16 <_reclaim_reent+0x3a>
 8007c10:	4620      	mov	r0, r4
 8007c12:	f000 f87b 	bl	8007d0c <_free_r>
 8007c16:	69e3      	ldr	r3, [r4, #28]
 8007c18:	689d      	ldr	r5, [r3, #8]
 8007c1a:	b15d      	cbz	r5, 8007c34 <_reclaim_reent+0x58>
 8007c1c:	4629      	mov	r1, r5
 8007c1e:	4620      	mov	r0, r4
 8007c20:	682d      	ldr	r5, [r5, #0]
 8007c22:	f000 f873 	bl	8007d0c <_free_r>
 8007c26:	e7f8      	b.n	8007c1a <_reclaim_reent+0x3e>
 8007c28:	680e      	ldr	r6, [r1, #0]
 8007c2a:	4620      	mov	r0, r4
 8007c2c:	f000 f86e 	bl	8007d0c <_free_r>
 8007c30:	4631      	mov	r1, r6
 8007c32:	e7e1      	b.n	8007bf8 <_reclaim_reent+0x1c>
 8007c34:	6961      	ldr	r1, [r4, #20]
 8007c36:	b111      	cbz	r1, 8007c3e <_reclaim_reent+0x62>
 8007c38:	4620      	mov	r0, r4
 8007c3a:	f000 f867 	bl	8007d0c <_free_r>
 8007c3e:	69e1      	ldr	r1, [r4, #28]
 8007c40:	b111      	cbz	r1, 8007c48 <_reclaim_reent+0x6c>
 8007c42:	4620      	mov	r0, r4
 8007c44:	f000 f862 	bl	8007d0c <_free_r>
 8007c48:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007c4a:	b111      	cbz	r1, 8007c52 <_reclaim_reent+0x76>
 8007c4c:	4620      	mov	r0, r4
 8007c4e:	f000 f85d 	bl	8007d0c <_free_r>
 8007c52:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c54:	b111      	cbz	r1, 8007c5c <_reclaim_reent+0x80>
 8007c56:	4620      	mov	r0, r4
 8007c58:	f000 f858 	bl	8007d0c <_free_r>
 8007c5c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007c5e:	b111      	cbz	r1, 8007c66 <_reclaim_reent+0x8a>
 8007c60:	4620      	mov	r0, r4
 8007c62:	f000 f853 	bl	8007d0c <_free_r>
 8007c66:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007c68:	b111      	cbz	r1, 8007c70 <_reclaim_reent+0x94>
 8007c6a:	4620      	mov	r0, r4
 8007c6c:	f000 f84e 	bl	8007d0c <_free_r>
 8007c70:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007c72:	b111      	cbz	r1, 8007c7a <_reclaim_reent+0x9e>
 8007c74:	4620      	mov	r0, r4
 8007c76:	f000 f849 	bl	8007d0c <_free_r>
 8007c7a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007c7c:	b111      	cbz	r1, 8007c84 <_reclaim_reent+0xa8>
 8007c7e:	4620      	mov	r0, r4
 8007c80:	f000 f844 	bl	8007d0c <_free_r>
 8007c84:	6a23      	ldr	r3, [r4, #32]
 8007c86:	b11b      	cbz	r3, 8007c90 <_reclaim_reent+0xb4>
 8007c88:	4620      	mov	r0, r4
 8007c8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007c8e:	4718      	bx	r3
 8007c90:	bd70      	pop	{r4, r5, r6, pc}
 8007c92:	bf00      	nop
 8007c94:	2000002c 	.word	0x2000002c

08007c98 <__errno>:
 8007c98:	4b01      	ldr	r3, [pc, #4]	@ (8007ca0 <__errno+0x8>)
 8007c9a:	6818      	ldr	r0, [r3, #0]
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop
 8007ca0:	2000002c 	.word	0x2000002c

08007ca4 <__libc_init_array>:
 8007ca4:	b570      	push	{r4, r5, r6, lr}
 8007ca6:	4d0d      	ldr	r5, [pc, #52]	@ (8007cdc <__libc_init_array+0x38>)
 8007ca8:	4c0d      	ldr	r4, [pc, #52]	@ (8007ce0 <__libc_init_array+0x3c>)
 8007caa:	1b64      	subs	r4, r4, r5
 8007cac:	10a4      	asrs	r4, r4, #2
 8007cae:	2600      	movs	r6, #0
 8007cb0:	42a6      	cmp	r6, r4
 8007cb2:	d109      	bne.n	8007cc8 <__libc_init_array+0x24>
 8007cb4:	4d0b      	ldr	r5, [pc, #44]	@ (8007ce4 <__libc_init_array+0x40>)
 8007cb6:	4c0c      	ldr	r4, [pc, #48]	@ (8007ce8 <__libc_init_array+0x44>)
 8007cb8:	f000 fc64 	bl	8008584 <_init>
 8007cbc:	1b64      	subs	r4, r4, r5
 8007cbe:	10a4      	asrs	r4, r4, #2
 8007cc0:	2600      	movs	r6, #0
 8007cc2:	42a6      	cmp	r6, r4
 8007cc4:	d105      	bne.n	8007cd2 <__libc_init_array+0x2e>
 8007cc6:	bd70      	pop	{r4, r5, r6, pc}
 8007cc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ccc:	4798      	blx	r3
 8007cce:	3601      	adds	r6, #1
 8007cd0:	e7ee      	b.n	8007cb0 <__libc_init_array+0xc>
 8007cd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cd6:	4798      	blx	r3
 8007cd8:	3601      	adds	r6, #1
 8007cda:	e7f2      	b.n	8007cc2 <__libc_init_array+0x1e>
 8007cdc:	080089f4 	.word	0x080089f4
 8007ce0:	080089f4 	.word	0x080089f4
 8007ce4:	080089f4 	.word	0x080089f4
 8007ce8:	080089f8 	.word	0x080089f8

08007cec <__retarget_lock_acquire_recursive>:
 8007cec:	4770      	bx	lr

08007cee <__retarget_lock_release_recursive>:
 8007cee:	4770      	bx	lr

08007cf0 <memcpy>:
 8007cf0:	440a      	add	r2, r1
 8007cf2:	4291      	cmp	r1, r2
 8007cf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007cf8:	d100      	bne.n	8007cfc <memcpy+0xc>
 8007cfa:	4770      	bx	lr
 8007cfc:	b510      	push	{r4, lr}
 8007cfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d06:	4291      	cmp	r1, r2
 8007d08:	d1f9      	bne.n	8007cfe <memcpy+0xe>
 8007d0a:	bd10      	pop	{r4, pc}

08007d0c <_free_r>:
 8007d0c:	b538      	push	{r3, r4, r5, lr}
 8007d0e:	4605      	mov	r5, r0
 8007d10:	2900      	cmp	r1, #0
 8007d12:	d041      	beq.n	8007d98 <_free_r+0x8c>
 8007d14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d18:	1f0c      	subs	r4, r1, #4
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	bfb8      	it	lt
 8007d1e:	18e4      	addlt	r4, r4, r3
 8007d20:	f000 f8e0 	bl	8007ee4 <__malloc_lock>
 8007d24:	4a1d      	ldr	r2, [pc, #116]	@ (8007d9c <_free_r+0x90>)
 8007d26:	6813      	ldr	r3, [r2, #0]
 8007d28:	b933      	cbnz	r3, 8007d38 <_free_r+0x2c>
 8007d2a:	6063      	str	r3, [r4, #4]
 8007d2c:	6014      	str	r4, [r2, #0]
 8007d2e:	4628      	mov	r0, r5
 8007d30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d34:	f000 b8dc 	b.w	8007ef0 <__malloc_unlock>
 8007d38:	42a3      	cmp	r3, r4
 8007d3a:	d908      	bls.n	8007d4e <_free_r+0x42>
 8007d3c:	6820      	ldr	r0, [r4, #0]
 8007d3e:	1821      	adds	r1, r4, r0
 8007d40:	428b      	cmp	r3, r1
 8007d42:	bf01      	itttt	eq
 8007d44:	6819      	ldreq	r1, [r3, #0]
 8007d46:	685b      	ldreq	r3, [r3, #4]
 8007d48:	1809      	addeq	r1, r1, r0
 8007d4a:	6021      	streq	r1, [r4, #0]
 8007d4c:	e7ed      	b.n	8007d2a <_free_r+0x1e>
 8007d4e:	461a      	mov	r2, r3
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	b10b      	cbz	r3, 8007d58 <_free_r+0x4c>
 8007d54:	42a3      	cmp	r3, r4
 8007d56:	d9fa      	bls.n	8007d4e <_free_r+0x42>
 8007d58:	6811      	ldr	r1, [r2, #0]
 8007d5a:	1850      	adds	r0, r2, r1
 8007d5c:	42a0      	cmp	r0, r4
 8007d5e:	d10b      	bne.n	8007d78 <_free_r+0x6c>
 8007d60:	6820      	ldr	r0, [r4, #0]
 8007d62:	4401      	add	r1, r0
 8007d64:	1850      	adds	r0, r2, r1
 8007d66:	4283      	cmp	r3, r0
 8007d68:	6011      	str	r1, [r2, #0]
 8007d6a:	d1e0      	bne.n	8007d2e <_free_r+0x22>
 8007d6c:	6818      	ldr	r0, [r3, #0]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	6053      	str	r3, [r2, #4]
 8007d72:	4408      	add	r0, r1
 8007d74:	6010      	str	r0, [r2, #0]
 8007d76:	e7da      	b.n	8007d2e <_free_r+0x22>
 8007d78:	d902      	bls.n	8007d80 <_free_r+0x74>
 8007d7a:	230c      	movs	r3, #12
 8007d7c:	602b      	str	r3, [r5, #0]
 8007d7e:	e7d6      	b.n	8007d2e <_free_r+0x22>
 8007d80:	6820      	ldr	r0, [r4, #0]
 8007d82:	1821      	adds	r1, r4, r0
 8007d84:	428b      	cmp	r3, r1
 8007d86:	bf04      	itt	eq
 8007d88:	6819      	ldreq	r1, [r3, #0]
 8007d8a:	685b      	ldreq	r3, [r3, #4]
 8007d8c:	6063      	str	r3, [r4, #4]
 8007d8e:	bf04      	itt	eq
 8007d90:	1809      	addeq	r1, r1, r0
 8007d92:	6021      	streq	r1, [r4, #0]
 8007d94:	6054      	str	r4, [r2, #4]
 8007d96:	e7ca      	b.n	8007d2e <_free_r+0x22>
 8007d98:	bd38      	pop	{r3, r4, r5, pc}
 8007d9a:	bf00      	nop
 8007d9c:	20004d18 	.word	0x20004d18

08007da0 <sbrk_aligned>:
 8007da0:	b570      	push	{r4, r5, r6, lr}
 8007da2:	4e0f      	ldr	r6, [pc, #60]	@ (8007de0 <sbrk_aligned+0x40>)
 8007da4:	460c      	mov	r4, r1
 8007da6:	6831      	ldr	r1, [r6, #0]
 8007da8:	4605      	mov	r5, r0
 8007daa:	b911      	cbnz	r1, 8007db2 <sbrk_aligned+0x12>
 8007dac:	f000 fba4 	bl	80084f8 <_sbrk_r>
 8007db0:	6030      	str	r0, [r6, #0]
 8007db2:	4621      	mov	r1, r4
 8007db4:	4628      	mov	r0, r5
 8007db6:	f000 fb9f 	bl	80084f8 <_sbrk_r>
 8007dba:	1c43      	adds	r3, r0, #1
 8007dbc:	d103      	bne.n	8007dc6 <sbrk_aligned+0x26>
 8007dbe:	f04f 34ff 	mov.w	r4, #4294967295
 8007dc2:	4620      	mov	r0, r4
 8007dc4:	bd70      	pop	{r4, r5, r6, pc}
 8007dc6:	1cc4      	adds	r4, r0, #3
 8007dc8:	f024 0403 	bic.w	r4, r4, #3
 8007dcc:	42a0      	cmp	r0, r4
 8007dce:	d0f8      	beq.n	8007dc2 <sbrk_aligned+0x22>
 8007dd0:	1a21      	subs	r1, r4, r0
 8007dd2:	4628      	mov	r0, r5
 8007dd4:	f000 fb90 	bl	80084f8 <_sbrk_r>
 8007dd8:	3001      	adds	r0, #1
 8007dda:	d1f2      	bne.n	8007dc2 <sbrk_aligned+0x22>
 8007ddc:	e7ef      	b.n	8007dbe <sbrk_aligned+0x1e>
 8007dde:	bf00      	nop
 8007de0:	20004d14 	.word	0x20004d14

08007de4 <_malloc_r>:
 8007de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007de8:	1ccd      	adds	r5, r1, #3
 8007dea:	f025 0503 	bic.w	r5, r5, #3
 8007dee:	3508      	adds	r5, #8
 8007df0:	2d0c      	cmp	r5, #12
 8007df2:	bf38      	it	cc
 8007df4:	250c      	movcc	r5, #12
 8007df6:	2d00      	cmp	r5, #0
 8007df8:	4606      	mov	r6, r0
 8007dfa:	db01      	blt.n	8007e00 <_malloc_r+0x1c>
 8007dfc:	42a9      	cmp	r1, r5
 8007dfe:	d904      	bls.n	8007e0a <_malloc_r+0x26>
 8007e00:	230c      	movs	r3, #12
 8007e02:	6033      	str	r3, [r6, #0]
 8007e04:	2000      	movs	r0, #0
 8007e06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007ee0 <_malloc_r+0xfc>
 8007e0e:	f000 f869 	bl	8007ee4 <__malloc_lock>
 8007e12:	f8d8 3000 	ldr.w	r3, [r8]
 8007e16:	461c      	mov	r4, r3
 8007e18:	bb44      	cbnz	r4, 8007e6c <_malloc_r+0x88>
 8007e1a:	4629      	mov	r1, r5
 8007e1c:	4630      	mov	r0, r6
 8007e1e:	f7ff ffbf 	bl	8007da0 <sbrk_aligned>
 8007e22:	1c43      	adds	r3, r0, #1
 8007e24:	4604      	mov	r4, r0
 8007e26:	d158      	bne.n	8007eda <_malloc_r+0xf6>
 8007e28:	f8d8 4000 	ldr.w	r4, [r8]
 8007e2c:	4627      	mov	r7, r4
 8007e2e:	2f00      	cmp	r7, #0
 8007e30:	d143      	bne.n	8007eba <_malloc_r+0xd6>
 8007e32:	2c00      	cmp	r4, #0
 8007e34:	d04b      	beq.n	8007ece <_malloc_r+0xea>
 8007e36:	6823      	ldr	r3, [r4, #0]
 8007e38:	4639      	mov	r1, r7
 8007e3a:	4630      	mov	r0, r6
 8007e3c:	eb04 0903 	add.w	r9, r4, r3
 8007e40:	f000 fb5a 	bl	80084f8 <_sbrk_r>
 8007e44:	4581      	cmp	r9, r0
 8007e46:	d142      	bne.n	8007ece <_malloc_r+0xea>
 8007e48:	6821      	ldr	r1, [r4, #0]
 8007e4a:	1a6d      	subs	r5, r5, r1
 8007e4c:	4629      	mov	r1, r5
 8007e4e:	4630      	mov	r0, r6
 8007e50:	f7ff ffa6 	bl	8007da0 <sbrk_aligned>
 8007e54:	3001      	adds	r0, #1
 8007e56:	d03a      	beq.n	8007ece <_malloc_r+0xea>
 8007e58:	6823      	ldr	r3, [r4, #0]
 8007e5a:	442b      	add	r3, r5
 8007e5c:	6023      	str	r3, [r4, #0]
 8007e5e:	f8d8 3000 	ldr.w	r3, [r8]
 8007e62:	685a      	ldr	r2, [r3, #4]
 8007e64:	bb62      	cbnz	r2, 8007ec0 <_malloc_r+0xdc>
 8007e66:	f8c8 7000 	str.w	r7, [r8]
 8007e6a:	e00f      	b.n	8007e8c <_malloc_r+0xa8>
 8007e6c:	6822      	ldr	r2, [r4, #0]
 8007e6e:	1b52      	subs	r2, r2, r5
 8007e70:	d420      	bmi.n	8007eb4 <_malloc_r+0xd0>
 8007e72:	2a0b      	cmp	r2, #11
 8007e74:	d917      	bls.n	8007ea6 <_malloc_r+0xc2>
 8007e76:	1961      	adds	r1, r4, r5
 8007e78:	42a3      	cmp	r3, r4
 8007e7a:	6025      	str	r5, [r4, #0]
 8007e7c:	bf18      	it	ne
 8007e7e:	6059      	strne	r1, [r3, #4]
 8007e80:	6863      	ldr	r3, [r4, #4]
 8007e82:	bf08      	it	eq
 8007e84:	f8c8 1000 	streq.w	r1, [r8]
 8007e88:	5162      	str	r2, [r4, r5]
 8007e8a:	604b      	str	r3, [r1, #4]
 8007e8c:	4630      	mov	r0, r6
 8007e8e:	f000 f82f 	bl	8007ef0 <__malloc_unlock>
 8007e92:	f104 000b 	add.w	r0, r4, #11
 8007e96:	1d23      	adds	r3, r4, #4
 8007e98:	f020 0007 	bic.w	r0, r0, #7
 8007e9c:	1ac2      	subs	r2, r0, r3
 8007e9e:	bf1c      	itt	ne
 8007ea0:	1a1b      	subne	r3, r3, r0
 8007ea2:	50a3      	strne	r3, [r4, r2]
 8007ea4:	e7af      	b.n	8007e06 <_malloc_r+0x22>
 8007ea6:	6862      	ldr	r2, [r4, #4]
 8007ea8:	42a3      	cmp	r3, r4
 8007eaa:	bf0c      	ite	eq
 8007eac:	f8c8 2000 	streq.w	r2, [r8]
 8007eb0:	605a      	strne	r2, [r3, #4]
 8007eb2:	e7eb      	b.n	8007e8c <_malloc_r+0xa8>
 8007eb4:	4623      	mov	r3, r4
 8007eb6:	6864      	ldr	r4, [r4, #4]
 8007eb8:	e7ae      	b.n	8007e18 <_malloc_r+0x34>
 8007eba:	463c      	mov	r4, r7
 8007ebc:	687f      	ldr	r7, [r7, #4]
 8007ebe:	e7b6      	b.n	8007e2e <_malloc_r+0x4a>
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	42a3      	cmp	r3, r4
 8007ec6:	d1fb      	bne.n	8007ec0 <_malloc_r+0xdc>
 8007ec8:	2300      	movs	r3, #0
 8007eca:	6053      	str	r3, [r2, #4]
 8007ecc:	e7de      	b.n	8007e8c <_malloc_r+0xa8>
 8007ece:	230c      	movs	r3, #12
 8007ed0:	6033      	str	r3, [r6, #0]
 8007ed2:	4630      	mov	r0, r6
 8007ed4:	f000 f80c 	bl	8007ef0 <__malloc_unlock>
 8007ed8:	e794      	b.n	8007e04 <_malloc_r+0x20>
 8007eda:	6005      	str	r5, [r0, #0]
 8007edc:	e7d6      	b.n	8007e8c <_malloc_r+0xa8>
 8007ede:	bf00      	nop
 8007ee0:	20004d18 	.word	0x20004d18

08007ee4 <__malloc_lock>:
 8007ee4:	4801      	ldr	r0, [pc, #4]	@ (8007eec <__malloc_lock+0x8>)
 8007ee6:	f7ff bf01 	b.w	8007cec <__retarget_lock_acquire_recursive>
 8007eea:	bf00      	nop
 8007eec:	20004d10 	.word	0x20004d10

08007ef0 <__malloc_unlock>:
 8007ef0:	4801      	ldr	r0, [pc, #4]	@ (8007ef8 <__malloc_unlock+0x8>)
 8007ef2:	f7ff befc 	b.w	8007cee <__retarget_lock_release_recursive>
 8007ef6:	bf00      	nop
 8007ef8:	20004d10 	.word	0x20004d10

08007efc <__ssputs_r>:
 8007efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f00:	688e      	ldr	r6, [r1, #8]
 8007f02:	461f      	mov	r7, r3
 8007f04:	42be      	cmp	r6, r7
 8007f06:	680b      	ldr	r3, [r1, #0]
 8007f08:	4682      	mov	sl, r0
 8007f0a:	460c      	mov	r4, r1
 8007f0c:	4690      	mov	r8, r2
 8007f0e:	d82d      	bhi.n	8007f6c <__ssputs_r+0x70>
 8007f10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007f14:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007f18:	d026      	beq.n	8007f68 <__ssputs_r+0x6c>
 8007f1a:	6965      	ldr	r5, [r4, #20]
 8007f1c:	6909      	ldr	r1, [r1, #16]
 8007f1e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f22:	eba3 0901 	sub.w	r9, r3, r1
 8007f26:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f2a:	1c7b      	adds	r3, r7, #1
 8007f2c:	444b      	add	r3, r9
 8007f2e:	106d      	asrs	r5, r5, #1
 8007f30:	429d      	cmp	r5, r3
 8007f32:	bf38      	it	cc
 8007f34:	461d      	movcc	r5, r3
 8007f36:	0553      	lsls	r3, r2, #21
 8007f38:	d527      	bpl.n	8007f8a <__ssputs_r+0x8e>
 8007f3a:	4629      	mov	r1, r5
 8007f3c:	f7ff ff52 	bl	8007de4 <_malloc_r>
 8007f40:	4606      	mov	r6, r0
 8007f42:	b360      	cbz	r0, 8007f9e <__ssputs_r+0xa2>
 8007f44:	6921      	ldr	r1, [r4, #16]
 8007f46:	464a      	mov	r2, r9
 8007f48:	f7ff fed2 	bl	8007cf0 <memcpy>
 8007f4c:	89a3      	ldrh	r3, [r4, #12]
 8007f4e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007f52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f56:	81a3      	strh	r3, [r4, #12]
 8007f58:	6126      	str	r6, [r4, #16]
 8007f5a:	6165      	str	r5, [r4, #20]
 8007f5c:	444e      	add	r6, r9
 8007f5e:	eba5 0509 	sub.w	r5, r5, r9
 8007f62:	6026      	str	r6, [r4, #0]
 8007f64:	60a5      	str	r5, [r4, #8]
 8007f66:	463e      	mov	r6, r7
 8007f68:	42be      	cmp	r6, r7
 8007f6a:	d900      	bls.n	8007f6e <__ssputs_r+0x72>
 8007f6c:	463e      	mov	r6, r7
 8007f6e:	6820      	ldr	r0, [r4, #0]
 8007f70:	4632      	mov	r2, r6
 8007f72:	4641      	mov	r1, r8
 8007f74:	f000 faa6 	bl	80084c4 <memmove>
 8007f78:	68a3      	ldr	r3, [r4, #8]
 8007f7a:	1b9b      	subs	r3, r3, r6
 8007f7c:	60a3      	str	r3, [r4, #8]
 8007f7e:	6823      	ldr	r3, [r4, #0]
 8007f80:	4433      	add	r3, r6
 8007f82:	6023      	str	r3, [r4, #0]
 8007f84:	2000      	movs	r0, #0
 8007f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f8a:	462a      	mov	r2, r5
 8007f8c:	f000 fac4 	bl	8008518 <_realloc_r>
 8007f90:	4606      	mov	r6, r0
 8007f92:	2800      	cmp	r0, #0
 8007f94:	d1e0      	bne.n	8007f58 <__ssputs_r+0x5c>
 8007f96:	6921      	ldr	r1, [r4, #16]
 8007f98:	4650      	mov	r0, sl
 8007f9a:	f7ff feb7 	bl	8007d0c <_free_r>
 8007f9e:	230c      	movs	r3, #12
 8007fa0:	f8ca 3000 	str.w	r3, [sl]
 8007fa4:	89a3      	ldrh	r3, [r4, #12]
 8007fa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007faa:	81a3      	strh	r3, [r4, #12]
 8007fac:	f04f 30ff 	mov.w	r0, #4294967295
 8007fb0:	e7e9      	b.n	8007f86 <__ssputs_r+0x8a>
	...

08007fb4 <_svfiprintf_r>:
 8007fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fb8:	4698      	mov	r8, r3
 8007fba:	898b      	ldrh	r3, [r1, #12]
 8007fbc:	061b      	lsls	r3, r3, #24
 8007fbe:	b09d      	sub	sp, #116	@ 0x74
 8007fc0:	4607      	mov	r7, r0
 8007fc2:	460d      	mov	r5, r1
 8007fc4:	4614      	mov	r4, r2
 8007fc6:	d510      	bpl.n	8007fea <_svfiprintf_r+0x36>
 8007fc8:	690b      	ldr	r3, [r1, #16]
 8007fca:	b973      	cbnz	r3, 8007fea <_svfiprintf_r+0x36>
 8007fcc:	2140      	movs	r1, #64	@ 0x40
 8007fce:	f7ff ff09 	bl	8007de4 <_malloc_r>
 8007fd2:	6028      	str	r0, [r5, #0]
 8007fd4:	6128      	str	r0, [r5, #16]
 8007fd6:	b930      	cbnz	r0, 8007fe6 <_svfiprintf_r+0x32>
 8007fd8:	230c      	movs	r3, #12
 8007fda:	603b      	str	r3, [r7, #0]
 8007fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8007fe0:	b01d      	add	sp, #116	@ 0x74
 8007fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fe6:	2340      	movs	r3, #64	@ 0x40
 8007fe8:	616b      	str	r3, [r5, #20]
 8007fea:	2300      	movs	r3, #0
 8007fec:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fee:	2320      	movs	r3, #32
 8007ff0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007ff4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ff8:	2330      	movs	r3, #48	@ 0x30
 8007ffa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008198 <_svfiprintf_r+0x1e4>
 8007ffe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008002:	f04f 0901 	mov.w	r9, #1
 8008006:	4623      	mov	r3, r4
 8008008:	469a      	mov	sl, r3
 800800a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800800e:	b10a      	cbz	r2, 8008014 <_svfiprintf_r+0x60>
 8008010:	2a25      	cmp	r2, #37	@ 0x25
 8008012:	d1f9      	bne.n	8008008 <_svfiprintf_r+0x54>
 8008014:	ebba 0b04 	subs.w	fp, sl, r4
 8008018:	d00b      	beq.n	8008032 <_svfiprintf_r+0x7e>
 800801a:	465b      	mov	r3, fp
 800801c:	4622      	mov	r2, r4
 800801e:	4629      	mov	r1, r5
 8008020:	4638      	mov	r0, r7
 8008022:	f7ff ff6b 	bl	8007efc <__ssputs_r>
 8008026:	3001      	adds	r0, #1
 8008028:	f000 80a7 	beq.w	800817a <_svfiprintf_r+0x1c6>
 800802c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800802e:	445a      	add	r2, fp
 8008030:	9209      	str	r2, [sp, #36]	@ 0x24
 8008032:	f89a 3000 	ldrb.w	r3, [sl]
 8008036:	2b00      	cmp	r3, #0
 8008038:	f000 809f 	beq.w	800817a <_svfiprintf_r+0x1c6>
 800803c:	2300      	movs	r3, #0
 800803e:	f04f 32ff 	mov.w	r2, #4294967295
 8008042:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008046:	f10a 0a01 	add.w	sl, sl, #1
 800804a:	9304      	str	r3, [sp, #16]
 800804c:	9307      	str	r3, [sp, #28]
 800804e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008052:	931a      	str	r3, [sp, #104]	@ 0x68
 8008054:	4654      	mov	r4, sl
 8008056:	2205      	movs	r2, #5
 8008058:	f814 1b01 	ldrb.w	r1, [r4], #1
 800805c:	484e      	ldr	r0, [pc, #312]	@ (8008198 <_svfiprintf_r+0x1e4>)
 800805e:	f7f8 f8d7 	bl	8000210 <memchr>
 8008062:	9a04      	ldr	r2, [sp, #16]
 8008064:	b9d8      	cbnz	r0, 800809e <_svfiprintf_r+0xea>
 8008066:	06d0      	lsls	r0, r2, #27
 8008068:	bf44      	itt	mi
 800806a:	2320      	movmi	r3, #32
 800806c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008070:	0711      	lsls	r1, r2, #28
 8008072:	bf44      	itt	mi
 8008074:	232b      	movmi	r3, #43	@ 0x2b
 8008076:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800807a:	f89a 3000 	ldrb.w	r3, [sl]
 800807e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008080:	d015      	beq.n	80080ae <_svfiprintf_r+0xfa>
 8008082:	9a07      	ldr	r2, [sp, #28]
 8008084:	4654      	mov	r4, sl
 8008086:	2000      	movs	r0, #0
 8008088:	f04f 0c0a 	mov.w	ip, #10
 800808c:	4621      	mov	r1, r4
 800808e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008092:	3b30      	subs	r3, #48	@ 0x30
 8008094:	2b09      	cmp	r3, #9
 8008096:	d94b      	bls.n	8008130 <_svfiprintf_r+0x17c>
 8008098:	b1b0      	cbz	r0, 80080c8 <_svfiprintf_r+0x114>
 800809a:	9207      	str	r2, [sp, #28]
 800809c:	e014      	b.n	80080c8 <_svfiprintf_r+0x114>
 800809e:	eba0 0308 	sub.w	r3, r0, r8
 80080a2:	fa09 f303 	lsl.w	r3, r9, r3
 80080a6:	4313      	orrs	r3, r2
 80080a8:	9304      	str	r3, [sp, #16]
 80080aa:	46a2      	mov	sl, r4
 80080ac:	e7d2      	b.n	8008054 <_svfiprintf_r+0xa0>
 80080ae:	9b03      	ldr	r3, [sp, #12]
 80080b0:	1d19      	adds	r1, r3, #4
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	9103      	str	r1, [sp, #12]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	bfbb      	ittet	lt
 80080ba:	425b      	neglt	r3, r3
 80080bc:	f042 0202 	orrlt.w	r2, r2, #2
 80080c0:	9307      	strge	r3, [sp, #28]
 80080c2:	9307      	strlt	r3, [sp, #28]
 80080c4:	bfb8      	it	lt
 80080c6:	9204      	strlt	r2, [sp, #16]
 80080c8:	7823      	ldrb	r3, [r4, #0]
 80080ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80080cc:	d10a      	bne.n	80080e4 <_svfiprintf_r+0x130>
 80080ce:	7863      	ldrb	r3, [r4, #1]
 80080d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80080d2:	d132      	bne.n	800813a <_svfiprintf_r+0x186>
 80080d4:	9b03      	ldr	r3, [sp, #12]
 80080d6:	1d1a      	adds	r2, r3, #4
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	9203      	str	r2, [sp, #12]
 80080dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80080e0:	3402      	adds	r4, #2
 80080e2:	9305      	str	r3, [sp, #20]
 80080e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80081a8 <_svfiprintf_r+0x1f4>
 80080e8:	7821      	ldrb	r1, [r4, #0]
 80080ea:	2203      	movs	r2, #3
 80080ec:	4650      	mov	r0, sl
 80080ee:	f7f8 f88f 	bl	8000210 <memchr>
 80080f2:	b138      	cbz	r0, 8008104 <_svfiprintf_r+0x150>
 80080f4:	9b04      	ldr	r3, [sp, #16]
 80080f6:	eba0 000a 	sub.w	r0, r0, sl
 80080fa:	2240      	movs	r2, #64	@ 0x40
 80080fc:	4082      	lsls	r2, r0
 80080fe:	4313      	orrs	r3, r2
 8008100:	3401      	adds	r4, #1
 8008102:	9304      	str	r3, [sp, #16]
 8008104:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008108:	4824      	ldr	r0, [pc, #144]	@ (800819c <_svfiprintf_r+0x1e8>)
 800810a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800810e:	2206      	movs	r2, #6
 8008110:	f7f8 f87e 	bl	8000210 <memchr>
 8008114:	2800      	cmp	r0, #0
 8008116:	d036      	beq.n	8008186 <_svfiprintf_r+0x1d2>
 8008118:	4b21      	ldr	r3, [pc, #132]	@ (80081a0 <_svfiprintf_r+0x1ec>)
 800811a:	bb1b      	cbnz	r3, 8008164 <_svfiprintf_r+0x1b0>
 800811c:	9b03      	ldr	r3, [sp, #12]
 800811e:	3307      	adds	r3, #7
 8008120:	f023 0307 	bic.w	r3, r3, #7
 8008124:	3308      	adds	r3, #8
 8008126:	9303      	str	r3, [sp, #12]
 8008128:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800812a:	4433      	add	r3, r6
 800812c:	9309      	str	r3, [sp, #36]	@ 0x24
 800812e:	e76a      	b.n	8008006 <_svfiprintf_r+0x52>
 8008130:	fb0c 3202 	mla	r2, ip, r2, r3
 8008134:	460c      	mov	r4, r1
 8008136:	2001      	movs	r0, #1
 8008138:	e7a8      	b.n	800808c <_svfiprintf_r+0xd8>
 800813a:	2300      	movs	r3, #0
 800813c:	3401      	adds	r4, #1
 800813e:	9305      	str	r3, [sp, #20]
 8008140:	4619      	mov	r1, r3
 8008142:	f04f 0c0a 	mov.w	ip, #10
 8008146:	4620      	mov	r0, r4
 8008148:	f810 2b01 	ldrb.w	r2, [r0], #1
 800814c:	3a30      	subs	r2, #48	@ 0x30
 800814e:	2a09      	cmp	r2, #9
 8008150:	d903      	bls.n	800815a <_svfiprintf_r+0x1a6>
 8008152:	2b00      	cmp	r3, #0
 8008154:	d0c6      	beq.n	80080e4 <_svfiprintf_r+0x130>
 8008156:	9105      	str	r1, [sp, #20]
 8008158:	e7c4      	b.n	80080e4 <_svfiprintf_r+0x130>
 800815a:	fb0c 2101 	mla	r1, ip, r1, r2
 800815e:	4604      	mov	r4, r0
 8008160:	2301      	movs	r3, #1
 8008162:	e7f0      	b.n	8008146 <_svfiprintf_r+0x192>
 8008164:	ab03      	add	r3, sp, #12
 8008166:	9300      	str	r3, [sp, #0]
 8008168:	462a      	mov	r2, r5
 800816a:	4b0e      	ldr	r3, [pc, #56]	@ (80081a4 <_svfiprintf_r+0x1f0>)
 800816c:	a904      	add	r1, sp, #16
 800816e:	4638      	mov	r0, r7
 8008170:	f3af 8000 	nop.w
 8008174:	1c42      	adds	r2, r0, #1
 8008176:	4606      	mov	r6, r0
 8008178:	d1d6      	bne.n	8008128 <_svfiprintf_r+0x174>
 800817a:	89ab      	ldrh	r3, [r5, #12]
 800817c:	065b      	lsls	r3, r3, #25
 800817e:	f53f af2d 	bmi.w	8007fdc <_svfiprintf_r+0x28>
 8008182:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008184:	e72c      	b.n	8007fe0 <_svfiprintf_r+0x2c>
 8008186:	ab03      	add	r3, sp, #12
 8008188:	9300      	str	r3, [sp, #0]
 800818a:	462a      	mov	r2, r5
 800818c:	4b05      	ldr	r3, [pc, #20]	@ (80081a4 <_svfiprintf_r+0x1f0>)
 800818e:	a904      	add	r1, sp, #16
 8008190:	4638      	mov	r0, r7
 8008192:	f000 f879 	bl	8008288 <_printf_i>
 8008196:	e7ed      	b.n	8008174 <_svfiprintf_r+0x1c0>
 8008198:	080089b8 	.word	0x080089b8
 800819c:	080089c2 	.word	0x080089c2
 80081a0:	00000000 	.word	0x00000000
 80081a4:	08007efd 	.word	0x08007efd
 80081a8:	080089be 	.word	0x080089be

080081ac <_printf_common>:
 80081ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081b0:	4616      	mov	r6, r2
 80081b2:	4698      	mov	r8, r3
 80081b4:	688a      	ldr	r2, [r1, #8]
 80081b6:	690b      	ldr	r3, [r1, #16]
 80081b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80081bc:	4293      	cmp	r3, r2
 80081be:	bfb8      	it	lt
 80081c0:	4613      	movlt	r3, r2
 80081c2:	6033      	str	r3, [r6, #0]
 80081c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80081c8:	4607      	mov	r7, r0
 80081ca:	460c      	mov	r4, r1
 80081cc:	b10a      	cbz	r2, 80081d2 <_printf_common+0x26>
 80081ce:	3301      	adds	r3, #1
 80081d0:	6033      	str	r3, [r6, #0]
 80081d2:	6823      	ldr	r3, [r4, #0]
 80081d4:	0699      	lsls	r1, r3, #26
 80081d6:	bf42      	ittt	mi
 80081d8:	6833      	ldrmi	r3, [r6, #0]
 80081da:	3302      	addmi	r3, #2
 80081dc:	6033      	strmi	r3, [r6, #0]
 80081de:	6825      	ldr	r5, [r4, #0]
 80081e0:	f015 0506 	ands.w	r5, r5, #6
 80081e4:	d106      	bne.n	80081f4 <_printf_common+0x48>
 80081e6:	f104 0a19 	add.w	sl, r4, #25
 80081ea:	68e3      	ldr	r3, [r4, #12]
 80081ec:	6832      	ldr	r2, [r6, #0]
 80081ee:	1a9b      	subs	r3, r3, r2
 80081f0:	42ab      	cmp	r3, r5
 80081f2:	dc26      	bgt.n	8008242 <_printf_common+0x96>
 80081f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80081f8:	6822      	ldr	r2, [r4, #0]
 80081fa:	3b00      	subs	r3, #0
 80081fc:	bf18      	it	ne
 80081fe:	2301      	movne	r3, #1
 8008200:	0692      	lsls	r2, r2, #26
 8008202:	d42b      	bmi.n	800825c <_printf_common+0xb0>
 8008204:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008208:	4641      	mov	r1, r8
 800820a:	4638      	mov	r0, r7
 800820c:	47c8      	blx	r9
 800820e:	3001      	adds	r0, #1
 8008210:	d01e      	beq.n	8008250 <_printf_common+0xa4>
 8008212:	6823      	ldr	r3, [r4, #0]
 8008214:	6922      	ldr	r2, [r4, #16]
 8008216:	f003 0306 	and.w	r3, r3, #6
 800821a:	2b04      	cmp	r3, #4
 800821c:	bf02      	ittt	eq
 800821e:	68e5      	ldreq	r5, [r4, #12]
 8008220:	6833      	ldreq	r3, [r6, #0]
 8008222:	1aed      	subeq	r5, r5, r3
 8008224:	68a3      	ldr	r3, [r4, #8]
 8008226:	bf0c      	ite	eq
 8008228:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800822c:	2500      	movne	r5, #0
 800822e:	4293      	cmp	r3, r2
 8008230:	bfc4      	itt	gt
 8008232:	1a9b      	subgt	r3, r3, r2
 8008234:	18ed      	addgt	r5, r5, r3
 8008236:	2600      	movs	r6, #0
 8008238:	341a      	adds	r4, #26
 800823a:	42b5      	cmp	r5, r6
 800823c:	d11a      	bne.n	8008274 <_printf_common+0xc8>
 800823e:	2000      	movs	r0, #0
 8008240:	e008      	b.n	8008254 <_printf_common+0xa8>
 8008242:	2301      	movs	r3, #1
 8008244:	4652      	mov	r2, sl
 8008246:	4641      	mov	r1, r8
 8008248:	4638      	mov	r0, r7
 800824a:	47c8      	blx	r9
 800824c:	3001      	adds	r0, #1
 800824e:	d103      	bne.n	8008258 <_printf_common+0xac>
 8008250:	f04f 30ff 	mov.w	r0, #4294967295
 8008254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008258:	3501      	adds	r5, #1
 800825a:	e7c6      	b.n	80081ea <_printf_common+0x3e>
 800825c:	18e1      	adds	r1, r4, r3
 800825e:	1c5a      	adds	r2, r3, #1
 8008260:	2030      	movs	r0, #48	@ 0x30
 8008262:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008266:	4422      	add	r2, r4
 8008268:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800826c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008270:	3302      	adds	r3, #2
 8008272:	e7c7      	b.n	8008204 <_printf_common+0x58>
 8008274:	2301      	movs	r3, #1
 8008276:	4622      	mov	r2, r4
 8008278:	4641      	mov	r1, r8
 800827a:	4638      	mov	r0, r7
 800827c:	47c8      	blx	r9
 800827e:	3001      	adds	r0, #1
 8008280:	d0e6      	beq.n	8008250 <_printf_common+0xa4>
 8008282:	3601      	adds	r6, #1
 8008284:	e7d9      	b.n	800823a <_printf_common+0x8e>
	...

08008288 <_printf_i>:
 8008288:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800828c:	7e0f      	ldrb	r7, [r1, #24]
 800828e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008290:	2f78      	cmp	r7, #120	@ 0x78
 8008292:	4691      	mov	r9, r2
 8008294:	4680      	mov	r8, r0
 8008296:	460c      	mov	r4, r1
 8008298:	469a      	mov	sl, r3
 800829a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800829e:	d807      	bhi.n	80082b0 <_printf_i+0x28>
 80082a0:	2f62      	cmp	r7, #98	@ 0x62
 80082a2:	d80a      	bhi.n	80082ba <_printf_i+0x32>
 80082a4:	2f00      	cmp	r7, #0
 80082a6:	f000 80d1 	beq.w	800844c <_printf_i+0x1c4>
 80082aa:	2f58      	cmp	r7, #88	@ 0x58
 80082ac:	f000 80b8 	beq.w	8008420 <_printf_i+0x198>
 80082b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80082b8:	e03a      	b.n	8008330 <_printf_i+0xa8>
 80082ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80082be:	2b15      	cmp	r3, #21
 80082c0:	d8f6      	bhi.n	80082b0 <_printf_i+0x28>
 80082c2:	a101      	add	r1, pc, #4	@ (adr r1, 80082c8 <_printf_i+0x40>)
 80082c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082c8:	08008321 	.word	0x08008321
 80082cc:	08008335 	.word	0x08008335
 80082d0:	080082b1 	.word	0x080082b1
 80082d4:	080082b1 	.word	0x080082b1
 80082d8:	080082b1 	.word	0x080082b1
 80082dc:	080082b1 	.word	0x080082b1
 80082e0:	08008335 	.word	0x08008335
 80082e4:	080082b1 	.word	0x080082b1
 80082e8:	080082b1 	.word	0x080082b1
 80082ec:	080082b1 	.word	0x080082b1
 80082f0:	080082b1 	.word	0x080082b1
 80082f4:	08008433 	.word	0x08008433
 80082f8:	0800835f 	.word	0x0800835f
 80082fc:	080083ed 	.word	0x080083ed
 8008300:	080082b1 	.word	0x080082b1
 8008304:	080082b1 	.word	0x080082b1
 8008308:	08008455 	.word	0x08008455
 800830c:	080082b1 	.word	0x080082b1
 8008310:	0800835f 	.word	0x0800835f
 8008314:	080082b1 	.word	0x080082b1
 8008318:	080082b1 	.word	0x080082b1
 800831c:	080083f5 	.word	0x080083f5
 8008320:	6833      	ldr	r3, [r6, #0]
 8008322:	1d1a      	adds	r2, r3, #4
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	6032      	str	r2, [r6, #0]
 8008328:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800832c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008330:	2301      	movs	r3, #1
 8008332:	e09c      	b.n	800846e <_printf_i+0x1e6>
 8008334:	6833      	ldr	r3, [r6, #0]
 8008336:	6820      	ldr	r0, [r4, #0]
 8008338:	1d19      	adds	r1, r3, #4
 800833a:	6031      	str	r1, [r6, #0]
 800833c:	0606      	lsls	r6, r0, #24
 800833e:	d501      	bpl.n	8008344 <_printf_i+0xbc>
 8008340:	681d      	ldr	r5, [r3, #0]
 8008342:	e003      	b.n	800834c <_printf_i+0xc4>
 8008344:	0645      	lsls	r5, r0, #25
 8008346:	d5fb      	bpl.n	8008340 <_printf_i+0xb8>
 8008348:	f9b3 5000 	ldrsh.w	r5, [r3]
 800834c:	2d00      	cmp	r5, #0
 800834e:	da03      	bge.n	8008358 <_printf_i+0xd0>
 8008350:	232d      	movs	r3, #45	@ 0x2d
 8008352:	426d      	negs	r5, r5
 8008354:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008358:	4858      	ldr	r0, [pc, #352]	@ (80084bc <_printf_i+0x234>)
 800835a:	230a      	movs	r3, #10
 800835c:	e011      	b.n	8008382 <_printf_i+0xfa>
 800835e:	6821      	ldr	r1, [r4, #0]
 8008360:	6833      	ldr	r3, [r6, #0]
 8008362:	0608      	lsls	r0, r1, #24
 8008364:	f853 5b04 	ldr.w	r5, [r3], #4
 8008368:	d402      	bmi.n	8008370 <_printf_i+0xe8>
 800836a:	0649      	lsls	r1, r1, #25
 800836c:	bf48      	it	mi
 800836e:	b2ad      	uxthmi	r5, r5
 8008370:	2f6f      	cmp	r7, #111	@ 0x6f
 8008372:	4852      	ldr	r0, [pc, #328]	@ (80084bc <_printf_i+0x234>)
 8008374:	6033      	str	r3, [r6, #0]
 8008376:	bf14      	ite	ne
 8008378:	230a      	movne	r3, #10
 800837a:	2308      	moveq	r3, #8
 800837c:	2100      	movs	r1, #0
 800837e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008382:	6866      	ldr	r6, [r4, #4]
 8008384:	60a6      	str	r6, [r4, #8]
 8008386:	2e00      	cmp	r6, #0
 8008388:	db05      	blt.n	8008396 <_printf_i+0x10e>
 800838a:	6821      	ldr	r1, [r4, #0]
 800838c:	432e      	orrs	r6, r5
 800838e:	f021 0104 	bic.w	r1, r1, #4
 8008392:	6021      	str	r1, [r4, #0]
 8008394:	d04b      	beq.n	800842e <_printf_i+0x1a6>
 8008396:	4616      	mov	r6, r2
 8008398:	fbb5 f1f3 	udiv	r1, r5, r3
 800839c:	fb03 5711 	mls	r7, r3, r1, r5
 80083a0:	5dc7      	ldrb	r7, [r0, r7]
 80083a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80083a6:	462f      	mov	r7, r5
 80083a8:	42bb      	cmp	r3, r7
 80083aa:	460d      	mov	r5, r1
 80083ac:	d9f4      	bls.n	8008398 <_printf_i+0x110>
 80083ae:	2b08      	cmp	r3, #8
 80083b0:	d10b      	bne.n	80083ca <_printf_i+0x142>
 80083b2:	6823      	ldr	r3, [r4, #0]
 80083b4:	07df      	lsls	r7, r3, #31
 80083b6:	d508      	bpl.n	80083ca <_printf_i+0x142>
 80083b8:	6923      	ldr	r3, [r4, #16]
 80083ba:	6861      	ldr	r1, [r4, #4]
 80083bc:	4299      	cmp	r1, r3
 80083be:	bfde      	ittt	le
 80083c0:	2330      	movle	r3, #48	@ 0x30
 80083c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80083c6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80083ca:	1b92      	subs	r2, r2, r6
 80083cc:	6122      	str	r2, [r4, #16]
 80083ce:	f8cd a000 	str.w	sl, [sp]
 80083d2:	464b      	mov	r3, r9
 80083d4:	aa03      	add	r2, sp, #12
 80083d6:	4621      	mov	r1, r4
 80083d8:	4640      	mov	r0, r8
 80083da:	f7ff fee7 	bl	80081ac <_printf_common>
 80083de:	3001      	adds	r0, #1
 80083e0:	d14a      	bne.n	8008478 <_printf_i+0x1f0>
 80083e2:	f04f 30ff 	mov.w	r0, #4294967295
 80083e6:	b004      	add	sp, #16
 80083e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083ec:	6823      	ldr	r3, [r4, #0]
 80083ee:	f043 0320 	orr.w	r3, r3, #32
 80083f2:	6023      	str	r3, [r4, #0]
 80083f4:	4832      	ldr	r0, [pc, #200]	@ (80084c0 <_printf_i+0x238>)
 80083f6:	2778      	movs	r7, #120	@ 0x78
 80083f8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80083fc:	6823      	ldr	r3, [r4, #0]
 80083fe:	6831      	ldr	r1, [r6, #0]
 8008400:	061f      	lsls	r7, r3, #24
 8008402:	f851 5b04 	ldr.w	r5, [r1], #4
 8008406:	d402      	bmi.n	800840e <_printf_i+0x186>
 8008408:	065f      	lsls	r7, r3, #25
 800840a:	bf48      	it	mi
 800840c:	b2ad      	uxthmi	r5, r5
 800840e:	6031      	str	r1, [r6, #0]
 8008410:	07d9      	lsls	r1, r3, #31
 8008412:	bf44      	itt	mi
 8008414:	f043 0320 	orrmi.w	r3, r3, #32
 8008418:	6023      	strmi	r3, [r4, #0]
 800841a:	b11d      	cbz	r5, 8008424 <_printf_i+0x19c>
 800841c:	2310      	movs	r3, #16
 800841e:	e7ad      	b.n	800837c <_printf_i+0xf4>
 8008420:	4826      	ldr	r0, [pc, #152]	@ (80084bc <_printf_i+0x234>)
 8008422:	e7e9      	b.n	80083f8 <_printf_i+0x170>
 8008424:	6823      	ldr	r3, [r4, #0]
 8008426:	f023 0320 	bic.w	r3, r3, #32
 800842a:	6023      	str	r3, [r4, #0]
 800842c:	e7f6      	b.n	800841c <_printf_i+0x194>
 800842e:	4616      	mov	r6, r2
 8008430:	e7bd      	b.n	80083ae <_printf_i+0x126>
 8008432:	6833      	ldr	r3, [r6, #0]
 8008434:	6825      	ldr	r5, [r4, #0]
 8008436:	6961      	ldr	r1, [r4, #20]
 8008438:	1d18      	adds	r0, r3, #4
 800843a:	6030      	str	r0, [r6, #0]
 800843c:	062e      	lsls	r6, r5, #24
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	d501      	bpl.n	8008446 <_printf_i+0x1be>
 8008442:	6019      	str	r1, [r3, #0]
 8008444:	e002      	b.n	800844c <_printf_i+0x1c4>
 8008446:	0668      	lsls	r0, r5, #25
 8008448:	d5fb      	bpl.n	8008442 <_printf_i+0x1ba>
 800844a:	8019      	strh	r1, [r3, #0]
 800844c:	2300      	movs	r3, #0
 800844e:	6123      	str	r3, [r4, #16]
 8008450:	4616      	mov	r6, r2
 8008452:	e7bc      	b.n	80083ce <_printf_i+0x146>
 8008454:	6833      	ldr	r3, [r6, #0]
 8008456:	1d1a      	adds	r2, r3, #4
 8008458:	6032      	str	r2, [r6, #0]
 800845a:	681e      	ldr	r6, [r3, #0]
 800845c:	6862      	ldr	r2, [r4, #4]
 800845e:	2100      	movs	r1, #0
 8008460:	4630      	mov	r0, r6
 8008462:	f7f7 fed5 	bl	8000210 <memchr>
 8008466:	b108      	cbz	r0, 800846c <_printf_i+0x1e4>
 8008468:	1b80      	subs	r0, r0, r6
 800846a:	6060      	str	r0, [r4, #4]
 800846c:	6863      	ldr	r3, [r4, #4]
 800846e:	6123      	str	r3, [r4, #16]
 8008470:	2300      	movs	r3, #0
 8008472:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008476:	e7aa      	b.n	80083ce <_printf_i+0x146>
 8008478:	6923      	ldr	r3, [r4, #16]
 800847a:	4632      	mov	r2, r6
 800847c:	4649      	mov	r1, r9
 800847e:	4640      	mov	r0, r8
 8008480:	47d0      	blx	sl
 8008482:	3001      	adds	r0, #1
 8008484:	d0ad      	beq.n	80083e2 <_printf_i+0x15a>
 8008486:	6823      	ldr	r3, [r4, #0]
 8008488:	079b      	lsls	r3, r3, #30
 800848a:	d413      	bmi.n	80084b4 <_printf_i+0x22c>
 800848c:	68e0      	ldr	r0, [r4, #12]
 800848e:	9b03      	ldr	r3, [sp, #12]
 8008490:	4298      	cmp	r0, r3
 8008492:	bfb8      	it	lt
 8008494:	4618      	movlt	r0, r3
 8008496:	e7a6      	b.n	80083e6 <_printf_i+0x15e>
 8008498:	2301      	movs	r3, #1
 800849a:	4632      	mov	r2, r6
 800849c:	4649      	mov	r1, r9
 800849e:	4640      	mov	r0, r8
 80084a0:	47d0      	blx	sl
 80084a2:	3001      	adds	r0, #1
 80084a4:	d09d      	beq.n	80083e2 <_printf_i+0x15a>
 80084a6:	3501      	adds	r5, #1
 80084a8:	68e3      	ldr	r3, [r4, #12]
 80084aa:	9903      	ldr	r1, [sp, #12]
 80084ac:	1a5b      	subs	r3, r3, r1
 80084ae:	42ab      	cmp	r3, r5
 80084b0:	dcf2      	bgt.n	8008498 <_printf_i+0x210>
 80084b2:	e7eb      	b.n	800848c <_printf_i+0x204>
 80084b4:	2500      	movs	r5, #0
 80084b6:	f104 0619 	add.w	r6, r4, #25
 80084ba:	e7f5      	b.n	80084a8 <_printf_i+0x220>
 80084bc:	080089c9 	.word	0x080089c9
 80084c0:	080089da 	.word	0x080089da

080084c4 <memmove>:
 80084c4:	4288      	cmp	r0, r1
 80084c6:	b510      	push	{r4, lr}
 80084c8:	eb01 0402 	add.w	r4, r1, r2
 80084cc:	d902      	bls.n	80084d4 <memmove+0x10>
 80084ce:	4284      	cmp	r4, r0
 80084d0:	4623      	mov	r3, r4
 80084d2:	d807      	bhi.n	80084e4 <memmove+0x20>
 80084d4:	1e43      	subs	r3, r0, #1
 80084d6:	42a1      	cmp	r1, r4
 80084d8:	d008      	beq.n	80084ec <memmove+0x28>
 80084da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80084e2:	e7f8      	b.n	80084d6 <memmove+0x12>
 80084e4:	4402      	add	r2, r0
 80084e6:	4601      	mov	r1, r0
 80084e8:	428a      	cmp	r2, r1
 80084ea:	d100      	bne.n	80084ee <memmove+0x2a>
 80084ec:	bd10      	pop	{r4, pc}
 80084ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80084f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80084f6:	e7f7      	b.n	80084e8 <memmove+0x24>

080084f8 <_sbrk_r>:
 80084f8:	b538      	push	{r3, r4, r5, lr}
 80084fa:	4d06      	ldr	r5, [pc, #24]	@ (8008514 <_sbrk_r+0x1c>)
 80084fc:	2300      	movs	r3, #0
 80084fe:	4604      	mov	r4, r0
 8008500:	4608      	mov	r0, r1
 8008502:	602b      	str	r3, [r5, #0]
 8008504:	f7f8 fed2 	bl	80012ac <_sbrk>
 8008508:	1c43      	adds	r3, r0, #1
 800850a:	d102      	bne.n	8008512 <_sbrk_r+0x1a>
 800850c:	682b      	ldr	r3, [r5, #0]
 800850e:	b103      	cbz	r3, 8008512 <_sbrk_r+0x1a>
 8008510:	6023      	str	r3, [r4, #0]
 8008512:	bd38      	pop	{r3, r4, r5, pc}
 8008514:	20004d0c 	.word	0x20004d0c

08008518 <_realloc_r>:
 8008518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800851c:	4607      	mov	r7, r0
 800851e:	4614      	mov	r4, r2
 8008520:	460d      	mov	r5, r1
 8008522:	b921      	cbnz	r1, 800852e <_realloc_r+0x16>
 8008524:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008528:	4611      	mov	r1, r2
 800852a:	f7ff bc5b 	b.w	8007de4 <_malloc_r>
 800852e:	b92a      	cbnz	r2, 800853c <_realloc_r+0x24>
 8008530:	f7ff fbec 	bl	8007d0c <_free_r>
 8008534:	4625      	mov	r5, r4
 8008536:	4628      	mov	r0, r5
 8008538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800853c:	f000 f81a 	bl	8008574 <_malloc_usable_size_r>
 8008540:	4284      	cmp	r4, r0
 8008542:	4606      	mov	r6, r0
 8008544:	d802      	bhi.n	800854c <_realloc_r+0x34>
 8008546:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800854a:	d8f4      	bhi.n	8008536 <_realloc_r+0x1e>
 800854c:	4621      	mov	r1, r4
 800854e:	4638      	mov	r0, r7
 8008550:	f7ff fc48 	bl	8007de4 <_malloc_r>
 8008554:	4680      	mov	r8, r0
 8008556:	b908      	cbnz	r0, 800855c <_realloc_r+0x44>
 8008558:	4645      	mov	r5, r8
 800855a:	e7ec      	b.n	8008536 <_realloc_r+0x1e>
 800855c:	42b4      	cmp	r4, r6
 800855e:	4622      	mov	r2, r4
 8008560:	4629      	mov	r1, r5
 8008562:	bf28      	it	cs
 8008564:	4632      	movcs	r2, r6
 8008566:	f7ff fbc3 	bl	8007cf0 <memcpy>
 800856a:	4629      	mov	r1, r5
 800856c:	4638      	mov	r0, r7
 800856e:	f7ff fbcd 	bl	8007d0c <_free_r>
 8008572:	e7f1      	b.n	8008558 <_realloc_r+0x40>

08008574 <_malloc_usable_size_r>:
 8008574:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008578:	1f18      	subs	r0, r3, #4
 800857a:	2b00      	cmp	r3, #0
 800857c:	bfbc      	itt	lt
 800857e:	580b      	ldrlt	r3, [r1, r0]
 8008580:	18c0      	addlt	r0, r0, r3
 8008582:	4770      	bx	lr

08008584 <_init>:
 8008584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008586:	bf00      	nop
 8008588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800858a:	bc08      	pop	{r3}
 800858c:	469e      	mov	lr, r3
 800858e:	4770      	bx	lr

08008590 <_fini>:
 8008590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008592:	bf00      	nop
 8008594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008596:	bc08      	pop	{r3}
 8008598:	469e      	mov	lr, r3
 800859a:	4770      	bx	lr
