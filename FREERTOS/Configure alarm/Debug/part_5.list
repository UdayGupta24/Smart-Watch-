
part_5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007dbc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000304  08007f5c  08007f5c  00008f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008260  08008260  0000a06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008260  08008260  00009260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008268  08008268  0000a06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008268  08008268  00009268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800826c  0800826c  0000926c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08008270  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c8c  2000006c  080082dc  0000a06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004cf8  080082dc  0000acf8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b255  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d7b  00000000  00000000  000252f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001640  00000000  00000000  00029070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000114e  00000000  00000000  0002a6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000446a  00000000  00000000  0002b7fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a489  00000000  00000000  0002fc68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e6b2  00000000  00000000  0004a0f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e87a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006244  00000000  00000000  000e87e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  000eea2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007f44 	.word	0x08007f44

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08007f44 	.word	0x08007f44

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b08a      	sub	sp, #40	@ 0x28
 80005c0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c2:	f001 f897 	bl	80016f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c6:	f000 f8d9 	bl	800077c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ca:	f000 f995 	bl	80008f8 <MX_GPIO_Init>
  MX_RTC_Init();
 80005ce:	f000 f943 	bl	8000858 <MX_RTC_Init>
  MX_USART2_UART_Init();
 80005d2:	f000 f967 	bl	80008a4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //SEGGER_SYSVIEW_Conf();
  //xReturned = xTaskCreate(SEGGER_SYSVIEW_InitTask, "Start SYSVIEW", 200, NULL, 4, &startSYSVIEW_handle);
  xReturned=xTaskCreate(menu_function,"menu",200,"menu",2,&xHandlemenu);
 80005d6:	4b55      	ldr	r3, [pc, #340]	@ (800072c <main+0x170>)
 80005d8:	9301      	str	r3, [sp, #4]
 80005da:	2302      	movs	r3, #2
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	4b54      	ldr	r3, [pc, #336]	@ (8000730 <main+0x174>)
 80005e0:	22c8      	movs	r2, #200	@ 0xc8
 80005e2:	4953      	ldr	r1, [pc, #332]	@ (8000730 <main+0x174>)
 80005e4:	4853      	ldr	r0, [pc, #332]	@ (8000734 <main+0x178>)
 80005e6:	f004 ff35 	bl	8005454 <xTaskCreate>
 80005ea:	61f8      	str	r0, [r7, #28]
  configASSERT(xReturned==pdPASS);
 80005ec:	69fb      	ldr	r3, [r7, #28]
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d00b      	beq.n	800060a <main+0x4e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80005f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005f6:	f383 8811 	msr	BASEPRI, r3
 80005fa:	f3bf 8f6f 	isb	sy
 80005fe:	f3bf 8f4f 	dsb	sy
 8000602:	61bb      	str	r3, [r7, #24]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000604:	bf00      	nop
 8000606:	bf00      	nop
 8000608:	e7fd      	b.n	8000606 <main+0x4a>
  xReturned=xTaskCreate(cmd_handler_function,"task_handler",200,"cmd_handler",2,&xHandlecmd_handler);
 800060a:	4b4b      	ldr	r3, [pc, #300]	@ (8000738 <main+0x17c>)
 800060c:	9301      	str	r3, [sp, #4]
 800060e:	2302      	movs	r3, #2
 8000610:	9300      	str	r3, [sp, #0]
 8000612:	4b4a      	ldr	r3, [pc, #296]	@ (800073c <main+0x180>)
 8000614:	22c8      	movs	r2, #200	@ 0xc8
 8000616:	494a      	ldr	r1, [pc, #296]	@ (8000740 <main+0x184>)
 8000618:	484a      	ldr	r0, [pc, #296]	@ (8000744 <main+0x188>)
 800061a:	f004 ff1b 	bl	8005454 <xTaskCreate>
 800061e:	61f8      	str	r0, [r7, #28]
  configASSERT(xReturned==pdPASS);
 8000620:	69fb      	ldr	r3, [r7, #28]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d00b      	beq.n	800063e <main+0x82>
	__asm volatile
 8000626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800062a:	f383 8811 	msr	BASEPRI, r3
 800062e:	f3bf 8f6f 	isb	sy
 8000632:	f3bf 8f4f 	dsb	sy
 8000636:	617b      	str	r3, [r7, #20]
}
 8000638:	bf00      	nop
 800063a:	bf00      	nop
 800063c:	e7fd      	b.n	800063a <main+0x7e>
  xReturned=xTaskCreate(print_task,"print_task",200,"print_task",2,&xHandleprint_task);
 800063e:	4b42      	ldr	r3, [pc, #264]	@ (8000748 <main+0x18c>)
 8000640:	9301      	str	r3, [sp, #4]
 8000642:	2302      	movs	r3, #2
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	4b41      	ldr	r3, [pc, #260]	@ (800074c <main+0x190>)
 8000648:	22c8      	movs	r2, #200	@ 0xc8
 800064a:	4940      	ldr	r1, [pc, #256]	@ (800074c <main+0x190>)
 800064c:	4840      	ldr	r0, [pc, #256]	@ (8000750 <main+0x194>)
 800064e:	f004 ff01 	bl	8005454 <xTaskCreate>
 8000652:	61f8      	str	r0, [r7, #28]
  configASSERT(xReturned==pdPASS);
 8000654:	69fb      	ldr	r3, [r7, #28]
 8000656:	2b01      	cmp	r3, #1
 8000658:	d00b      	beq.n	8000672 <main+0xb6>
	__asm volatile
 800065a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800065e:	f383 8811 	msr	BASEPRI, r3
 8000662:	f3bf 8f6f 	isb	sy
 8000666:	f3bf 8f4f 	dsb	sy
 800066a:	613b      	str	r3, [r7, #16]
}
 800066c:	bf00      	nop
 800066e:	bf00      	nop
 8000670:	e7fd      	b.n	800066e <main+0xb2>
  xReturned=xTaskCreate(alarm_task,"alarm_task",200,"alarm_task",2,&xHandlealarm_task);
 8000672:	4b38      	ldr	r3, [pc, #224]	@ (8000754 <main+0x198>)
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	2302      	movs	r3, #2
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	4b37      	ldr	r3, [pc, #220]	@ (8000758 <main+0x19c>)
 800067c:	22c8      	movs	r2, #200	@ 0xc8
 800067e:	4936      	ldr	r1, [pc, #216]	@ (8000758 <main+0x19c>)
 8000680:	4836      	ldr	r0, [pc, #216]	@ (800075c <main+0x1a0>)
 8000682:	f004 fee7 	bl	8005454 <xTaskCreate>
 8000686:	61f8      	str	r0, [r7, #28]
  configASSERT(xReturned==pdPASS);
 8000688:	69fb      	ldr	r3, [r7, #28]
 800068a:	2b01      	cmp	r3, #1
 800068c:	d00b      	beq.n	80006a6 <main+0xea>
	__asm volatile
 800068e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000692:	f383 8811 	msr	BASEPRI, r3
 8000696:	f3bf 8f6f 	isb	sy
 800069a:	f3bf 8f4f 	dsb	sy
 800069e:	60fb      	str	r3, [r7, #12]
}
 80006a0:	bf00      	nop
 80006a2:	bf00      	nop
 80006a4:	e7fd      	b.n	80006a2 <main+0xe6>

  q_enqueue = xQueueCreate(10, sizeof(char));
 80006a6:	2200      	movs	r2, #0
 80006a8:	2101      	movs	r1, #1
 80006aa:	200a      	movs	r0, #10
 80006ac:	f004 f979 	bl	80049a2 <xQueueGenericCreate>
 80006b0:	4603      	mov	r3, r0
 80006b2:	4a2b      	ldr	r2, [pc, #172]	@ (8000760 <main+0x1a4>)
 80006b4:	6013      	str	r3, [r2, #0]
  configASSERT(q_enqueue != NULL);
 80006b6:	4b2a      	ldr	r3, [pc, #168]	@ (8000760 <main+0x1a4>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d10b      	bne.n	80006d6 <main+0x11a>
	__asm volatile
 80006be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006c2:	f383 8811 	msr	BASEPRI, r3
 80006c6:	f3bf 8f6f 	isb	sy
 80006ca:	f3bf 8f4f 	dsb	sy
 80006ce:	60bb      	str	r3, [r7, #8]
}
 80006d0:	bf00      	nop
 80006d2:	bf00      	nop
 80006d4:	e7fd      	b.n	80006d2 <main+0x116>

  q_print = xQueueCreate(10,sizeof(char*));//change 1
 80006d6:	2200      	movs	r2, #0
 80006d8:	2104      	movs	r1, #4
 80006da:	200a      	movs	r0, #10
 80006dc:	f004 f961 	bl	80049a2 <xQueueGenericCreate>
 80006e0:	4603      	mov	r3, r0
 80006e2:	4a20      	ldr	r2, [pc, #128]	@ (8000764 <main+0x1a8>)
 80006e4:	6013      	str	r3, [r2, #0]
  configASSERT(q_print != NULL);
 80006e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000764 <main+0x1a8>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d10b      	bne.n	8000706 <main+0x14a>
	__asm volatile
 80006ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006f2:	f383 8811 	msr	BASEPRI, r3
 80006f6:	f3bf 8f6f 	isb	sy
 80006fa:	f3bf 8f4f 	dsb	sy
 80006fe:	607b      	str	r3, [r7, #4]
}
 8000700:	bf00      	nop
 8000702:	bf00      	nop
 8000704:	e7fd      	b.n	8000702 <main+0x146>


  HAL_UART_Receive_IT(&huart2, (uint8_t *)&pData, 1);
 8000706:	2201      	movs	r2, #1
 8000708:	4917      	ldr	r1, [pc, #92]	@ (8000768 <main+0x1ac>)
 800070a:	4818      	ldr	r0, [pc, #96]	@ (800076c <main+0x1b0>)
 800070c:	f002 fead 	bl	800346a <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000710:	f003 fe80 	bl	8004414 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000714:	4a16      	ldr	r2, [pc, #88]	@ (8000770 <main+0x1b4>)
 8000716:	2100      	movs	r1, #0
 8000718:	4816      	ldr	r0, [pc, #88]	@ (8000774 <main+0x1b8>)
 800071a:	f003 fec5 	bl	80044a8 <osThreadNew>
 800071e:	4603      	mov	r3, r0
 8000720:	4a15      	ldr	r2, [pc, #84]	@ (8000778 <main+0x1bc>)
 8000722:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000724:	f003 fe9a 	bl	800445c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000728:	bf00      	nop
 800072a:	e7fd      	b.n	8000728 <main+0x16c>
 800072c:	200000f8 	.word	0x200000f8
 8000730:	08007f68 	.word	0x08007f68
 8000734:	080010a1 	.word	0x080010a1
 8000738:	200000f4 	.word	0x200000f4
 800073c:	08007f70 	.word	0x08007f70
 8000740:	08007f7c 	.word	0x08007f7c
 8000744:	08001229 	.word	0x08001229
 8000748:	200000fc 	.word	0x200000fc
 800074c:	08007f8c 	.word	0x08007f8c
 8000750:	080011e9 	.word	0x080011e9
 8000754:	20000100 	.word	0x20000100
 8000758:	08007f98 	.word	0x08007f98
 800075c:	080012a5 	.word	0x080012a5
 8000760:	20000108 	.word	0x20000108
 8000764:	20000104 	.word	0x20000104
 8000768:	2000010c 	.word	0x2000010c
 800076c:	200000a8 	.word	0x200000a8
 8000770:	080081f0 	.word	0x080081f0
 8000774:	08000a79 	.word	0x08000a79
 8000778:	200000f0 	.word	0x200000f0

0800077c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b094      	sub	sp, #80	@ 0x50
 8000780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000782:	f107 0320 	add.w	r3, r7, #32
 8000786:	2230      	movs	r2, #48	@ 0x30
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f006 fefe 	bl	800758c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a0:	2300      	movs	r3, #0
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	4b2a      	ldr	r3, [pc, #168]	@ (8000850 <SystemClock_Config+0xd4>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a8:	4a29      	ldr	r2, [pc, #164]	@ (8000850 <SystemClock_Config+0xd4>)
 80007aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80007b0:	4b27      	ldr	r3, [pc, #156]	@ (8000850 <SystemClock_Config+0xd4>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007bc:	2300      	movs	r3, #0
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	4b24      	ldr	r3, [pc, #144]	@ (8000854 <SystemClock_Config+0xd8>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007c8:	4a22      	ldr	r2, [pc, #136]	@ (8000854 <SystemClock_Config+0xd8>)
 80007ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80007ce:	6013      	str	r3, [r2, #0]
 80007d0:	4b20      	ldr	r3, [pc, #128]	@ (8000854 <SystemClock_Config+0xd8>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80007dc:	230a      	movs	r3, #10
 80007de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e0:	2301      	movs	r3, #1
 80007e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e4:	2310      	movs	r3, #16
 80007e6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007e8:	2301      	movs	r3, #1
 80007ea:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ec:	2302      	movs	r3, #2
 80007ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007f0:	2300      	movs	r3, #0
 80007f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007f4:	2310      	movs	r3, #16
 80007f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007f8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80007fc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007fe:	2304      	movs	r3, #4
 8000800:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000802:	2307      	movs	r3, #7
 8000804:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000806:	f107 0320 	add.w	r3, r7, #32
 800080a:	4618      	mov	r0, r3
 800080c:	f001 fac6 	bl	8001d9c <HAL_RCC_OscConfig>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000816:	f000 f949 	bl	8000aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081a:	230f      	movs	r3, #15
 800081c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081e:	2302      	movs	r3, #2
 8000820:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000826:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800082a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	2102      	movs	r1, #2
 8000836:	4618      	mov	r0, r3
 8000838:	f001 fd28 	bl	800228c <HAL_RCC_ClockConfig>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000842:	f000 f933 	bl	8000aac <Error_Handler>
  }
}
 8000846:	bf00      	nop
 8000848:	3750      	adds	r7, #80	@ 0x50
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40023800 	.word	0x40023800
 8000854:	40007000 	.word	0x40007000

08000858 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800085c:	4b0f      	ldr	r3, [pc, #60]	@ (800089c <MX_RTC_Init+0x44>)
 800085e:	4a10      	ldr	r2, [pc, #64]	@ (80008a0 <MX_RTC_Init+0x48>)
 8000860:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000862:	4b0e      	ldr	r3, [pc, #56]	@ (800089c <MX_RTC_Init+0x44>)
 8000864:	2200      	movs	r2, #0
 8000866:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000868:	4b0c      	ldr	r3, [pc, #48]	@ (800089c <MX_RTC_Init+0x44>)
 800086a:	227f      	movs	r2, #127	@ 0x7f
 800086c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800086e:	4b0b      	ldr	r3, [pc, #44]	@ (800089c <MX_RTC_Init+0x44>)
 8000870:	22ff      	movs	r2, #255	@ 0xff
 8000872:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000874:	4b09      	ldr	r3, [pc, #36]	@ (800089c <MX_RTC_Init+0x44>)
 8000876:	2200      	movs	r2, #0
 8000878:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800087a:	4b08      	ldr	r3, [pc, #32]	@ (800089c <MX_RTC_Init+0x44>)
 800087c:	2200      	movs	r2, #0
 800087e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000880:	4b06      	ldr	r3, [pc, #24]	@ (800089c <MX_RTC_Init+0x44>)
 8000882:	2200      	movs	r2, #0
 8000884:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000886:	4805      	ldr	r0, [pc, #20]	@ (800089c <MX_RTC_Init+0x44>)
 8000888:	f002 f840 	bl	800290c <HAL_RTC_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000892:	f000 f90b 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000088 	.word	0x20000088
 80008a0:	40002800 	.word	0x40002800

080008a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008a8:	4b11      	ldr	r3, [pc, #68]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008aa:	4a12      	ldr	r2, [pc, #72]	@ (80008f4 <MX_USART2_UART_Init+0x50>)
 80008ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ae:	4b10      	ldr	r3, [pc, #64]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008c2:	4b0b      	ldr	r3, [pc, #44]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008c8:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008ca:	220c      	movs	r2, #12
 80008cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ce:	4b08      	ldr	r3, [pc, #32]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d4:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008da:	4805      	ldr	r0, [pc, #20]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008dc:	f002 fcea 	bl	80032b4 <HAL_UART_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008e6:	f000 f8e1 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	200000a8 	.word	0x200000a8
 80008f4:	40004400 	.word	0x40004400

080008f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08a      	sub	sp, #40	@ 0x28
 80008fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
 8000908:	609a      	str	r2, [r3, #8]
 800090a:	60da      	str	r2, [r3, #12]
 800090c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
 8000912:	4b2d      	ldr	r3, [pc, #180]	@ (80009c8 <MX_GPIO_Init+0xd0>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	4a2c      	ldr	r2, [pc, #176]	@ (80009c8 <MX_GPIO_Init+0xd0>)
 8000918:	f043 0304 	orr.w	r3, r3, #4
 800091c:	6313      	str	r3, [r2, #48]	@ 0x30
 800091e:	4b2a      	ldr	r3, [pc, #168]	@ (80009c8 <MX_GPIO_Init+0xd0>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	f003 0304 	and.w	r3, r3, #4
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	4b26      	ldr	r3, [pc, #152]	@ (80009c8 <MX_GPIO_Init+0xd0>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	4a25      	ldr	r2, [pc, #148]	@ (80009c8 <MX_GPIO_Init+0xd0>)
 8000934:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000938:	6313      	str	r3, [r2, #48]	@ 0x30
 800093a:	4b23      	ldr	r3, [pc, #140]	@ (80009c8 <MX_GPIO_Init+0xd0>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	4b1f      	ldr	r3, [pc, #124]	@ (80009c8 <MX_GPIO_Init+0xd0>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	4a1e      	ldr	r2, [pc, #120]	@ (80009c8 <MX_GPIO_Init+0xd0>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	6313      	str	r3, [r2, #48]	@ 0x30
 8000956:	4b1c      	ldr	r3, [pc, #112]	@ (80009c8 <MX_GPIO_Init+0xd0>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	4b18      	ldr	r3, [pc, #96]	@ (80009c8 <MX_GPIO_Init+0xd0>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	4a17      	ldr	r2, [pc, #92]	@ (80009c8 <MX_GPIO_Init+0xd0>)
 800096c:	f043 0302 	orr.w	r3, r3, #2
 8000970:	6313      	str	r3, [r2, #48]	@ 0x30
 8000972:	4b15      	ldr	r3, [pc, #84]	@ (80009c8 <MX_GPIO_Init+0xd0>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	f003 0302 	and.w	r3, r3, #2
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	2120      	movs	r1, #32
 8000982:	4812      	ldr	r0, [pc, #72]	@ (80009cc <MX_GPIO_Init+0xd4>)
 8000984:	f001 f9f0 	bl	8001d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000988:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800098c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800098e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000992:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	4619      	mov	r1, r3
 800099e:	480c      	ldr	r0, [pc, #48]	@ (80009d0 <MX_GPIO_Init+0xd8>)
 80009a0:	f001 f85e 	bl	8001a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009a4:	2320      	movs	r3, #32
 80009a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a8:	2301      	movs	r3, #1
 80009aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2300      	movs	r3, #0
 80009b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	4619      	mov	r1, r3
 80009ba:	4804      	ldr	r0, [pc, #16]	@ (80009cc <MX_GPIO_Init+0xd4>)
 80009bc:	f001 f850 	bl	8001a60 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009c0:	bf00      	nop
 80009c2:	3728      	adds	r7, #40	@ 0x28
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40020000 	.word	0x40020000
 80009d0:	40020800 	.word	0x40020800

080009d4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af02      	add	r7, sp, #8
 80009da:	6078      	str	r0, [r7, #4]
	uint8_t dummy;
	for(uint32_t i=0;i<400;i++);
 80009dc:	2300      	movs	r3, #0
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	e002      	b.n	80009e8 <HAL_UART_RxCpltCallback+0x14>
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	3301      	adds	r3, #1
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80009ee:	d3f8      	bcc.n	80009e2 <HAL_UART_RxCpltCallback+0xe>
	if( xQueueIsQueueFullFromISR(q_enqueue) != pdTRUE)
 80009f0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a68 <HAL_UART_RxCpltCallback+0x94>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4618      	mov	r0, r3
 80009f6:	f004 fc47 	bl	8005288 <xQueueIsQueueFullFromISR>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d007      	beq.n	8000a10 <HAL_UART_RxCpltCallback+0x3c>
	{
		xQueueSendFromISR(q_enqueue,(void*)&pData,NULL);
 8000a00:	4b19      	ldr	r3, [pc, #100]	@ (8000a68 <HAL_UART_RxCpltCallback+0x94>)
 8000a02:	6818      	ldr	r0, [r3, #0]
 8000a04:	2300      	movs	r3, #0
 8000a06:	2200      	movs	r2, #0
 8000a08:	4918      	ldr	r1, [pc, #96]	@ (8000a6c <HAL_UART_RxCpltCallback+0x98>)
 8000a0a:	f004 f92b 	bl	8004c64 <xQueueGenericSendFromISR>
 8000a0e:	e013      	b.n	8000a38 <HAL_UART_RxCpltCallback+0x64>

	}else{
		if(pData == '.')
 8000a10:	4b16      	ldr	r3, [pc, #88]	@ (8000a6c <HAL_UART_RxCpltCallback+0x98>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	2b2e      	cmp	r3, #46	@ 0x2e
 8000a18:	d10e      	bne.n	8000a38 <HAL_UART_RxCpltCallback+0x64>
		{
			xQueueReceiveFromISR(q_enqueue,(void*)&dummy,NULL);//removes the oldest element
 8000a1a:	4b13      	ldr	r3, [pc, #76]	@ (8000a68 <HAL_UART_RxCpltCallback+0x94>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f107 010b 	add.w	r1, r7, #11
 8000a22:	2200      	movs	r2, #0
 8000a24:	4618      	mov	r0, r3
 8000a26:	f004 fa9d 	bl	8004f64 <xQueueReceiveFromISR>
			xQueueSendFromISR(q_enqueue ,(void*)&pData , NULL);
 8000a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a68 <HAL_UART_RxCpltCallback+0x94>)
 8000a2c:	6818      	ldr	r0, [r3, #0]
 8000a2e:	2300      	movs	r3, #0
 8000a30:	2200      	movs	r2, #0
 8000a32:	490e      	ldr	r1, [pc, #56]	@ (8000a6c <HAL_UART_RxCpltCallback+0x98>)
 8000a34:	f004 f916 	bl	8004c64 <xQueueGenericSendFromISR>
		}
	}
	if(pData=='.')
 8000a38:	4b0c      	ldr	r3, [pc, #48]	@ (8000a6c <HAL_UART_RxCpltCallback+0x98>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	2b2e      	cmp	r3, #46	@ 0x2e
 8000a40:	d108      	bne.n	8000a54 <HAL_UART_RxCpltCallback+0x80>
		xTaskNotifyFromISR(xHandlecmd_handler,0,eNoAction,NULL);
 8000a42:	4b0b      	ldr	r3, [pc, #44]	@ (8000a70 <HAL_UART_RxCpltCallback+0x9c>)
 8000a44:	6818      	ldr	r0, [r3, #0]
 8000a46:	2300      	movs	r3, #0
 8000a48:	9300      	str	r3, [sp, #0]
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2100      	movs	r1, #0
 8000a50:	f005 fca8 	bl	80063a4 <xTaskGenericNotifyFromISR>
	  HAL_UART_Receive_IT(&huart2, (uint8_t*)&pData, 1);
 8000a54:	2201      	movs	r2, #1
 8000a56:	4905      	ldr	r1, [pc, #20]	@ (8000a6c <HAL_UART_RxCpltCallback+0x98>)
 8000a58:	4806      	ldr	r0, [pc, #24]	@ (8000a74 <HAL_UART_RxCpltCallback+0xa0>)
 8000a5a:	f002 fd06 	bl	800346a <HAL_UART_Receive_IT>
}
 8000a5e:	bf00      	nop
 8000a60:	3710      	adds	r7, #16
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000108 	.word	0x20000108
 8000a6c:	2000010c 	.word	0x2000010c
 8000a70:	200000f4 	.word	0x200000f4
 8000a74:	200000a8 	.word	0x200000a8

08000a78 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a80:	2001      	movs	r0, #1
 8000a82:	f003 fda3 	bl	80045cc <osDelay>
 8000a86:	e7fb      	b.n	8000a80 <StartDefaultTask+0x8>

08000a88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a04      	ldr	r2, [pc, #16]	@ (8000aa8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d101      	bne.n	8000a9e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000a9a:	f000 fe4d 	bl	8001738 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40000800 	.word	0x40000800

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab0:	b672      	cpsid	i
}
 8000ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <Error_Handler+0x8>

08000ab8 <rtc_configure_alarm_a>:
#include "main.h"
#include "stdio.h"
void rtc_configure_alarm_a(RTC_AlarmTypeDef *alarm)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
    alarm->Alarm = RTC_ALARM_A;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ac6:	625a      	str	r2, [r3, #36]	@ 0x24
    alarm->AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2200      	movs	r2, #0
 8000acc:	61da      	str	r2, [r3, #28]
    alarm->AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;   // ignore date, trigger daily
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000ad4:	615a      	str	r2, [r3, #20]
    alarm->AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2200      	movs	r2, #0
 8000ada:	70da      	strb	r2, [r3, #3]
    alarm->AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	60da      	str	r2, [r3, #12]
    alarm->AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
    alarm->AlarmTime.SubSeconds = 0;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2200      	movs	r2, #0
 8000aec:	605a      	str	r2, [r3, #4]
    //alarm->AlarmSubSecondMask   = RTC_ALARMSUBSECONDMASK_ALL;  // ignore subseconds
    alarm->AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	f04f 6270 	mov.w	r2, #251658240	@ 0xf000000
 8000af4:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_SetAlarm_IT(&hrtc, alarm, RTC_FORMAT_BIN) != HAL_OK)
 8000af6:	2200      	movs	r2, #0
 8000af8:	6879      	ldr	r1, [r7, #4]
 8000afa:	4806      	ldr	r0, [pc, #24]	@ (8000b14 <rtc_configure_alarm_a+0x5c>)
 8000afc:	f001 ff88 	bl	8002a10 <HAL_RTC_SetAlarm_IT>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <rtc_configure_alarm_a+0x52>
    {
        Error_Handler(); // check for errors
 8000b06:	f7ff ffd1 	bl	8000aac <Error_Handler>
    }
}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000088 	.word	0x20000088

08000b18 <rtc_configure_alarm_b>:


void rtc_configure_alarm_b(RTC_AlarmTypeDef *alarm)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	alarm->Alarm = RTC_ALARM_B;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b26:	625a      	str	r2, [r3, #36]	@ 0x24
	alarm->AlarmMask = RTC_ALARMMASK_NONE ;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	615a      	str	r2, [r3, #20]
	alarm->AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2200      	movs	r2, #0
 8000b32:	61da      	str	r2, [r3, #28]
	alarm->AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2200      	movs	r2, #0
 8000b38:	70da      	strb	r2, [r3, #3]
	alarm->AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	60da      	str	r2, [r3, #12]
	alarm->AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2200      	movs	r2, #0
 8000b44:	611a      	str	r2, [r3, #16]
	alarm->AlarmTime.SubSeconds = 0;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2200      	movs	r2, #0
 8000b4a:	605a      	str	r2, [r3, #4]
	alarm->AlarmSubSecondMask   = RTC_ALARMSUBSECONDMASK_NONE;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f04f 6270 	mov.w	r2, #251658240	@ 0xf000000
 8000b52:	619a      	str	r2, [r3, #24]


	HAL_RTC_SetAlarm_IT(&hrtc, alarm, RTC_FORMAT_BIN);
 8000b54:	2200      	movs	r2, #0
 8000b56:	6879      	ldr	r1, [r7, #4]
 8000b58:	4803      	ldr	r0, [pc, #12]	@ (8000b68 <rtc_configure_alarm_b+0x50>)
 8000b5a:	f001 ff59 	bl	8002a10 <HAL_RTC_SetAlarm_IT>
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000088 	.word	0x20000088

08000b6c <bcd2dec>:

static inline uint8_t bcd2dec(uint8_t bcd)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]
    return ((bcd >> 4) * 10) + (bcd & 0x0F);
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	091b      	lsrs	r3, r3, #4
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	0092      	lsls	r2, r2, #2
 8000b80:	4413      	add	r3, r2
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	b2da      	uxtb	r2, r3
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	f003 030f 	and.w	r3, r3, #15
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	4413      	add	r3, r2
 8000b90:	b2db      	uxtb	r3, r3
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
	...

08000ba0 <show_alarm_settings_of_a>:
void show_alarm_settings_of_a(void)
{
 8000ba0:	b590      	push	{r4, r7, lr}
 8000ba2:	b091      	sub	sp, #68	@ 0x44
 8000ba4:	af04      	add	r7, sp, #16
    static char *time = showalarm;

    RTC_AlarmTypeDef rtc_alarm;

    // Read raw register values (RTC ALARM A registers)
    rtc_alarm.AlarmTime.Hours   = bcd2dec((RTC->ALRMAR >> 16) & 0x3F);
 8000ba6:	4b30      	ldr	r3, [pc, #192]	@ (8000c68 <show_alarm_settings_of_a+0xc8>)
 8000ba8:	69db      	ldr	r3, [r3, #28]
 8000baa:	0c1b      	lsrs	r3, r3, #16
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff ffd9 	bl	8000b6c <bcd2dec>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	713b      	strb	r3, [r7, #4]
    rtc_alarm.AlarmTime.Minutes = bcd2dec((RTC->ALRMAR >> 8)  & 0x7F);
 8000bbe:	4b2a      	ldr	r3, [pc, #168]	@ (8000c68 <show_alarm_settings_of_a+0xc8>)
 8000bc0:	69db      	ldr	r3, [r3, #28]
 8000bc2:	0a1b      	lsrs	r3, r3, #8
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff ffcd 	bl	8000b6c <bcd2dec>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	717b      	strb	r3, [r7, #5]
    rtc_alarm.AlarmTime.Seconds = bcd2dec((RTC->ALRMAR)       & 0x7F);
 8000bd6:	4b24      	ldr	r3, [pc, #144]	@ (8000c68 <show_alarm_settings_of_a+0xc8>)
 8000bd8:	69db      	ldr	r3, [r3, #28]
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff ffc2 	bl	8000b6c <bcd2dec>
 8000be8:	4603      	mov	r3, r0
 8000bea:	71bb      	strb	r3, [r7, #6]
    rtc_alarm.AlarmDateWeekDay  = bcd2dec((RTC->ALRMAR >> 24) & 0x3F);
 8000bec:	4b1e      	ldr	r3, [pc, #120]	@ (8000c68 <show_alarm_settings_of_a+0xc8>)
 8000bee:	69db      	ldr	r3, [r3, #28]
 8000bf0:	0e1b      	lsrs	r3, r3, #24
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff ffb6 	bl	8000b6c <bcd2dec>
 8000c00:	4603      	mov	r3, r0
 8000c02:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

    rtc_alarm.AlarmTime.TimeFormat = (RTC->ALRMAR & RTC_ALRMAR_PM) ? RTC_HOURFORMAT12_PM : RTC_HOURFORMAT12_AM;
 8000c06:	4b18      	ldr	r3, [pc, #96]	@ (8000c68 <show_alarm_settings_of_a+0xc8>)
 8000c08:	69db      	ldr	r3, [r3, #28]
 8000c0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	bf14      	ite	ne
 8000c12:	2301      	movne	r3, #1
 8000c14:	2300      	moveq	r3, #0
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	71fb      	strb	r3, [r7, #7]

    char *format = (rtc_alarm.AlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d101      	bne.n	8000c24 <show_alarm_settings_of_a+0x84>
 8000c20:	4b12      	ldr	r3, [pc, #72]	@ (8000c6c <show_alarm_settings_of_a+0xcc>)
 8000c22:	e000      	b.n	8000c26 <show_alarm_settings_of_a+0x86>
 8000c24:	4b12      	ldr	r3, [pc, #72]	@ (8000c70 <show_alarm_settings_of_a+0xd0>)
 8000c26:	62fb      	str	r3, [r7, #44]	@ 0x2c

    sprintf(showalarm,
            "\nAlarm Setting of A:\t%02d:%02d:%02d:%02d [%s]",
            rtc_alarm.AlarmDateWeekDay,
 8000c28:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
    sprintf(showalarm,
 8000c2c:	4618      	mov	r0, r3
            rtc_alarm.AlarmTime.Hours,
 8000c2e:	793b      	ldrb	r3, [r7, #4]
    sprintf(showalarm,
 8000c30:	461c      	mov	r4, r3
            rtc_alarm.AlarmTime.Minutes,
 8000c32:	797b      	ldrb	r3, [r7, #5]
    sprintf(showalarm,
 8000c34:	461a      	mov	r2, r3
            rtc_alarm.AlarmTime.Seconds,
 8000c36:	79bb      	ldrb	r3, [r7, #6]
    sprintf(showalarm,
 8000c38:	4619      	mov	r1, r3
 8000c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c3c:	9302      	str	r3, [sp, #8]
 8000c3e:	9101      	str	r1, [sp, #4]
 8000c40:	9200      	str	r2, [sp, #0]
 8000c42:	4623      	mov	r3, r4
 8000c44:	4602      	mov	r2, r0
 8000c46:	490b      	ldr	r1, [pc, #44]	@ (8000c74 <show_alarm_settings_of_a+0xd4>)
 8000c48:	480b      	ldr	r0, [pc, #44]	@ (8000c78 <show_alarm_settings_of_a+0xd8>)
 8000c4a:	f006 fc7d 	bl	8007548 <siprintf>
            format);

    xQueueSend(q_print, &time, portMAX_DELAY);
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c7c <show_alarm_settings_of_a+0xdc>)
 8000c50:	6818      	ldr	r0, [r3, #0]
 8000c52:	2300      	movs	r3, #0
 8000c54:	f04f 32ff 	mov.w	r2, #4294967295
 8000c58:	4909      	ldr	r1, [pc, #36]	@ (8000c80 <show_alarm_settings_of_a+0xe0>)
 8000c5a:	f003 ff01 	bl	8004a60 <xQueueGenericSend>
}
 8000c5e:	bf00      	nop
 8000c60:	3734      	adds	r7, #52	@ 0x34
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd90      	pop	{r4, r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40002800 	.word	0x40002800
 8000c6c:	08007fa4 	.word	0x08007fa4
 8000c70:	08007fa8 	.word	0x08007fa8
 8000c74:	08007fac 	.word	0x08007fac
 8000c78:	20000118 	.word	0x20000118
 8000c7c:	20000104 	.word	0x20000104
 8000c80:	20000000 	.word	0x20000000

08000c84 <show_alarm_settings_of_b>:

void show_alarm_settings_of_b(void)
{
 8000c84:	b590      	push	{r4, r7, lr}
 8000c86:	b091      	sub	sp, #68	@ 0x44
 8000c88:	af04      	add	r7, sp, #16
    static char *time = showalarm;

    RTC_AlarmTypeDef rtc_alarm;

    // Read raw register values (RTC ALARM B registers)
    rtc_alarm.AlarmTime.Hours   = bcd2dec((RTC->ALRMBR >> 16) & 0x3F);
 8000c8a:	4b30      	ldr	r3, [pc, #192]	@ (8000d4c <show_alarm_settings_of_b+0xc8>)
 8000c8c:	6a1b      	ldr	r3, [r3, #32]
 8000c8e:	0c1b      	lsrs	r3, r3, #16
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff ff67 	bl	8000b6c <bcd2dec>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	713b      	strb	r3, [r7, #4]
    rtc_alarm.AlarmTime.Minutes = bcd2dec((RTC->ALRMBR >> 8)  & 0x7F);
 8000ca2:	4b2a      	ldr	r3, [pc, #168]	@ (8000d4c <show_alarm_settings_of_b+0xc8>)
 8000ca4:	6a1b      	ldr	r3, [r3, #32]
 8000ca6:	0a1b      	lsrs	r3, r3, #8
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff ff5b 	bl	8000b6c <bcd2dec>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	717b      	strb	r3, [r7, #5]
    rtc_alarm.AlarmTime.Seconds = bcd2dec((RTC->ALRMBR)       & 0x7F);
 8000cba:	4b24      	ldr	r3, [pc, #144]	@ (8000d4c <show_alarm_settings_of_b+0xc8>)
 8000cbc:	6a1b      	ldr	r3, [r3, #32]
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff ff50 	bl	8000b6c <bcd2dec>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	71bb      	strb	r3, [r7, #6]
    rtc_alarm.AlarmDateWeekDay  = bcd2dec((RTC->ALRMBR >> 24) & 0x3F);
 8000cd0:	4b1e      	ldr	r3, [pc, #120]	@ (8000d4c <show_alarm_settings_of_b+0xc8>)
 8000cd2:	6a1b      	ldr	r3, [r3, #32]
 8000cd4:	0e1b      	lsrs	r3, r3, #24
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff ff44 	bl	8000b6c <bcd2dec>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

    rtc_alarm.AlarmTime.TimeFormat = (RTC->ALRMBR & RTC_ALRMBR_PM) ? RTC_HOURFORMAT12_PM : RTC_HOURFORMAT12_AM;
 8000cea:	4b18      	ldr	r3, [pc, #96]	@ (8000d4c <show_alarm_settings_of_b+0xc8>)
 8000cec:	6a1b      	ldr	r3, [r3, #32]
 8000cee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	bf14      	ite	ne
 8000cf6:	2301      	movne	r3, #1
 8000cf8:	2300      	moveq	r3, #0
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	71fb      	strb	r3, [r7, #7]

    char *format = (rtc_alarm.AlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d101      	bne.n	8000d08 <show_alarm_settings_of_b+0x84>
 8000d04:	4b12      	ldr	r3, [pc, #72]	@ (8000d50 <show_alarm_settings_of_b+0xcc>)
 8000d06:	e000      	b.n	8000d0a <show_alarm_settings_of_b+0x86>
 8000d08:	4b12      	ldr	r3, [pc, #72]	@ (8000d54 <show_alarm_settings_of_b+0xd0>)
 8000d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    sprintf(showalarm,
            "\nAlarm Setting of B:\t%02d:%02d:%02d:%02d [%s]",
            rtc_alarm.AlarmDateWeekDay,
 8000d0c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
    sprintf(showalarm,
 8000d10:	4618      	mov	r0, r3
            rtc_alarm.AlarmTime.Hours,
 8000d12:	793b      	ldrb	r3, [r7, #4]
    sprintf(showalarm,
 8000d14:	461c      	mov	r4, r3
            rtc_alarm.AlarmTime.Minutes,
 8000d16:	797b      	ldrb	r3, [r7, #5]
    sprintf(showalarm,
 8000d18:	461a      	mov	r2, r3
            rtc_alarm.AlarmTime.Seconds,
 8000d1a:	79bb      	ldrb	r3, [r7, #6]
    sprintf(showalarm,
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d20:	9302      	str	r3, [sp, #8]
 8000d22:	9101      	str	r1, [sp, #4]
 8000d24:	9200      	str	r2, [sp, #0]
 8000d26:	4623      	mov	r3, r4
 8000d28:	4602      	mov	r2, r0
 8000d2a:	490b      	ldr	r1, [pc, #44]	@ (8000d58 <show_alarm_settings_of_b+0xd4>)
 8000d2c:	480b      	ldr	r0, [pc, #44]	@ (8000d5c <show_alarm_settings_of_b+0xd8>)
 8000d2e:	f006 fc0b 	bl	8007548 <siprintf>
            format);

    xQueueSend(q_print, &time, portMAX_DELAY);
 8000d32:	4b0b      	ldr	r3, [pc, #44]	@ (8000d60 <show_alarm_settings_of_b+0xdc>)
 8000d34:	6818      	ldr	r0, [r3, #0]
 8000d36:	2300      	movs	r3, #0
 8000d38:	f04f 32ff 	mov.w	r2, #4294967295
 8000d3c:	4909      	ldr	r1, [pc, #36]	@ (8000d64 <show_alarm_settings_of_b+0xe0>)
 8000d3e:	f003 fe8f 	bl	8004a60 <xQueueGenericSend>
}
 8000d42:	bf00      	nop
 8000d44:	3734      	adds	r7, #52	@ 0x34
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd90      	pop	{r4, r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40002800 	.word	0x40002800
 8000d50:	08007fa4 	.word	0x08007fa4
 8000d54:	08007fa8 	.word	0x08007fa8
 8000d58:	08007fdc 	.word	0x08007fdc
 8000d5c:	20000140 	.word	0x20000140
 8000d60:	20000104 	.word	0x20000104
 8000d64:	20000004 	.word	0x20000004

08000d68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	4b12      	ldr	r3, [pc, #72]	@ (8000dbc <HAL_MspInit+0x54>)
 8000d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d76:	4a11      	ldr	r2, [pc, #68]	@ (8000dbc <HAL_MspInit+0x54>)
 8000d78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000dbc <HAL_MspInit+0x54>)
 8000d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	603b      	str	r3, [r7, #0]
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000dbc <HAL_MspInit+0x54>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d92:	4a0a      	ldr	r2, [pc, #40]	@ (8000dbc <HAL_MspInit+0x54>)
 8000d94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d9a:	4b08      	ldr	r3, [pc, #32]	@ (8000dbc <HAL_MspInit+0x54>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000da2:	603b      	str	r3, [r7, #0]
 8000da4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000da6:	2200      	movs	r2, #0
 8000da8:	210f      	movs	r1, #15
 8000daa:	f06f 0001 	mvn.w	r0, #1
 8000dae:	f000 fd9b 	bl	80018e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40023800 	.word	0x40023800

08000dc0 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b088      	sub	sp, #32
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dc8:	f107 030c 	add.w	r3, r7, #12
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a0c      	ldr	r2, [pc, #48]	@ (8000e10 <HAL_RTC_MspInit+0x50>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d111      	bne.n	8000e06 <HAL_RTC_MspInit+0x46>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000de2:	2302      	movs	r3, #2
 8000de4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000de6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000dea:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dec:	f107 030c 	add.w	r3, r7, #12
 8000df0:	4618      	mov	r0, r3
 8000df2:	f001 fc9d 	bl	8002730 <HAL_RCCEx_PeriphCLKConfig>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000dfc:	f7ff fe56 	bl	8000aac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e00:	4b04      	ldr	r3, [pc, #16]	@ (8000e14 <HAL_RTC_MspInit+0x54>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8000e06:	bf00      	nop
 8000e08:	3720      	adds	r7, #32
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40002800 	.word	0x40002800
 8000e14:	42470e3c 	.word	0x42470e3c

08000e18 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08a      	sub	sp, #40	@ 0x28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a1d      	ldr	r2, [pc, #116]	@ (8000eac <HAL_UART_MspInit+0x94>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d133      	bne.n	8000ea2 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
 8000e3e:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb0 <HAL_UART_MspInit+0x98>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e42:	4a1b      	ldr	r2, [pc, #108]	@ (8000eb0 <HAL_UART_MspInit+0x98>)
 8000e44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e48:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e4a:	4b19      	ldr	r3, [pc, #100]	@ (8000eb0 <HAL_UART_MspInit+0x98>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	4b15      	ldr	r3, [pc, #84]	@ (8000eb0 <HAL_UART_MspInit+0x98>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5e:	4a14      	ldr	r2, [pc, #80]	@ (8000eb0 <HAL_UART_MspInit+0x98>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e66:	4b12      	ldr	r3, [pc, #72]	@ (8000eb0 <HAL_UART_MspInit+0x98>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e72:	230c      	movs	r3, #12
 8000e74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e82:	2307      	movs	r3, #7
 8000e84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e86:	f107 0314 	add.w	r3, r7, #20
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4809      	ldr	r0, [pc, #36]	@ (8000eb4 <HAL_UART_MspInit+0x9c>)
 8000e8e:	f000 fde7 	bl	8001a60 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2106      	movs	r1, #6
 8000e96:	2026      	movs	r0, #38	@ 0x26
 8000e98:	f000 fd26 	bl	80018e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e9c:	2026      	movs	r0, #38	@ 0x26
 8000e9e:	f000 fd3f 	bl	8001920 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ea2:	bf00      	nop
 8000ea4:	3728      	adds	r7, #40	@ 0x28
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40004400 	.word	0x40004400
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40020000 	.word	0x40020000

08000eb8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08e      	sub	sp, #56	@ 0x38
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	4b33      	ldr	r3, [pc, #204]	@ (8000f9c <HAL_InitTick+0xe4>)
 8000ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed0:	4a32      	ldr	r2, [pc, #200]	@ (8000f9c <HAL_InitTick+0xe4>)
 8000ed2:	f043 0304 	orr.w	r3, r3, #4
 8000ed6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ed8:	4b30      	ldr	r3, [pc, #192]	@ (8000f9c <HAL_InitTick+0xe4>)
 8000eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000edc:	f003 0304 	and.w	r3, r3, #4
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ee4:	f107 0210 	add.w	r2, r7, #16
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	4611      	mov	r1, r2
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f001 fbec 	bl	80026cc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ef4:	6a3b      	ldr	r3, [r7, #32]
 8000ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d103      	bne.n	8000f06 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000efe:	f001 fbbd 	bl	800267c <HAL_RCC_GetPCLK1Freq>
 8000f02:	6378      	str	r0, [r7, #52]	@ 0x34
 8000f04:	e004      	b.n	8000f10 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f06:	f001 fbb9 	bl	800267c <HAL_RCC_GetPCLK1Freq>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f12:	4a23      	ldr	r2, [pc, #140]	@ (8000fa0 <HAL_InitTick+0xe8>)
 8000f14:	fba2 2303 	umull	r2, r3, r2, r3
 8000f18:	0c9b      	lsrs	r3, r3, #18
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000f1e:	4b21      	ldr	r3, [pc, #132]	@ (8000fa4 <HAL_InitTick+0xec>)
 8000f20:	4a21      	ldr	r2, [pc, #132]	@ (8000fa8 <HAL_InitTick+0xf0>)
 8000f22:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000f24:	4b1f      	ldr	r3, [pc, #124]	@ (8000fa4 <HAL_InitTick+0xec>)
 8000f26:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f2a:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000f2c:	4a1d      	ldr	r2, [pc, #116]	@ (8000fa4 <HAL_InitTick+0xec>)
 8000f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f30:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000f32:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa4 <HAL_InitTick+0xec>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f38:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa4 <HAL_InitTick+0xec>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f3e:	4b19      	ldr	r3, [pc, #100]	@ (8000fa4 <HAL_InitTick+0xec>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000f44:	4817      	ldr	r0, [pc, #92]	@ (8000fa4 <HAL_InitTick+0xec>)
 8000f46:	f001 ff47 	bl	8002dd8 <HAL_TIM_Base_Init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000f50:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d11b      	bne.n	8000f90 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000f58:	4812      	ldr	r0, [pc, #72]	@ (8000fa4 <HAL_InitTick+0xec>)
 8000f5a:	f001 ff97 	bl	8002e8c <HAL_TIM_Base_Start_IT>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000f64:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d111      	bne.n	8000f90 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f6c:	201e      	movs	r0, #30
 8000f6e:	f000 fcd7 	bl	8001920 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2b0f      	cmp	r3, #15
 8000f76:	d808      	bhi.n	8000f8a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	6879      	ldr	r1, [r7, #4]
 8000f7c:	201e      	movs	r0, #30
 8000f7e:	f000 fcb3 	bl	80018e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f82:	4a0a      	ldr	r2, [pc, #40]	@ (8000fac <HAL_InitTick+0xf4>)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6013      	str	r3, [r2, #0]
 8000f88:	e002      	b.n	8000f90 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f90:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3738      	adds	r7, #56	@ 0x38
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	431bde83 	.word	0x431bde83
 8000fa4:	20000168 	.word	0x20000168
 8000fa8:	40000800 	.word	0x40000800
 8000fac:	20000010 	.word	0x20000010

08000fb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <NMI_Handler+0x4>

08000fb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fbc:	bf00      	nop
 8000fbe:	e7fd      	b.n	8000fbc <HardFault_Handler+0x4>

08000fc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc4:	bf00      	nop
 8000fc6:	e7fd      	b.n	8000fc4 <MemManage_Handler+0x4>

08000fc8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fcc:	bf00      	nop
 8000fce:	e7fd      	b.n	8000fcc <BusFault_Handler+0x4>

08000fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <UsageFault_Handler+0x4>

08000fd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
	...

08000fe8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000fec:	4802      	ldr	r0, [pc, #8]	@ (8000ff8 <TIM4_IRQHandler+0x10>)
 8000fee:	f001 ffaf 	bl	8002f50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000168 	.word	0x20000168

08000ffc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001000:	4802      	ldr	r0, [pc, #8]	@ (800100c <USART2_IRQHandler+0x10>)
 8001002:	f002 fa57 	bl	80034b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	200000a8 	.word	0x200000a8

08001010 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001018:	4a14      	ldr	r2, [pc, #80]	@ (800106c <_sbrk+0x5c>)
 800101a:	4b15      	ldr	r3, [pc, #84]	@ (8001070 <_sbrk+0x60>)
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001024:	4b13      	ldr	r3, [pc, #76]	@ (8001074 <_sbrk+0x64>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d102      	bne.n	8001032 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800102c:	4b11      	ldr	r3, [pc, #68]	@ (8001074 <_sbrk+0x64>)
 800102e:	4a12      	ldr	r2, [pc, #72]	@ (8001078 <_sbrk+0x68>)
 8001030:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001032:	4b10      	ldr	r3, [pc, #64]	@ (8001074 <_sbrk+0x64>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4413      	add	r3, r2
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	429a      	cmp	r2, r3
 800103e:	d207      	bcs.n	8001050 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001040:	f006 fb0a 	bl	8007658 <__errno>
 8001044:	4603      	mov	r3, r0
 8001046:	220c      	movs	r2, #12
 8001048:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800104a:	f04f 33ff 	mov.w	r3, #4294967295
 800104e:	e009      	b.n	8001064 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001050:	4b08      	ldr	r3, [pc, #32]	@ (8001074 <_sbrk+0x64>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001056:	4b07      	ldr	r3, [pc, #28]	@ (8001074 <_sbrk+0x64>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4413      	add	r3, r2
 800105e:	4a05      	ldr	r2, [pc, #20]	@ (8001074 <_sbrk+0x64>)
 8001060:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001062:	68fb      	ldr	r3, [r7, #12]
}
 8001064:	4618      	mov	r0, r3
 8001066:	3718      	adds	r7, #24
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20018000 	.word	0x20018000
 8001070:	00000400 	.word	0x00000400
 8001074:	200001b0 	.word	0x200001b0
 8001078:	20004cf8 	.word	0x20004cf8

0800107c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001080:	4b06      	ldr	r3, [pc, #24]	@ (800109c <SystemInit+0x20>)
 8001082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001086:	4a05      	ldr	r2, [pc, #20]	@ (800109c <SystemInit+0x20>)
 8001088:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800108c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <menu_function>:
int get_number(uint8_t arr[],int l);
int check_alarm_settings(RTC_AlarmTypeDef alarm);
char* invalid_msg = "INVALID INPUT";

void menu_function(void* pv)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
    uint32_t cmd_address;
    cmd_variable *cmd;
    const char* menu_msg = "\n==========================\n"
 80010a8:	4b26      	ldr	r3, [pc, #152]	@ (8001144 <menu_function+0xa4>)
 80010aa:	60fb      	str	r3, [r7, #12]
                            "==========================\n"
                            "Alarm Settings       --->2\n"
                            "EXIT                 --->3\n"
                             "Enter your choice here : ";

    for(int i=0;i<200;i++);
 80010ac:	2300      	movs	r3, #0
 80010ae:	61fb      	str	r3, [r7, #28]
 80010b0:	e002      	b.n	80010b8 <menu_function+0x18>
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3301      	adds	r3, #1
 80010b6:	61fb      	str	r3, [r7, #28]
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	2bc7      	cmp	r3, #199	@ 0xc7
 80010bc:	ddf9      	ble.n	80010b2 <menu_function+0x12>
    while(1)
    {
        // Print main menu
        xQueueSend(q_print, &menu_msg, portMAX_DELAY);
 80010be:	4b22      	ldr	r3, [pc, #136]	@ (8001148 <menu_function+0xa8>)
 80010c0:	6818      	ldr	r0, [r3, #0]
 80010c2:	f107 010c 	add.w	r1, r7, #12
 80010c6:	2300      	movs	r3, #0
 80010c8:	f04f 32ff 	mov.w	r2, #4294967295
 80010cc:	f003 fcc8 	bl	8004a60 <xQueueGenericSend>

        // Wait for command from cmd_handler_function
        xTaskNotifyWait(0, 0, &cmd_address, portMAX_DELAY);
 80010d0:	f107 0210 	add.w	r2, r7, #16
 80010d4:	f04f 33ff 	mov.w	r3, #4294967295
 80010d8:	2100      	movs	r1, #0
 80010da:	2000      	movs	r0, #0
 80010dc:	f005 f840 	bl	8006160 <xTaskNotifyWait>
        cmd = (cmd_variable*)(uintptr_t)cmd_address;
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	61bb      	str	r3, [r7, #24]

        if(cmd->len == 1)
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d121      	bne.n	8001130 <menu_function+0x90>
        {
            int option = cmd->cmd[0] - '0';
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	3b30      	subs	r3, #48	@ 0x30
 80010f2:	617b      	str	r3, [r7, #20]
            if(option == 2)
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d111      	bne.n	800111e <menu_function+0x7e>
            {
                curr_state = sAlarmMenu;
 80010fa:	4b14      	ldr	r3, [pc, #80]	@ (800114c <menu_function+0xac>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	701a      	strb	r2, [r3, #0]
                xTaskNotify(xHandlealarm_task, 0, eNoAction);
 8001100:	4b13      	ldr	r3, [pc, #76]	@ (8001150 <menu_function+0xb0>)
 8001102:	6818      	ldr	r0, [r3, #0]
 8001104:	2300      	movs	r3, #0
 8001106:	2200      	movs	r2, #0
 8001108:	2100      	movs	r1, #0
 800110a:	f005 f889 	bl	8006220 <xTaskGenericNotify>
        {
            xQueueSend(q_print, &invalid_msg, portMAX_DELAY);
            continue;
        }

        xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 800110e:	f04f 33ff 	mov.w	r3, #4294967295
 8001112:	2200      	movs	r2, #0
 8001114:	2100      	movs	r1, #0
 8001116:	2000      	movs	r0, #0
 8001118:	f005 f822 	bl	8006160 <xTaskNotifyWait>
 800111c:	e7cf      	b.n	80010be <menu_function+0x1e>
                xQueueSend(q_print, &invalid_msg, portMAX_DELAY);
 800111e:	4b0a      	ldr	r3, [pc, #40]	@ (8001148 <menu_function+0xa8>)
 8001120:	6818      	ldr	r0, [r3, #0]
 8001122:	2300      	movs	r3, #0
 8001124:	f04f 32ff 	mov.w	r2, #4294967295
 8001128:	490a      	ldr	r1, [pc, #40]	@ (8001154 <menu_function+0xb4>)
 800112a:	f003 fc99 	bl	8004a60 <xQueueGenericSend>
                continue;
 800112e:	e008      	b.n	8001142 <menu_function+0xa2>
            xQueueSend(q_print, &invalid_msg, portMAX_DELAY);
 8001130:	4b05      	ldr	r3, [pc, #20]	@ (8001148 <menu_function+0xa8>)
 8001132:	6818      	ldr	r0, [r3, #0]
 8001134:	2300      	movs	r3, #0
 8001136:	f04f 32ff 	mov.w	r2, #4294967295
 800113a:	4906      	ldr	r1, [pc, #24]	@ (8001154 <menu_function+0xb4>)
 800113c:	f003 fc90 	bl	8004a60 <xQueueGenericSend>
            continue;
 8001140:	bf00      	nop
        xQueueSend(q_print, &menu_msg, portMAX_DELAY);
 8001142:	e7bc      	b.n	80010be <menu_function+0x1e>
 8001144:	0800801c 	.word	0x0800801c
 8001148:	20000104 	.word	0x20000104
 800114c:	20000114 	.word	0x20000114
 8001150:	20000100 	.word	0x20000100
 8001154:	2000000c 	.word	0x2000000c

08001158 <process_cmd>:
    }
}

void process_cmd(cmd_variable* command)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
    // Extract data from q_enqueue into command struct
    int i = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	60fb      	str	r3, [r7, #12]
    uint8_t ch;
    command->len = 0;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2200      	movs	r2, #0
 8001168:	60da      	str	r2, [r3, #12]

    while(1)
    {
        xQueueReceive(q_enqueue, &ch, 0);
 800116a:	4b1b      	ldr	r3, [pc, #108]	@ (80011d8 <process_cmd+0x80>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f107 010b 	add.w	r1, r7, #11
 8001172:	2200      	movs	r2, #0
 8001174:	4618      	mov	r0, r3
 8001176:	f003 fe13 	bl	8004da0 <xQueueReceive>
        if(ch == '.') break; // End of command marker
 800117a:	7afb      	ldrb	r3, [r7, #11]
 800117c:	2b2e      	cmp	r3, #46	@ 0x2e
 800117e:	d00b      	beq.n	8001198 <process_cmd+0x40>
        command->cmd[i++] = ch;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	1c5a      	adds	r2, r3, #1
 8001184:	60fa      	str	r2, [r7, #12]
 8001186:	7af9      	ldrb	r1, [r7, #11]
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	54d1      	strb	r1, [r2, r3]
        command->len++;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	1c5a      	adds	r2, r3, #1
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	60da      	str	r2, [r3, #12]
        xQueueReceive(q_enqueue, &ch, 0);
 8001196:	e7e8      	b.n	800116a <process_cmd+0x12>
        if(ch == '.') break; // End of command marker
 8001198:	bf00      	nop
    }

    switch(curr_state)
 800119a:	4b10      	ldr	r3, [pc, #64]	@ (80011dc <process_cmd+0x84>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d005      	beq.n	80011ae <process_cmd+0x56>
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	db13      	blt.n	80011ce <process_cmd+0x76>
 80011a6:	3b01      	subs	r3, #1
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d810      	bhi.n	80011ce <process_cmd+0x76>
 80011ac:	e007      	b.n	80011be <process_cmd+0x66>
    {
        case sMainMenu:
            // Send menu command to menu task
            xTaskNotify(xHandlemenu, (uint32_t)(uintptr_t)command, eSetValueWithOverwrite);
 80011ae:	4b0c      	ldr	r3, [pc, #48]	@ (80011e0 <process_cmd+0x88>)
 80011b0:	6818      	ldr	r0, [r3, #0]
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	2300      	movs	r3, #0
 80011b6:	2203      	movs	r2, #3
 80011b8:	f005 f832 	bl	8006220 <xTaskGenericNotify>
            break;
 80011bc:	e007      	b.n	80011ce <process_cmd+0x76>

        case sAlarmMenu:
        case set_alarm_a:
        case set_alarm_b:
            xTaskNotify(xHandlealarm_task, (uint32_t)(uintptr_t)command, eSetValueWithOverwrite);
 80011be:	4b09      	ldr	r3, [pc, #36]	@ (80011e4 <process_cmd+0x8c>)
 80011c0:	6818      	ldr	r0, [r3, #0]
 80011c2:	6879      	ldr	r1, [r7, #4]
 80011c4:	2300      	movs	r3, #0
 80011c6:	2203      	movs	r2, #3
 80011c8:	f005 f82a 	bl	8006220 <xTaskGenericNotify>
            break;
 80011cc:	bf00      	nop
    }
}
 80011ce:	bf00      	nop
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000108 	.word	0x20000108
 80011dc:	20000114 	.word	0x20000114
 80011e0:	200000f8 	.word	0x200000f8
 80011e4:	20000100 	.word	0x20000100

080011e8 <print_task>:

void print_task(void* pv)
{
 80011e8:	b590      	push	{r4, r7, lr}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
    uint32_t* msg;
    while(1)
    {
        xQueueReceive(q_print, &msg, portMAX_DELAY);
 80011f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001220 <print_task+0x38>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f107 010c 	add.w	r1, r7, #12
 80011f8:	f04f 32ff 	mov.w	r2, #4294967295
 80011fc:	4618      	mov	r0, r3
 80011fe:	f003 fdcf 	bl	8004da0 <xQueueReceive>
        HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg), HAL_MAX_DELAY);
 8001202:	68fc      	ldr	r4, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	4618      	mov	r0, r3
 8001208:	f7fe ffea 	bl	80001e0 <strlen>
 800120c:	4603      	mov	r3, r0
 800120e:	b29a      	uxth	r2, r3
 8001210:	f04f 33ff 	mov.w	r3, #4294967295
 8001214:	4621      	mov	r1, r4
 8001216:	4803      	ldr	r0, [pc, #12]	@ (8001224 <print_task+0x3c>)
 8001218:	f002 f89c 	bl	8003354 <HAL_UART_Transmit>
        xQueueReceive(q_print, &msg, portMAX_DELAY);
 800121c:	bf00      	nop
 800121e:	e7e7      	b.n	80011f0 <print_task+0x8>
 8001220:	20000104 	.word	0x20000104
 8001224:	200000a8 	.word	0x200000a8

08001228 <cmd_handler_function>:
    }
}

void cmd_handler_function(void* pv)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
    BaseType_t xResult;
    static cmd_variable command;
    while(1)
    {
        xResult = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001230:	f04f 33ff 	mov.w	r3, #4294967295
 8001234:	2200      	movs	r2, #0
 8001236:	2100      	movs	r1, #0
 8001238:	2000      	movs	r0, #0
 800123a:	f004 ff91 	bl	8006160 <xTaskNotifyWait>
 800123e:	60f8      	str	r0, [r7, #12]
        if(xResult == pdTRUE)
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d1f4      	bne.n	8001230 <cmd_handler_function+0x8>
        {
            process_cmd(&command);
 8001246:	4802      	ldr	r0, [pc, #8]	@ (8001250 <cmd_handler_function+0x28>)
 8001248:	f7ff ff86 	bl	8001158 <process_cmd>
        xResult = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 800124c:	e7f0      	b.n	8001230 <cmd_handler_function+0x8>
 800124e:	bf00      	nop
 8001250:	200001b4 	.word	0x200001b4

08001254 <check_alarm_settings>:
        }
    }
}
int check_alarm_settings(RTC_AlarmTypeDef alarm)
{
 8001254:	b084      	sub	sp, #16
 8001256:	b480      	push	{r7}
 8001258:	b083      	sub	sp, #12
 800125a:	af00      	add	r7, sp, #0
 800125c:	f107 0c10 	add.w	ip, r7, #16
 8001260:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int flag =1;
 8001264:	2301      	movs	r3, #1
 8001266:	607b      	str	r3, [r7, #4]
	if(alarm.AlarmDateWeekDay >31)
 8001268:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800126c:	2b1f      	cmp	r3, #31
 800126e:	d901      	bls.n	8001274 <check_alarm_settings+0x20>
		flag =0;
 8001270:	2300      	movs	r3, #0
 8001272:	607b      	str	r3, [r7, #4]
	if(alarm.AlarmTime.Hours >12)
 8001274:	7c3b      	ldrb	r3, [r7, #16]
 8001276:	2b0c      	cmp	r3, #12
 8001278:	d901      	bls.n	800127e <check_alarm_settings+0x2a>
		flag =0;
 800127a:	2300      	movs	r3, #0
 800127c:	607b      	str	r3, [r7, #4]
	if(alarm.AlarmTime.Minutes >59)
 800127e:	7c7b      	ldrb	r3, [r7, #17]
 8001280:	2b3b      	cmp	r3, #59	@ 0x3b
 8001282:	d901      	bls.n	8001288 <check_alarm_settings+0x34>
		flag =0;
 8001284:	2300      	movs	r3, #0
 8001286:	607b      	str	r3, [r7, #4]
	if(alarm.AlarmTime.Seconds >59)
 8001288:	7cbb      	ldrb	r3, [r7, #18]
 800128a:	2b3b      	cmp	r3, #59	@ 0x3b
 800128c:	d901      	bls.n	8001292 <check_alarm_settings+0x3e>
		flag =0;
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]
	return flag;
 8001292:	687b      	ldr	r3, [r7, #4]
}
 8001294:	4618      	mov	r0, r3
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	b004      	add	sp, #16
 80012a0:	4770      	bx	lr
	...

080012a4 <alarm_task>:
void alarm_task(void* pv)
{
 80012a4:	b5b0      	push	{r4, r5, r7, lr}
 80012a6:	b09c      	sub	sp, #112	@ 0x70
 80012a8:	af06      	add	r7, sp, #24
 80012aa:	6078      	str	r0, [r7, #4]
	const char* alarm_menu = "=====================\n"
 80012ac:	4bab      	ldr	r3, [pc, #684]	@ (800155c <alarm_task+0x2b8>)
 80012ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
							 "Set alarm A -------> 0\n"
							 "Set alarm B -------> 1\n"
							 "Show alarm A ------> 2\n"
							 "Show alarm B ------> 3\n"
			                 "Enter your choice here : ";
	const char* day = "Tell date(1-31)\n";
 80012b0:	4bab      	ldr	r3, [pc, #684]	@ (8001560 <alarm_task+0x2bc>)
 80012b2:	64bb      	str	r3, [r7, #72]	@ 0x48
	const char* hour= "Tell Hour(1-12)\n";
 80012b4:	4bab      	ldr	r3, [pc, #684]	@ (8001564 <alarm_task+0x2c0>)
 80012b6:	647b      	str	r3, [r7, #68]	@ 0x44
	const char* minute= "Tell Minute(0-59)\n";
 80012b8:	4bab      	ldr	r3, [pc, #684]	@ (8001568 <alarm_task+0x2c4>)
 80012ba:	643b      	str	r3, [r7, #64]	@ 0x40
	const char* second= "Tell second(0-59)\n";
 80012bc:	4bab      	ldr	r3, [pc, #684]	@ (800156c <alarm_task+0x2c8>)
 80012be:	63fb      	str	r3, [r7, #60]	@ 0x3c
	const char* success= "Successful\n";
 80012c0:	4bab      	ldr	r3, [pc, #684]	@ (8001570 <alarm_task+0x2cc>)
 80012c2:	63bb      	str	r3, [r7, #56]	@ 0x38

	uint32_t address_store;
	cmd_variable *cand;
	while(1)
	{
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80012c4:	f04f 33ff 	mov.w	r3, #4294967295
 80012c8:	2200      	movs	r2, #0
 80012ca:	2100      	movs	r1, #0
 80012cc:	2000      	movs	r0, #0
 80012ce:	f004 ff47 	bl	8006160 <xTaskNotifyWait>
		xQueueSend(q_print,&alarm_menu,portMAX_DELAY);
 80012d2:	4ba8      	ldr	r3, [pc, #672]	@ (8001574 <alarm_task+0x2d0>)
 80012d4:	6818      	ldr	r0, [r3, #0]
 80012d6:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80012da:	2300      	movs	r3, #0
 80012dc:	f04f 32ff 	mov.w	r2, #4294967295
 80012e0:	f003 fbbe 	bl	8004a60 <xQueueGenericSend>

		while(curr_state != sMainMenu)
 80012e4:	e1a1      	b.n	800162a <alarm_task+0x386>
		{
			xTaskNotifyWait(0,0,&address_store,portMAX_DELAY);
 80012e6:	f107 020c 	add.w	r2, r7, #12
 80012ea:	f04f 33ff 	mov.w	r3, #4294967295
 80012ee:	2100      	movs	r1, #0
 80012f0:	2000      	movs	r0, #0
 80012f2:	f004 ff35 	bl	8006160 <xTaskNotifyWait>
			cand = (cmd_variable*)(uintptr_t)address_store;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	657b      	str	r3, [r7, #84]	@ 0x54
			switch (curr_state)
 80012fa:	4b9f      	ldr	r3, [pc, #636]	@ (8001578 <alarm_task+0x2d4>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b03      	cmp	r3, #3
 8001300:	f000 80ec 	beq.w	80014dc <alarm_task+0x238>
 8001304:	2b03      	cmp	r3, #3
 8001306:	f300 8190 	bgt.w	800162a <alarm_task+0x386>
 800130a:	2b01      	cmp	r3, #1
 800130c:	d002      	beq.n	8001314 <alarm_task+0x70>
 800130e:	2b02      	cmp	r3, #2
 8001310:	d052      	beq.n	80013b8 <alarm_task+0x114>
 8001312:	e18a      	b.n	800162a <alarm_task+0x386>
			{
				case sAlarmMenu:
				{
					if(cand->len == 1)
 8001314:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d141      	bne.n	80013a0 <alarm_task+0xfc>
					{
						int option = cand->cmd[0] - '0';
 800131c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	3b30      	subs	r3, #48	@ 0x30
 8001322:	653b      	str	r3, [r7, #80]	@ 0x50
						if(option ==0)
 8001324:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001326:	2b00      	cmp	r3, #0
 8001328:	d10c      	bne.n	8001344 <alarm_task+0xa0>
						{
							curr_state =set_alarm_a;
 800132a:	4b93      	ldr	r3, [pc, #588]	@ (8001578 <alarm_task+0x2d4>)
 800132c:	2202      	movs	r2, #2
 800132e:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&day,portMAX_DELAY);
 8001330:	4b90      	ldr	r3, [pc, #576]	@ (8001574 <alarm_task+0x2d0>)
 8001332:	6818      	ldr	r0, [r3, #0]
 8001334:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001338:	2300      	movs	r3, #0
 800133a:	f04f 32ff 	mov.w	r2, #4294967295
 800133e:	f003 fb8f 	bl	8004a60 <xQueueGenericSend>
							break;
 8001342:	e172      	b.n	800162a <alarm_task+0x386>
						}
						else if(option == 1)
 8001344:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001346:	2b01      	cmp	r3, #1
 8001348:	d10c      	bne.n	8001364 <alarm_task+0xc0>
						{
							curr_state =set_alarm_b;
 800134a:	4b8b      	ldr	r3, [pc, #556]	@ (8001578 <alarm_task+0x2d4>)
 800134c:	2203      	movs	r2, #3
 800134e:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&day,portMAX_DELAY);
 8001350:	4b88      	ldr	r3, [pc, #544]	@ (8001574 <alarm_task+0x2d0>)
 8001352:	6818      	ldr	r0, [r3, #0]
 8001354:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001358:	2300      	movs	r3, #0
 800135a:	f04f 32ff 	mov.w	r2, #4294967295
 800135e:	f003 fb7f 	bl	8004a60 <xQueueGenericSend>
							break;
 8001362:	e162      	b.n	800162a <alarm_task+0x386>
						}
						else if(option == 2)
 8001364:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001366:	2b02      	cmp	r3, #2
 8001368:	d105      	bne.n	8001376 <alarm_task+0xd2>
						{
							show_alarm_settings_of_a();
 800136a:	f7ff fc19 	bl	8000ba0 <show_alarm_settings_of_a>
							curr_state = sMainMenu;
 800136e:	4b82      	ldr	r3, [pc, #520]	@ (8001578 <alarm_task+0x2d4>)
 8001370:	2200      	movs	r2, #0
 8001372:	701a      	strb	r2, [r3, #0]
							break;
 8001374:	e159      	b.n	800162a <alarm_task+0x386>
						}
						else if(option ==3)
 8001376:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001378:	2b03      	cmp	r3, #3
 800137a:	d105      	bne.n	8001388 <alarm_task+0xe4>
						{
							show_alarm_settings_of_b();
 800137c:	f7ff fc82 	bl	8000c84 <show_alarm_settings_of_b>
							curr_state = sMainMenu;
 8001380:	4b7d      	ldr	r3, [pc, #500]	@ (8001578 <alarm_task+0x2d4>)
 8001382:	2200      	movs	r2, #0
 8001384:	701a      	strb	r2, [r3, #0]
							break;
 8001386:	e150      	b.n	800162a <alarm_task+0x386>
						}
						else
						{
							curr_state = sMainMenu;
 8001388:	4b7b      	ldr	r3, [pc, #492]	@ (8001578 <alarm_task+0x2d4>)
 800138a:	2200      	movs	r2, #0
 800138c:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&invalid_msg,portMAX_DELAY);
 800138e:	4b79      	ldr	r3, [pc, #484]	@ (8001574 <alarm_task+0x2d0>)
 8001390:	6818      	ldr	r0, [r3, #0]
 8001392:	2300      	movs	r3, #0
 8001394:	f04f 32ff 	mov.w	r2, #4294967295
 8001398:	4978      	ldr	r1, [pc, #480]	@ (800157c <alarm_task+0x2d8>)
 800139a:	f003 fb61 	bl	8004a60 <xQueueGenericSend>
							break;
 800139e:	e144      	b.n	800162a <alarm_task+0x386>
						}
					}
					else
					{
						curr_state = sMainMenu;
 80013a0:	4b75      	ldr	r3, [pc, #468]	@ (8001578 <alarm_task+0x2d4>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	701a      	strb	r2, [r3, #0]
						xQueueSend(q_print,&invalid_msg,portMAX_DELAY);
 80013a6:	4b73      	ldr	r3, [pc, #460]	@ (8001574 <alarm_task+0x2d0>)
 80013a8:	6818      	ldr	r0, [r3, #0]
 80013aa:	2300      	movs	r3, #0
 80013ac:	f04f 32ff 	mov.w	r2, #4294967295
 80013b0:	4972      	ldr	r1, [pc, #456]	@ (800157c <alarm_task+0x2d8>)
 80013b2:	f003 fb55 	bl	8004a60 <xQueueGenericSend>
						break;
 80013b6:	e138      	b.n	800162a <alarm_task+0x386>
					}
				}break;
				case set_alarm_a:
				{
					switch(alarm_state)
 80013b8:	4b71      	ldr	r3, [pc, #452]	@ (8001580 <alarm_task+0x2dc>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b03      	cmp	r3, #3
 80013be:	f200 8133 	bhi.w	8001628 <alarm_task+0x384>
 80013c2:	a201      	add	r2, pc, #4	@ (adr r2, 80013c8 <alarm_task+0x124>)
 80013c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c8:	080013d9 	.word	0x080013d9
 80013cc:	08001409 	.word	0x08001409
 80013d0:	08001437 	.word	0x08001437
 80013d4:	08001465 	.word	0x08001465
					{
					case DD_alarm_Config:
					{
					halarm.AlarmDateWeekDay =get_number(cand->cmd,cand->len);
 80013d8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80013da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013dc:	68db      	ldr	r3, [r3, #12]
 80013de:	4619      	mov	r1, r3
 80013e0:	4610      	mov	r0, r2
 80013e2:	f000 f939 	bl	8001658 <get_number>
 80013e6:	4603      	mov	r3, r0
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
						alarm_state = HH_alarm_Config;
 80013ee:	4b64      	ldr	r3, [pc, #400]	@ (8001580 <alarm_task+0x2dc>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	601a      	str	r2, [r3, #0]
						xQueueSend(q_print,&hour,portMAX_DELAY);
 80013f4:	4b5f      	ldr	r3, [pc, #380]	@ (8001574 <alarm_task+0x2d0>)
 80013f6:	6818      	ldr	r0, [r3, #0]
 80013f8:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 80013fc:	2300      	movs	r3, #0
 80013fe:	f04f 32ff 	mov.w	r2, #4294967295
 8001402:	f003 fb2d 	bl	8004a60 <xQueueGenericSend>
						break;
 8001406:	e068      	b.n	80014da <alarm_task+0x236>
					}
					case HH_alarm_Config:
					{
						halarm.AlarmTime.Hours =get_number(cand->cmd,cand->len);
 8001408:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800140a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	4619      	mov	r1, r3
 8001410:	4610      	mov	r0, r2
 8001412:	f000 f921 	bl	8001658 <get_number>
 8001416:	4603      	mov	r3, r0
 8001418:	b2db      	uxtb	r3, r3
 800141a:	743b      	strb	r3, [r7, #16]
						alarm_state = MM_alarm_Config;
 800141c:	4b58      	ldr	r3, [pc, #352]	@ (8001580 <alarm_task+0x2dc>)
 800141e:	2202      	movs	r2, #2
 8001420:	601a      	str	r2, [r3, #0]
						xQueueSend(q_print,&minute,portMAX_DELAY);
 8001422:	4b54      	ldr	r3, [pc, #336]	@ (8001574 <alarm_task+0x2d0>)
 8001424:	6818      	ldr	r0, [r3, #0]
 8001426:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800142a:	2300      	movs	r3, #0
 800142c:	f04f 32ff 	mov.w	r2, #4294967295
 8001430:	f003 fb16 	bl	8004a60 <xQueueGenericSend>
						break;
 8001434:	e051      	b.n	80014da <alarm_task+0x236>
					}
					case MM_alarm_Config:
					{
						halarm.AlarmTime.Minutes =get_number(cand->cmd,cand->len);
 8001436:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001438:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	4619      	mov	r1, r3
 800143e:	4610      	mov	r0, r2
 8001440:	f000 f90a 	bl	8001658 <get_number>
 8001444:	4603      	mov	r3, r0
 8001446:	b2db      	uxtb	r3, r3
 8001448:	747b      	strb	r3, [r7, #17]
						alarm_state = SS_alarm_Config;
 800144a:	4b4d      	ldr	r3, [pc, #308]	@ (8001580 <alarm_task+0x2dc>)
 800144c:	2203      	movs	r2, #3
 800144e:	601a      	str	r2, [r3, #0]
						xQueueSend(q_print,&second,portMAX_DELAY);
 8001450:	4b48      	ldr	r3, [pc, #288]	@ (8001574 <alarm_task+0x2d0>)
 8001452:	6818      	ldr	r0, [r3, #0]
 8001454:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8001458:	2300      	movs	r3, #0
 800145a:	f04f 32ff 	mov.w	r2, #4294967295
 800145e:	f003 faff 	bl	8004a60 <xQueueGenericSend>
						break;
 8001462:	e03a      	b.n	80014da <alarm_task+0x236>
					}
					case SS_alarm_Config:
					{
						halarm.AlarmTime.Seconds =get_number(cand->cmd,cand->len);
 8001464:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001466:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	4619      	mov	r1, r3
 800146c:	4610      	mov	r0, r2
 800146e:	f000 f8f3 	bl	8001658 <get_number>
 8001472:	4603      	mov	r3, r0
 8001474:	b2db      	uxtb	r3, r3
 8001476:	74bb      	strb	r3, [r7, #18]
						curr_state = sMainMenu;
 8001478:	4b3f      	ldr	r3, [pc, #252]	@ (8001578 <alarm_task+0x2d4>)
 800147a:	2200      	movs	r2, #0
 800147c:	701a      	strb	r2, [r3, #0]
						if(check_alarm_settings(halarm))
 800147e:	466d      	mov	r5, sp
 8001480:	f107 0420 	add.w	r4, r7, #32
 8001484:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001486:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001488:	e894 0003 	ldmia.w	r4, {r0, r1}
 800148c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001490:	f107 0310 	add.w	r3, r7, #16
 8001494:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001496:	f7ff fedd 	bl	8001254 <check_alarm_settings>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d010      	beq.n	80014c2 <alarm_task+0x21e>
						{
							rtc_configure_alarm_a(&halarm);
 80014a0:	f107 0310 	add.w	r3, r7, #16
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff fb07 	bl	8000ab8 <rtc_configure_alarm_a>
							show_alarm_settings_of_a();
 80014aa:	f7ff fb79 	bl	8000ba0 <show_alarm_settings_of_a>
							xQueueSend(q_print,&success,portMAX_DELAY);
 80014ae:	4b31      	ldr	r3, [pc, #196]	@ (8001574 <alarm_task+0x2d0>)
 80014b0:	6818      	ldr	r0, [r3, #0]
 80014b2:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80014b6:	2300      	movs	r3, #0
 80014b8:	f04f 32ff 	mov.w	r2, #4294967295
 80014bc:	f003 fad0 	bl	8004a60 <xQueueGenericSend>
 80014c0:	e007      	b.n	80014d2 <alarm_task+0x22e>

						}
						else
						{
							xQueueSend(q_print,&invalid_msg,portMAX_DELAY);
 80014c2:	4b2c      	ldr	r3, [pc, #176]	@ (8001574 <alarm_task+0x2d0>)
 80014c4:	6818      	ldr	r0, [r3, #0]
 80014c6:	2300      	movs	r3, #0
 80014c8:	f04f 32ff 	mov.w	r2, #4294967295
 80014cc:	492b      	ldr	r1, [pc, #172]	@ (800157c <alarm_task+0x2d8>)
 80014ce:	f003 fac7 	bl	8004a60 <xQueueGenericSend>
						}
						alarm_state = 0;
 80014d2:	4b2b      	ldr	r3, [pc, #172]	@ (8001580 <alarm_task+0x2dc>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
						break;
 80014d8:	bf00      	nop
					}
					}break;
 80014da:	e0a5      	b.n	8001628 <alarm_task+0x384>
				}

				case set_alarm_b:
				{
					switch(alarm_state)
 80014dc:	4b28      	ldr	r3, [pc, #160]	@ (8001580 <alarm_task+0x2dc>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b03      	cmp	r3, #3
 80014e2:	f200 80a2 	bhi.w	800162a <alarm_task+0x386>
 80014e6:	a201      	add	r2, pc, #4	@ (adr r2, 80014ec <alarm_task+0x248>)
 80014e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ec:	080014fd 	.word	0x080014fd
 80014f0:	0800152d 	.word	0x0800152d
 80014f4:	08001585 	.word	0x08001585
 80014f8:	080015b3 	.word	0x080015b3
					{
					case DD_alarm_Config:
					{
						halarm.AlarmDateWeekDay =get_number(cand->cmd,cand->len);
 80014fc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80014fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	4619      	mov	r1, r3
 8001504:	4610      	mov	r0, r2
 8001506:	f000 f8a7 	bl	8001658 <get_number>
 800150a:	4603      	mov	r3, r0
 800150c:	b2db      	uxtb	r3, r3
 800150e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
						alarm_state = HH_alarm_Config;
 8001512:	4b1b      	ldr	r3, [pc, #108]	@ (8001580 <alarm_task+0x2dc>)
 8001514:	2201      	movs	r2, #1
 8001516:	601a      	str	r2, [r3, #0]
						xQueueSend(q_print,&hour,portMAX_DELAY);
 8001518:	4b16      	ldr	r3, [pc, #88]	@ (8001574 <alarm_task+0x2d0>)
 800151a:	6818      	ldr	r0, [r3, #0]
 800151c:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8001520:	2300      	movs	r3, #0
 8001522:	f04f 32ff 	mov.w	r2, #4294967295
 8001526:	f003 fa9b 	bl	8004a60 <xQueueGenericSend>
						break;
 800152a:	e07e      	b.n	800162a <alarm_task+0x386>
					}
					case HH_alarm_Config:
					{
						halarm.AlarmTime.Hours =get_number(cand->cmd,cand->len);
 800152c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800152e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	4619      	mov	r1, r3
 8001534:	4610      	mov	r0, r2
 8001536:	f000 f88f 	bl	8001658 <get_number>
 800153a:	4603      	mov	r3, r0
 800153c:	b2db      	uxtb	r3, r3
 800153e:	743b      	strb	r3, [r7, #16]
						alarm_state = MM_alarm_Config;
 8001540:	4b0f      	ldr	r3, [pc, #60]	@ (8001580 <alarm_task+0x2dc>)
 8001542:	2202      	movs	r2, #2
 8001544:	601a      	str	r2, [r3, #0]
						xQueueSend(q_print,&minute,portMAX_DELAY);
 8001546:	4b0b      	ldr	r3, [pc, #44]	@ (8001574 <alarm_task+0x2d0>)
 8001548:	6818      	ldr	r0, [r3, #0]
 800154a:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800154e:	2300      	movs	r3, #0
 8001550:	f04f 32ff 	mov.w	r2, #4294967295
 8001554:	f003 fa84 	bl	8004a60 <xQueueGenericSend>
						break;
 8001558:	e067      	b.n	800162a <alarm_task+0x386>
 800155a:	bf00      	nop
 800155c:	080080c0 	.word	0x080080c0
 8001560:	0800817c 	.word	0x0800817c
 8001564:	08008190 	.word	0x08008190
 8001568:	080081a4 	.word	0x080081a4
 800156c:	080081b8 	.word	0x080081b8
 8001570:	080081cc 	.word	0x080081cc
 8001574:	20000104 	.word	0x20000104
 8001578:	20000114 	.word	0x20000114
 800157c:	2000000c 	.word	0x2000000c
 8001580:	20000110 	.word	0x20000110
					}
					case MM_alarm_Config:
					{
						halarm.AlarmTime.Minutes =get_number(cand->cmd,cand->len);
 8001584:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001586:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	4619      	mov	r1, r3
 800158c:	4610      	mov	r0, r2
 800158e:	f000 f863 	bl	8001658 <get_number>
 8001592:	4603      	mov	r3, r0
 8001594:	b2db      	uxtb	r3, r3
 8001596:	747b      	strb	r3, [r7, #17]
						alarm_state = SS_alarm_Config;
 8001598:	4b2a      	ldr	r3, [pc, #168]	@ (8001644 <alarm_task+0x3a0>)
 800159a:	2203      	movs	r2, #3
 800159c:	601a      	str	r2, [r3, #0]
						xQueueSend(q_print,&second,portMAX_DELAY);
 800159e:	4b2a      	ldr	r3, [pc, #168]	@ (8001648 <alarm_task+0x3a4>)
 80015a0:	6818      	ldr	r0, [r3, #0]
 80015a2:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 80015a6:	2300      	movs	r3, #0
 80015a8:	f04f 32ff 	mov.w	r2, #4294967295
 80015ac:	f003 fa58 	bl	8004a60 <xQueueGenericSend>
						break;
 80015b0:	e03b      	b.n	800162a <alarm_task+0x386>
					}
					case SS_alarm_Config:
					{
						halarm.AlarmTime.Seconds =get_number(cand->cmd,cand->len);
 80015b2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80015b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	4619      	mov	r1, r3
 80015ba:	4610      	mov	r0, r2
 80015bc:	f000 f84c 	bl	8001658 <get_number>
 80015c0:	4603      	mov	r3, r0
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	74bb      	strb	r3, [r7, #18]
						curr_state = sMainMenu;
 80015c6:	4b21      	ldr	r3, [pc, #132]	@ (800164c <alarm_task+0x3a8>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]
						if(check_alarm_settings(halarm))
 80015cc:	466d      	mov	r5, sp
 80015ce:	f107 0420 	add.w	r4, r7, #32
 80015d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015da:	e885 0003 	stmia.w	r5, {r0, r1}
 80015de:	f107 0310 	add.w	r3, r7, #16
 80015e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015e4:	f7ff fe36 	bl	8001254 <check_alarm_settings>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d010      	beq.n	8001610 <alarm_task+0x36c>
						{
							rtc_configure_alarm_b(&halarm);
 80015ee:	f107 0310 	add.w	r3, r7, #16
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff fa90 	bl	8000b18 <rtc_configure_alarm_b>
							show_alarm_settings_of_b();
 80015f8:	f7ff fb44 	bl	8000c84 <show_alarm_settings_of_b>
							xQueueSend(q_print,&success,portMAX_DELAY);
 80015fc:	4b12      	ldr	r3, [pc, #72]	@ (8001648 <alarm_task+0x3a4>)
 80015fe:	6818      	ldr	r0, [r3, #0]
 8001600:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8001604:	2300      	movs	r3, #0
 8001606:	f04f 32ff 	mov.w	r2, #4294967295
 800160a:	f003 fa29 	bl	8004a60 <xQueueGenericSend>
 800160e:	e007      	b.n	8001620 <alarm_task+0x37c>
						}
						else
						{
							xQueueSend(q_print,&invalid_msg,portMAX_DELAY);
 8001610:	4b0d      	ldr	r3, [pc, #52]	@ (8001648 <alarm_task+0x3a4>)
 8001612:	6818      	ldr	r0, [r3, #0]
 8001614:	2300      	movs	r3, #0
 8001616:	f04f 32ff 	mov.w	r2, #4294967295
 800161a:	490d      	ldr	r1, [pc, #52]	@ (8001650 <alarm_task+0x3ac>)
 800161c:	f003 fa20 	bl	8004a60 <xQueueGenericSend>
						}
						alarm_state = 0;
 8001620:	4b08      	ldr	r3, [pc, #32]	@ (8001644 <alarm_task+0x3a0>)
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
						break;
 8001626:	e000      	b.n	800162a <alarm_task+0x386>
					}break;
 8001628:	bf00      	nop
		while(curr_state != sMainMenu)
 800162a:	4b08      	ldr	r3, [pc, #32]	@ (800164c <alarm_task+0x3a8>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	2b00      	cmp	r3, #0
 8001630:	f47f ae59 	bne.w	80012e6 <alarm_task+0x42>
					}
					}
				}
			}
		}
		xTaskNotify(xHandlemenu,0,eNoAction);
 8001634:	4b07      	ldr	r3, [pc, #28]	@ (8001654 <alarm_task+0x3b0>)
 8001636:	6818      	ldr	r0, [r3, #0]
 8001638:	2300      	movs	r3, #0
 800163a:	2200      	movs	r2, #0
 800163c:	2100      	movs	r1, #0
 800163e:	f004 fdef 	bl	8006220 <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001642:	e63f      	b.n	80012c4 <alarm_task+0x20>
 8001644:	20000110 	.word	0x20000110
 8001648:	20000104 	.word	0x20000104
 800164c:	20000114 	.word	0x20000114
 8001650:	2000000c 	.word	0x2000000c
 8001654:	200000f8 	.word	0x200000f8

08001658 <get_number>:
	}
}

int get_number(uint8_t arr[],int l)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
	int y;
	if(l==2)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	2b02      	cmp	r3, #2
 8001666:	d10f      	bne.n	8001688 <get_number+0x30>
		y =10*(arr[0] - '0') + arr[1] - '0';
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001670:	4613      	mov	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4413      	add	r3, r2
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	461a      	mov	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	3301      	adds	r3, #1
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	4413      	add	r3, r2
 8001682:	3b30      	subs	r3, #48	@ 0x30
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	e003      	b.n	8001690 <get_number+0x38>
	else
		y=arr[0]-'0';
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	3b30      	subs	r3, #48	@ 0x30
 800168e:	60fb      	str	r3, [r7, #12]
	return y;
 8001690:	68fb      	ldr	r3, [r7, #12]
}
 8001692:	4618      	mov	r0, r3
 8001694:	3714      	adds	r7, #20
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
	...

080016a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80016a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80016a4:	f7ff fcea 	bl	800107c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016a8:	480c      	ldr	r0, [pc, #48]	@ (80016dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016aa:	490d      	ldr	r1, [pc, #52]	@ (80016e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016ac:	4a0d      	ldr	r2, [pc, #52]	@ (80016e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016b0:	e002      	b.n	80016b8 <LoopCopyDataInit>

080016b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016b6:	3304      	adds	r3, #4

080016b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016bc:	d3f9      	bcc.n	80016b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016be:	4a0a      	ldr	r2, [pc, #40]	@ (80016e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016c0:	4c0a      	ldr	r4, [pc, #40]	@ (80016ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80016c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016c4:	e001      	b.n	80016ca <LoopFillZerobss>

080016c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016c8:	3204      	adds	r2, #4

080016ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016cc:	d3fb      	bcc.n	80016c6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80016ce:	f005 ffc9 	bl	8007664 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016d2:	f7fe ff73 	bl	80005bc <main>
  bx  lr    
 80016d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80016d8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80016dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016e0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80016e4:	08008270 	.word	0x08008270
  ldr r2, =_sbss
 80016e8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80016ec:	20004cf8 	.word	0x20004cf8

080016f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016f0:	e7fe      	b.n	80016f0 <ADC_IRQHandler>
	...

080016f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001734 <HAL_Init+0x40>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001734 <HAL_Init+0x40>)
 80016fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001702:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001704:	4b0b      	ldr	r3, [pc, #44]	@ (8001734 <HAL_Init+0x40>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a0a      	ldr	r2, [pc, #40]	@ (8001734 <HAL_Init+0x40>)
 800170a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800170e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001710:	4b08      	ldr	r3, [pc, #32]	@ (8001734 <HAL_Init+0x40>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a07      	ldr	r2, [pc, #28]	@ (8001734 <HAL_Init+0x40>)
 8001716:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800171a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800171c:	2003      	movs	r0, #3
 800171e:	f000 f8d8 	bl	80018d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001722:	2000      	movs	r0, #0
 8001724:	f7ff fbc8 	bl	8000eb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001728:	f7ff fb1e 	bl	8000d68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40023c00 	.word	0x40023c00

08001738 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800173c:	4b06      	ldr	r3, [pc, #24]	@ (8001758 <HAL_IncTick+0x20>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	461a      	mov	r2, r3
 8001742:	4b06      	ldr	r3, [pc, #24]	@ (800175c <HAL_IncTick+0x24>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4413      	add	r3, r2
 8001748:	4a04      	ldr	r2, [pc, #16]	@ (800175c <HAL_IncTick+0x24>)
 800174a:	6013      	str	r3, [r2, #0]
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	20000014 	.word	0x20000014
 800175c:	200001c4 	.word	0x200001c4

08001760 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  return uwTick;
 8001764:	4b03      	ldr	r3, [pc, #12]	@ (8001774 <HAL_GetTick+0x14>)
 8001766:	681b      	ldr	r3, [r3, #0]
}
 8001768:	4618      	mov	r0, r3
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	200001c4 	.word	0x200001c4

08001778 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001788:	4b0c      	ldr	r3, [pc, #48]	@ (80017bc <__NVIC_SetPriorityGrouping+0x44>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800178e:	68ba      	ldr	r2, [r7, #8]
 8001790:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001794:	4013      	ands	r3, r2
 8001796:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017aa:	4a04      	ldr	r2, [pc, #16]	@ (80017bc <__NVIC_SetPriorityGrouping+0x44>)
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	60d3      	str	r3, [r2, #12]
}
 80017b0:	bf00      	nop
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c4:	4b04      	ldr	r3, [pc, #16]	@ (80017d8 <__NVIC_GetPriorityGrouping+0x18>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	0a1b      	lsrs	r3, r3, #8
 80017ca:	f003 0307 	and.w	r3, r3, #7
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	db0b      	blt.n	8001806 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	f003 021f 	and.w	r2, r3, #31
 80017f4:	4907      	ldr	r1, [pc, #28]	@ (8001814 <__NVIC_EnableIRQ+0x38>)
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	095b      	lsrs	r3, r3, #5
 80017fc:	2001      	movs	r0, #1
 80017fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	e000e100 	.word	0xe000e100

08001818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	6039      	str	r1, [r7, #0]
 8001822:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001828:	2b00      	cmp	r3, #0
 800182a:	db0a      	blt.n	8001842 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	b2da      	uxtb	r2, r3
 8001830:	490c      	ldr	r1, [pc, #48]	@ (8001864 <__NVIC_SetPriority+0x4c>)
 8001832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001836:	0112      	lsls	r2, r2, #4
 8001838:	b2d2      	uxtb	r2, r2
 800183a:	440b      	add	r3, r1
 800183c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001840:	e00a      	b.n	8001858 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	b2da      	uxtb	r2, r3
 8001846:	4908      	ldr	r1, [pc, #32]	@ (8001868 <__NVIC_SetPriority+0x50>)
 8001848:	79fb      	ldrb	r3, [r7, #7]
 800184a:	f003 030f 	and.w	r3, r3, #15
 800184e:	3b04      	subs	r3, #4
 8001850:	0112      	lsls	r2, r2, #4
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	440b      	add	r3, r1
 8001856:	761a      	strb	r2, [r3, #24]
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	e000e100 	.word	0xe000e100
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800186c:	b480      	push	{r7}
 800186e:	b089      	sub	sp, #36	@ 0x24
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	f1c3 0307 	rsb	r3, r3, #7
 8001886:	2b04      	cmp	r3, #4
 8001888:	bf28      	it	cs
 800188a:	2304      	movcs	r3, #4
 800188c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	3304      	adds	r3, #4
 8001892:	2b06      	cmp	r3, #6
 8001894:	d902      	bls.n	800189c <NVIC_EncodePriority+0x30>
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	3b03      	subs	r3, #3
 800189a:	e000      	b.n	800189e <NVIC_EncodePriority+0x32>
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a0:	f04f 32ff 	mov.w	r2, #4294967295
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43da      	mvns	r2, r3
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	401a      	ands	r2, r3
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b4:	f04f 31ff 	mov.w	r1, #4294967295
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	fa01 f303 	lsl.w	r3, r1, r3
 80018be:	43d9      	mvns	r1, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c4:	4313      	orrs	r3, r2
         );
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3724      	adds	r7, #36	@ 0x24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b082      	sub	sp, #8
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff ff4c 	bl	8001778 <__NVIC_SetPriorityGrouping>
}
 80018e0:	bf00      	nop
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
 80018f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018fa:	f7ff ff61 	bl	80017c0 <__NVIC_GetPriorityGrouping>
 80018fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	68b9      	ldr	r1, [r7, #8]
 8001904:	6978      	ldr	r0, [r7, #20]
 8001906:	f7ff ffb1 	bl	800186c <NVIC_EncodePriority>
 800190a:	4602      	mov	r2, r0
 800190c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001910:	4611      	mov	r1, r2
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff ff80 	bl	8001818 <__NVIC_SetPriority>
}
 8001918:	bf00      	nop
 800191a:	3718      	adds	r7, #24
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800192a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff ff54 	bl	80017dc <__NVIC_EnableIRQ>
}
 8001934:	bf00      	nop
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001948:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800194a:	f7ff ff09 	bl	8001760 <HAL_GetTick>
 800194e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001956:	b2db      	uxtb	r3, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d008      	beq.n	800196e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2280      	movs	r2, #128	@ 0x80
 8001960:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e052      	b.n	8001a14 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f022 0216 	bic.w	r2, r2, #22
 800197c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	695a      	ldr	r2, [r3, #20]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800198c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001992:	2b00      	cmp	r3, #0
 8001994:	d103      	bne.n	800199e <HAL_DMA_Abort+0x62>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800199a:	2b00      	cmp	r3, #0
 800199c:	d007      	beq.n	80019ae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f022 0208 	bic.w	r2, r2, #8
 80019ac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f022 0201 	bic.w	r2, r2, #1
 80019bc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019be:	e013      	b.n	80019e8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019c0:	f7ff fece 	bl	8001760 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b05      	cmp	r3, #5
 80019cc:	d90c      	bls.n	80019e8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2220      	movs	r2, #32
 80019d2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2203      	movs	r2, #3
 80019d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e015      	b.n	8001a14 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1e4      	bne.n	80019c0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019fa:	223f      	movs	r2, #63	@ 0x3f
 80019fc:	409a      	lsls	r2, r3
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2201      	movs	r2, #1
 8001a06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d004      	beq.n	8001a3a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2280      	movs	r2, #128	@ 0x80
 8001a34:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e00c      	b.n	8001a54 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2205      	movs	r2, #5
 8001a3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f022 0201 	bic.w	r2, r2, #1
 8001a50:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b089      	sub	sp, #36	@ 0x24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a72:	2300      	movs	r3, #0
 8001a74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a76:	2300      	movs	r3, #0
 8001a78:	61fb      	str	r3, [r7, #28]
 8001a7a:	e159      	b.n	8001d30 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	697a      	ldr	r2, [r7, #20]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	f040 8148 	bne.w	8001d2a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f003 0303 	and.w	r3, r3, #3
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d005      	beq.n	8001ab2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d130      	bne.n	8001b14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	2203      	movs	r2, #3
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	68da      	ldr	r2, [r3, #12]
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ae8:	2201      	movs	r2, #1
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4013      	ands	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	091b      	lsrs	r3, r3, #4
 8001afe:	f003 0201 	and.w	r2, r3, #1
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 0303 	and.w	r3, r3, #3
 8001b1c:	2b03      	cmp	r3, #3
 8001b1e:	d017      	beq.n	8001b50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	2203      	movs	r2, #3
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	43db      	mvns	r3, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4013      	ands	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 0303 	and.w	r3, r3, #3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d123      	bne.n	8001ba4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	08da      	lsrs	r2, r3, #3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3208      	adds	r2, #8
 8001b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	220f      	movs	r2, #15
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	691a      	ldr	r2, [r3, #16]
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	08da      	lsrs	r2, r3, #3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	3208      	adds	r2, #8
 8001b9e:	69b9      	ldr	r1, [r7, #24]
 8001ba0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	2203      	movs	r2, #3
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 0203 	and.w	r2, r3, #3
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f000 80a2 	beq.w	8001d2a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	4b57      	ldr	r3, [pc, #348]	@ (8001d48 <HAL_GPIO_Init+0x2e8>)
 8001bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bee:	4a56      	ldr	r2, [pc, #344]	@ (8001d48 <HAL_GPIO_Init+0x2e8>)
 8001bf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bf6:	4b54      	ldr	r3, [pc, #336]	@ (8001d48 <HAL_GPIO_Init+0x2e8>)
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c02:	4a52      	ldr	r2, [pc, #328]	@ (8001d4c <HAL_GPIO_Init+0x2ec>)
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	089b      	lsrs	r3, r3, #2
 8001c08:	3302      	adds	r3, #2
 8001c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	220f      	movs	r2, #15
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4013      	ands	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a49      	ldr	r2, [pc, #292]	@ (8001d50 <HAL_GPIO_Init+0x2f0>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d019      	beq.n	8001c62 <HAL_GPIO_Init+0x202>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a48      	ldr	r2, [pc, #288]	@ (8001d54 <HAL_GPIO_Init+0x2f4>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d013      	beq.n	8001c5e <HAL_GPIO_Init+0x1fe>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a47      	ldr	r2, [pc, #284]	@ (8001d58 <HAL_GPIO_Init+0x2f8>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d00d      	beq.n	8001c5a <HAL_GPIO_Init+0x1fa>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a46      	ldr	r2, [pc, #280]	@ (8001d5c <HAL_GPIO_Init+0x2fc>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d007      	beq.n	8001c56 <HAL_GPIO_Init+0x1f6>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a45      	ldr	r2, [pc, #276]	@ (8001d60 <HAL_GPIO_Init+0x300>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d101      	bne.n	8001c52 <HAL_GPIO_Init+0x1f2>
 8001c4e:	2304      	movs	r3, #4
 8001c50:	e008      	b.n	8001c64 <HAL_GPIO_Init+0x204>
 8001c52:	2307      	movs	r3, #7
 8001c54:	e006      	b.n	8001c64 <HAL_GPIO_Init+0x204>
 8001c56:	2303      	movs	r3, #3
 8001c58:	e004      	b.n	8001c64 <HAL_GPIO_Init+0x204>
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	e002      	b.n	8001c64 <HAL_GPIO_Init+0x204>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <HAL_GPIO_Init+0x204>
 8001c62:	2300      	movs	r3, #0
 8001c64:	69fa      	ldr	r2, [r7, #28]
 8001c66:	f002 0203 	and.w	r2, r2, #3
 8001c6a:	0092      	lsls	r2, r2, #2
 8001c6c:	4093      	lsls	r3, r2
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c74:	4935      	ldr	r1, [pc, #212]	@ (8001d4c <HAL_GPIO_Init+0x2ec>)
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	089b      	lsrs	r3, r3, #2
 8001c7a:	3302      	adds	r3, #2
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c82:	4b38      	ldr	r3, [pc, #224]	@ (8001d64 <HAL_GPIO_Init+0x304>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ca6:	4a2f      	ldr	r2, [pc, #188]	@ (8001d64 <HAL_GPIO_Init+0x304>)
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cac:	4b2d      	ldr	r3, [pc, #180]	@ (8001d64 <HAL_GPIO_Init+0x304>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d003      	beq.n	8001cd0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cd0:	4a24      	ldr	r2, [pc, #144]	@ (8001d64 <HAL_GPIO_Init+0x304>)
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cd6:	4b23      	ldr	r3, [pc, #140]	@ (8001d64 <HAL_GPIO_Init+0x304>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cfa:	4a1a      	ldr	r2, [pc, #104]	@ (8001d64 <HAL_GPIO_Init+0x304>)
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d00:	4b18      	ldr	r3, [pc, #96]	@ (8001d64 <HAL_GPIO_Init+0x304>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d24:	4a0f      	ldr	r2, [pc, #60]	@ (8001d64 <HAL_GPIO_Init+0x304>)
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	61fb      	str	r3, [r7, #28]
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	2b0f      	cmp	r3, #15
 8001d34:	f67f aea2 	bls.w	8001a7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d38:	bf00      	nop
 8001d3a:	bf00      	nop
 8001d3c:	3724      	adds	r7, #36	@ 0x24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40013800 	.word	0x40013800
 8001d50:	40020000 	.word	0x40020000
 8001d54:	40020400 	.word	0x40020400
 8001d58:	40020800 	.word	0x40020800
 8001d5c:	40020c00 	.word	0x40020c00
 8001d60:	40021000 	.word	0x40021000
 8001d64:	40013c00 	.word	0x40013c00

08001d68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	460b      	mov	r3, r1
 8001d72:	807b      	strh	r3, [r7, #2]
 8001d74:	4613      	mov	r3, r2
 8001d76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d78:	787b      	ldrb	r3, [r7, #1]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d7e:	887a      	ldrh	r2, [r7, #2]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d84:	e003      	b.n	8001d8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d86:	887b      	ldrh	r3, [r7, #2]
 8001d88:	041a      	lsls	r2, r3, #16
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	619a      	str	r2, [r3, #24]
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
	...

08001d9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e267      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d075      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001dba:	4b88      	ldr	r3, [pc, #544]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 030c 	and.w	r3, r3, #12
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	d00c      	beq.n	8001de0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dc6:	4b85      	ldr	r3, [pc, #532]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001dce:	2b08      	cmp	r3, #8
 8001dd0:	d112      	bne.n	8001df8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dd2:	4b82      	ldr	r3, [pc, #520]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001dde:	d10b      	bne.n	8001df8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de0:	4b7e      	ldr	r3, [pc, #504]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d05b      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x108>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d157      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e242      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e00:	d106      	bne.n	8001e10 <HAL_RCC_OscConfig+0x74>
 8001e02:	4b76      	ldr	r3, [pc, #472]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a75      	ldr	r2, [pc, #468]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e0c:	6013      	str	r3, [r2, #0]
 8001e0e:	e01d      	b.n	8001e4c <HAL_RCC_OscConfig+0xb0>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e18:	d10c      	bne.n	8001e34 <HAL_RCC_OscConfig+0x98>
 8001e1a:	4b70      	ldr	r3, [pc, #448]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a6f      	ldr	r2, [pc, #444]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e24:	6013      	str	r3, [r2, #0]
 8001e26:	4b6d      	ldr	r3, [pc, #436]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a6c      	ldr	r2, [pc, #432]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e30:	6013      	str	r3, [r2, #0]
 8001e32:	e00b      	b.n	8001e4c <HAL_RCC_OscConfig+0xb0>
 8001e34:	4b69      	ldr	r3, [pc, #420]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a68      	ldr	r2, [pc, #416]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e3e:	6013      	str	r3, [r2, #0]
 8001e40:	4b66      	ldr	r3, [pc, #408]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a65      	ldr	r2, [pc, #404]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d013      	beq.n	8001e7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e54:	f7ff fc84 	bl	8001760 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e5c:	f7ff fc80 	bl	8001760 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b64      	cmp	r3, #100	@ 0x64
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e207      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6e:	4b5b      	ldr	r3, [pc, #364]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d0f0      	beq.n	8001e5c <HAL_RCC_OscConfig+0xc0>
 8001e7a:	e014      	b.n	8001ea6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7c:	f7ff fc70 	bl	8001760 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e84:	f7ff fc6c 	bl	8001760 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b64      	cmp	r3, #100	@ 0x64
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e1f3      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e96:	4b51      	ldr	r3, [pc, #324]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1f0      	bne.n	8001e84 <HAL_RCC_OscConfig+0xe8>
 8001ea2:	e000      	b.n	8001ea6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d063      	beq.n	8001f7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001eb2:	4b4a      	ldr	r3, [pc, #296]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 030c 	and.w	r3, r3, #12
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00b      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ebe:	4b47      	ldr	r3, [pc, #284]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001ec6:	2b08      	cmp	r3, #8
 8001ec8:	d11c      	bne.n	8001f04 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eca:	4b44      	ldr	r3, [pc, #272]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d116      	bne.n	8001f04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ed6:	4b41      	ldr	r3, [pc, #260]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d005      	beq.n	8001eee <HAL_RCC_OscConfig+0x152>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d001      	beq.n	8001eee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e1c7      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eee:	4b3b      	ldr	r3, [pc, #236]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	4937      	ldr	r1, [pc, #220]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f02:	e03a      	b.n	8001f7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d020      	beq.n	8001f4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f0c:	4b34      	ldr	r3, [pc, #208]	@ (8001fe0 <HAL_RCC_OscConfig+0x244>)
 8001f0e:	2201      	movs	r2, #1
 8001f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f12:	f7ff fc25 	bl	8001760 <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f18:	e008      	b.n	8001f2c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f1a:	f7ff fc21 	bl	8001760 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e1a8      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f2c:	4b2b      	ldr	r3, [pc, #172]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d0f0      	beq.n	8001f1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f38:	4b28      	ldr	r3, [pc, #160]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	4925      	ldr	r1, [pc, #148]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	600b      	str	r3, [r1, #0]
 8001f4c:	e015      	b.n	8001f7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f4e:	4b24      	ldr	r3, [pc, #144]	@ (8001fe0 <HAL_RCC_OscConfig+0x244>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f54:	f7ff fc04 	bl	8001760 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f5c:	f7ff fc00 	bl	8001760 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e187      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f6e:	4b1b      	ldr	r3, [pc, #108]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f0      	bne.n	8001f5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d036      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d016      	beq.n	8001fbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f8e:	4b15      	ldr	r3, [pc, #84]	@ (8001fe4 <HAL_RCC_OscConfig+0x248>)
 8001f90:	2201      	movs	r2, #1
 8001f92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f94:	f7ff fbe4 	bl	8001760 <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f9c:	f7ff fbe0 	bl	8001760 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e167      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fae:	4b0b      	ldr	r3, [pc, #44]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001fb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d0f0      	beq.n	8001f9c <HAL_RCC_OscConfig+0x200>
 8001fba:	e01b      	b.n	8001ff4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fbc:	4b09      	ldr	r3, [pc, #36]	@ (8001fe4 <HAL_RCC_OscConfig+0x248>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc2:	f7ff fbcd 	bl	8001760 <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fc8:	e00e      	b.n	8001fe8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fca:	f7ff fbc9 	bl	8001760 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d907      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e150      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	42470000 	.word	0x42470000
 8001fe4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fe8:	4b88      	ldr	r3, [pc, #544]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 8001fea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1ea      	bne.n	8001fca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 8097 	beq.w	8002130 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002002:	2300      	movs	r3, #0
 8002004:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002006:	4b81      	ldr	r3, [pc, #516]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10f      	bne.n	8002032 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	4b7d      	ldr	r3, [pc, #500]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201a:	4a7c      	ldr	r2, [pc, #496]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 800201c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002020:	6413      	str	r3, [r2, #64]	@ 0x40
 8002022:	4b7a      	ldr	r3, [pc, #488]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002026:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800202a:	60bb      	str	r3, [r7, #8]
 800202c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800202e:	2301      	movs	r3, #1
 8002030:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002032:	4b77      	ldr	r3, [pc, #476]	@ (8002210 <HAL_RCC_OscConfig+0x474>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800203a:	2b00      	cmp	r3, #0
 800203c:	d118      	bne.n	8002070 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800203e:	4b74      	ldr	r3, [pc, #464]	@ (8002210 <HAL_RCC_OscConfig+0x474>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a73      	ldr	r2, [pc, #460]	@ (8002210 <HAL_RCC_OscConfig+0x474>)
 8002044:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002048:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800204a:	f7ff fb89 	bl	8001760 <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002052:	f7ff fb85 	bl	8001760 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e10c      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002064:	4b6a      	ldr	r3, [pc, #424]	@ (8002210 <HAL_RCC_OscConfig+0x474>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0f0      	beq.n	8002052 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d106      	bne.n	8002086 <HAL_RCC_OscConfig+0x2ea>
 8002078:	4b64      	ldr	r3, [pc, #400]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 800207a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800207c:	4a63      	ldr	r2, [pc, #396]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 800207e:	f043 0301 	orr.w	r3, r3, #1
 8002082:	6713      	str	r3, [r2, #112]	@ 0x70
 8002084:	e01c      	b.n	80020c0 <HAL_RCC_OscConfig+0x324>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	2b05      	cmp	r3, #5
 800208c:	d10c      	bne.n	80020a8 <HAL_RCC_OscConfig+0x30c>
 800208e:	4b5f      	ldr	r3, [pc, #380]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 8002090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002092:	4a5e      	ldr	r2, [pc, #376]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 8002094:	f043 0304 	orr.w	r3, r3, #4
 8002098:	6713      	str	r3, [r2, #112]	@ 0x70
 800209a:	4b5c      	ldr	r3, [pc, #368]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 800209c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800209e:	4a5b      	ldr	r2, [pc, #364]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 80020a0:	f043 0301 	orr.w	r3, r3, #1
 80020a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80020a6:	e00b      	b.n	80020c0 <HAL_RCC_OscConfig+0x324>
 80020a8:	4b58      	ldr	r3, [pc, #352]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 80020aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ac:	4a57      	ldr	r2, [pc, #348]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 80020ae:	f023 0301 	bic.w	r3, r3, #1
 80020b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80020b4:	4b55      	ldr	r3, [pc, #340]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 80020b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020b8:	4a54      	ldr	r2, [pc, #336]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 80020ba:	f023 0304 	bic.w	r3, r3, #4
 80020be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d015      	beq.n	80020f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c8:	f7ff fb4a 	bl	8001760 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ce:	e00a      	b.n	80020e6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d0:	f7ff fb46 	bl	8001760 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020de:	4293      	cmp	r3, r2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e0cb      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020e6:	4b49      	ldr	r3, [pc, #292]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 80020e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d0ee      	beq.n	80020d0 <HAL_RCC_OscConfig+0x334>
 80020f2:	e014      	b.n	800211e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f4:	f7ff fb34 	bl	8001760 <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020fa:	e00a      	b.n	8002112 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020fc:	f7ff fb30 	bl	8001760 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	f241 3288 	movw	r2, #5000	@ 0x1388
 800210a:	4293      	cmp	r3, r2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e0b5      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002112:	4b3e      	ldr	r3, [pc, #248]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 8002114:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1ee      	bne.n	80020fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800211e:	7dfb      	ldrb	r3, [r7, #23]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d105      	bne.n	8002130 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002124:	4b39      	ldr	r3, [pc, #228]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 8002126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002128:	4a38      	ldr	r2, [pc, #224]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 800212a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800212e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	2b00      	cmp	r3, #0
 8002136:	f000 80a1 	beq.w	800227c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800213a:	4b34      	ldr	r3, [pc, #208]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 030c 	and.w	r3, r3, #12
 8002142:	2b08      	cmp	r3, #8
 8002144:	d05c      	beq.n	8002200 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	2b02      	cmp	r3, #2
 800214c:	d141      	bne.n	80021d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800214e:	4b31      	ldr	r3, [pc, #196]	@ (8002214 <HAL_RCC_OscConfig+0x478>)
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002154:	f7ff fb04 	bl	8001760 <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800215c:	f7ff fb00 	bl	8001760 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e087      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800216e:	4b27      	ldr	r3, [pc, #156]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f0      	bne.n	800215c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69da      	ldr	r2, [r3, #28]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	431a      	orrs	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002188:	019b      	lsls	r3, r3, #6
 800218a:	431a      	orrs	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002190:	085b      	lsrs	r3, r3, #1
 8002192:	3b01      	subs	r3, #1
 8002194:	041b      	lsls	r3, r3, #16
 8002196:	431a      	orrs	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800219c:	061b      	lsls	r3, r3, #24
 800219e:	491b      	ldr	r1, [pc, #108]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002214 <HAL_RCC_OscConfig+0x478>)
 80021a6:	2201      	movs	r2, #1
 80021a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021aa:	f7ff fad9 	bl	8001760 <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021b0:	e008      	b.n	80021c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b2:	f7ff fad5 	bl	8001760 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e05c      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021c4:	4b11      	ldr	r3, [pc, #68]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0f0      	beq.n	80021b2 <HAL_RCC_OscConfig+0x416>
 80021d0:	e054      	b.n	800227c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d2:	4b10      	ldr	r3, [pc, #64]	@ (8002214 <HAL_RCC_OscConfig+0x478>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d8:	f7ff fac2 	bl	8001760 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e0:	f7ff fabe 	bl	8001760 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e045      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021f2:	4b06      	ldr	r3, [pc, #24]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f0      	bne.n	80021e0 <HAL_RCC_OscConfig+0x444>
 80021fe:	e03d      	b.n	800227c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d107      	bne.n	8002218 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e038      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
 800220c:	40023800 	.word	0x40023800
 8002210:	40007000 	.word	0x40007000
 8002214:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002218:	4b1b      	ldr	r3, [pc, #108]	@ (8002288 <HAL_RCC_OscConfig+0x4ec>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d028      	beq.n	8002278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002230:	429a      	cmp	r2, r3
 8002232:	d121      	bne.n	8002278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800223e:	429a      	cmp	r2, r3
 8002240:	d11a      	bne.n	8002278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002248:	4013      	ands	r3, r2
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800224e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002250:	4293      	cmp	r3, r2
 8002252:	d111      	bne.n	8002278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800225e:	085b      	lsrs	r3, r3, #1
 8002260:	3b01      	subs	r3, #1
 8002262:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002264:	429a      	cmp	r2, r3
 8002266:	d107      	bne.n	8002278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002272:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002274:	429a      	cmp	r2, r3
 8002276:	d001      	beq.n	800227c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e000      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3718      	adds	r7, #24
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40023800 	.word	0x40023800

0800228c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e0cc      	b.n	800243a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022a0:	4b68      	ldr	r3, [pc, #416]	@ (8002444 <HAL_RCC_ClockConfig+0x1b8>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d90c      	bls.n	80022c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ae:	4b65      	ldr	r3, [pc, #404]	@ (8002444 <HAL_RCC_ClockConfig+0x1b8>)
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	b2d2      	uxtb	r2, r2
 80022b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022b6:	4b63      	ldr	r3, [pc, #396]	@ (8002444 <HAL_RCC_ClockConfig+0x1b8>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d001      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e0b8      	b.n	800243a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d020      	beq.n	8002316 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d005      	beq.n	80022ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022e0:	4b59      	ldr	r3, [pc, #356]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	4a58      	ldr	r2, [pc, #352]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 80022e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80022ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0308 	and.w	r3, r3, #8
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d005      	beq.n	8002304 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022f8:	4b53      	ldr	r3, [pc, #332]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	4a52      	ldr	r2, [pc, #328]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 80022fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002302:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002304:	4b50      	ldr	r3, [pc, #320]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	494d      	ldr	r1, [pc, #308]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 8002312:	4313      	orrs	r3, r2
 8002314:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b00      	cmp	r3, #0
 8002320:	d044      	beq.n	80023ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d107      	bne.n	800233a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800232a:	4b47      	ldr	r3, [pc, #284]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d119      	bne.n	800236a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e07f      	b.n	800243a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2b02      	cmp	r3, #2
 8002340:	d003      	beq.n	800234a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002346:	2b03      	cmp	r3, #3
 8002348:	d107      	bne.n	800235a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800234a:	4b3f      	ldr	r3, [pc, #252]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d109      	bne.n	800236a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e06f      	b.n	800243a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800235a:	4b3b      	ldr	r3, [pc, #236]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e067      	b.n	800243a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800236a:	4b37      	ldr	r3, [pc, #220]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f023 0203 	bic.w	r2, r3, #3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	4934      	ldr	r1, [pc, #208]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 8002378:	4313      	orrs	r3, r2
 800237a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800237c:	f7ff f9f0 	bl	8001760 <HAL_GetTick>
 8002380:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002382:	e00a      	b.n	800239a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002384:	f7ff f9ec 	bl	8001760 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002392:	4293      	cmp	r3, r2
 8002394:	d901      	bls.n	800239a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e04f      	b.n	800243a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239a:	4b2b      	ldr	r3, [pc, #172]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 020c 	and.w	r2, r3, #12
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d1eb      	bne.n	8002384 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023ac:	4b25      	ldr	r3, [pc, #148]	@ (8002444 <HAL_RCC_ClockConfig+0x1b8>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d20c      	bcs.n	80023d4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ba:	4b22      	ldr	r3, [pc, #136]	@ (8002444 <HAL_RCC_ClockConfig+0x1b8>)
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c2:	4b20      	ldr	r3, [pc, #128]	@ (8002444 <HAL_RCC_ClockConfig+0x1b8>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d001      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e032      	b.n	800243a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0304 	and.w	r3, r3, #4
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d008      	beq.n	80023f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023e0:	4b19      	ldr	r3, [pc, #100]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	4916      	ldr	r1, [pc, #88]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0308 	and.w	r3, r3, #8
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d009      	beq.n	8002412 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023fe:	4b12      	ldr	r3, [pc, #72]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	490e      	ldr	r1, [pc, #56]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 800240e:	4313      	orrs	r3, r2
 8002410:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002412:	f000 f821 	bl	8002458 <HAL_RCC_GetSysClockFreq>
 8002416:	4602      	mov	r2, r0
 8002418:	4b0b      	ldr	r3, [pc, #44]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	091b      	lsrs	r3, r3, #4
 800241e:	f003 030f 	and.w	r3, r3, #15
 8002422:	490a      	ldr	r1, [pc, #40]	@ (800244c <HAL_RCC_ClockConfig+0x1c0>)
 8002424:	5ccb      	ldrb	r3, [r1, r3]
 8002426:	fa22 f303 	lsr.w	r3, r2, r3
 800242a:	4a09      	ldr	r2, [pc, #36]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 800242c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800242e:	4b09      	ldr	r3, [pc, #36]	@ (8002454 <HAL_RCC_ClockConfig+0x1c8>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f7fe fd40 	bl	8000eb8 <HAL_InitTick>

  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40023c00 	.word	0x40023c00
 8002448:	40023800 	.word	0x40023800
 800244c:	08008214 	.word	0x08008214
 8002450:	20000008 	.word	0x20000008
 8002454:	20000010 	.word	0x20000010

08002458 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002458:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800245c:	b094      	sub	sp, #80	@ 0x50
 800245e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002460:	2300      	movs	r3, #0
 8002462:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002464:	2300      	movs	r3, #0
 8002466:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002468:	2300      	movs	r3, #0
 800246a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800246c:	2300      	movs	r3, #0
 800246e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002470:	4b79      	ldr	r3, [pc, #484]	@ (8002658 <HAL_RCC_GetSysClockFreq+0x200>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f003 030c 	and.w	r3, r3, #12
 8002478:	2b08      	cmp	r3, #8
 800247a:	d00d      	beq.n	8002498 <HAL_RCC_GetSysClockFreq+0x40>
 800247c:	2b08      	cmp	r3, #8
 800247e:	f200 80e1 	bhi.w	8002644 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002482:	2b00      	cmp	r3, #0
 8002484:	d002      	beq.n	800248c <HAL_RCC_GetSysClockFreq+0x34>
 8002486:	2b04      	cmp	r3, #4
 8002488:	d003      	beq.n	8002492 <HAL_RCC_GetSysClockFreq+0x3a>
 800248a:	e0db      	b.n	8002644 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800248c:	4b73      	ldr	r3, [pc, #460]	@ (800265c <HAL_RCC_GetSysClockFreq+0x204>)
 800248e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002490:	e0db      	b.n	800264a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002492:	4b73      	ldr	r3, [pc, #460]	@ (8002660 <HAL_RCC_GetSysClockFreq+0x208>)
 8002494:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002496:	e0d8      	b.n	800264a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002498:	4b6f      	ldr	r3, [pc, #444]	@ (8002658 <HAL_RCC_GetSysClockFreq+0x200>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024a0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024a2:	4b6d      	ldr	r3, [pc, #436]	@ (8002658 <HAL_RCC_GetSysClockFreq+0x200>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d063      	beq.n	8002576 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024ae:	4b6a      	ldr	r3, [pc, #424]	@ (8002658 <HAL_RCC_GetSysClockFreq+0x200>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	099b      	lsrs	r3, r3, #6
 80024b4:	2200      	movs	r2, #0
 80024b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80024b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80024ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80024c2:	2300      	movs	r3, #0
 80024c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80024c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80024ca:	4622      	mov	r2, r4
 80024cc:	462b      	mov	r3, r5
 80024ce:	f04f 0000 	mov.w	r0, #0
 80024d2:	f04f 0100 	mov.w	r1, #0
 80024d6:	0159      	lsls	r1, r3, #5
 80024d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024dc:	0150      	lsls	r0, r2, #5
 80024de:	4602      	mov	r2, r0
 80024e0:	460b      	mov	r3, r1
 80024e2:	4621      	mov	r1, r4
 80024e4:	1a51      	subs	r1, r2, r1
 80024e6:	6139      	str	r1, [r7, #16]
 80024e8:	4629      	mov	r1, r5
 80024ea:	eb63 0301 	sbc.w	r3, r3, r1
 80024ee:	617b      	str	r3, [r7, #20]
 80024f0:	f04f 0200 	mov.w	r2, #0
 80024f4:	f04f 0300 	mov.w	r3, #0
 80024f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024fc:	4659      	mov	r1, fp
 80024fe:	018b      	lsls	r3, r1, #6
 8002500:	4651      	mov	r1, sl
 8002502:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002506:	4651      	mov	r1, sl
 8002508:	018a      	lsls	r2, r1, #6
 800250a:	4651      	mov	r1, sl
 800250c:	ebb2 0801 	subs.w	r8, r2, r1
 8002510:	4659      	mov	r1, fp
 8002512:	eb63 0901 	sbc.w	r9, r3, r1
 8002516:	f04f 0200 	mov.w	r2, #0
 800251a:	f04f 0300 	mov.w	r3, #0
 800251e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002522:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002526:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800252a:	4690      	mov	r8, r2
 800252c:	4699      	mov	r9, r3
 800252e:	4623      	mov	r3, r4
 8002530:	eb18 0303 	adds.w	r3, r8, r3
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	462b      	mov	r3, r5
 8002538:	eb49 0303 	adc.w	r3, r9, r3
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	f04f 0200 	mov.w	r2, #0
 8002542:	f04f 0300 	mov.w	r3, #0
 8002546:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800254a:	4629      	mov	r1, r5
 800254c:	024b      	lsls	r3, r1, #9
 800254e:	4621      	mov	r1, r4
 8002550:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002554:	4621      	mov	r1, r4
 8002556:	024a      	lsls	r2, r1, #9
 8002558:	4610      	mov	r0, r2
 800255a:	4619      	mov	r1, r3
 800255c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800255e:	2200      	movs	r2, #0
 8002560:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002562:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002564:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002568:	f7fd fe92 	bl	8000290 <__aeabi_uldivmod>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	4613      	mov	r3, r2
 8002572:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002574:	e058      	b.n	8002628 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002576:	4b38      	ldr	r3, [pc, #224]	@ (8002658 <HAL_RCC_GetSysClockFreq+0x200>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	099b      	lsrs	r3, r3, #6
 800257c:	2200      	movs	r2, #0
 800257e:	4618      	mov	r0, r3
 8002580:	4611      	mov	r1, r2
 8002582:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002586:	623b      	str	r3, [r7, #32]
 8002588:	2300      	movs	r3, #0
 800258a:	627b      	str	r3, [r7, #36]	@ 0x24
 800258c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002590:	4642      	mov	r2, r8
 8002592:	464b      	mov	r3, r9
 8002594:	f04f 0000 	mov.w	r0, #0
 8002598:	f04f 0100 	mov.w	r1, #0
 800259c:	0159      	lsls	r1, r3, #5
 800259e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025a2:	0150      	lsls	r0, r2, #5
 80025a4:	4602      	mov	r2, r0
 80025a6:	460b      	mov	r3, r1
 80025a8:	4641      	mov	r1, r8
 80025aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80025ae:	4649      	mov	r1, r9
 80025b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80025b4:	f04f 0200 	mov.w	r2, #0
 80025b8:	f04f 0300 	mov.w	r3, #0
 80025bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80025c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80025c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80025c8:	ebb2 040a 	subs.w	r4, r2, sl
 80025cc:	eb63 050b 	sbc.w	r5, r3, fp
 80025d0:	f04f 0200 	mov.w	r2, #0
 80025d4:	f04f 0300 	mov.w	r3, #0
 80025d8:	00eb      	lsls	r3, r5, #3
 80025da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025de:	00e2      	lsls	r2, r4, #3
 80025e0:	4614      	mov	r4, r2
 80025e2:	461d      	mov	r5, r3
 80025e4:	4643      	mov	r3, r8
 80025e6:	18e3      	adds	r3, r4, r3
 80025e8:	603b      	str	r3, [r7, #0]
 80025ea:	464b      	mov	r3, r9
 80025ec:	eb45 0303 	adc.w	r3, r5, r3
 80025f0:	607b      	str	r3, [r7, #4]
 80025f2:	f04f 0200 	mov.w	r2, #0
 80025f6:	f04f 0300 	mov.w	r3, #0
 80025fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025fe:	4629      	mov	r1, r5
 8002600:	028b      	lsls	r3, r1, #10
 8002602:	4621      	mov	r1, r4
 8002604:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002608:	4621      	mov	r1, r4
 800260a:	028a      	lsls	r2, r1, #10
 800260c:	4610      	mov	r0, r2
 800260e:	4619      	mov	r1, r3
 8002610:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002612:	2200      	movs	r2, #0
 8002614:	61bb      	str	r3, [r7, #24]
 8002616:	61fa      	str	r2, [r7, #28]
 8002618:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800261c:	f7fd fe38 	bl	8000290 <__aeabi_uldivmod>
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	4613      	mov	r3, r2
 8002626:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002628:	4b0b      	ldr	r3, [pc, #44]	@ (8002658 <HAL_RCC_GetSysClockFreq+0x200>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	0c1b      	lsrs	r3, r3, #16
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	3301      	adds	r3, #1
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002638:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800263a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800263c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002640:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002642:	e002      	b.n	800264a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002644:	4b05      	ldr	r3, [pc, #20]	@ (800265c <HAL_RCC_GetSysClockFreq+0x204>)
 8002646:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002648:	bf00      	nop
    }
  }
  return sysclockfreq;
 800264a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800264c:	4618      	mov	r0, r3
 800264e:	3750      	adds	r7, #80	@ 0x50
 8002650:	46bd      	mov	sp, r7
 8002652:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002656:	bf00      	nop
 8002658:	40023800 	.word	0x40023800
 800265c:	00f42400 	.word	0x00f42400
 8002660:	007a1200 	.word	0x007a1200

08002664 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002668:	4b03      	ldr	r3, [pc, #12]	@ (8002678 <HAL_RCC_GetHCLKFreq+0x14>)
 800266a:	681b      	ldr	r3, [r3, #0]
}
 800266c:	4618      	mov	r0, r3
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	20000008 	.word	0x20000008

0800267c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002680:	f7ff fff0 	bl	8002664 <HAL_RCC_GetHCLKFreq>
 8002684:	4602      	mov	r2, r0
 8002686:	4b05      	ldr	r3, [pc, #20]	@ (800269c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	0a9b      	lsrs	r3, r3, #10
 800268c:	f003 0307 	and.w	r3, r3, #7
 8002690:	4903      	ldr	r1, [pc, #12]	@ (80026a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002692:	5ccb      	ldrb	r3, [r1, r3]
 8002694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002698:	4618      	mov	r0, r3
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40023800 	.word	0x40023800
 80026a0:	08008224 	.word	0x08008224

080026a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026a8:	f7ff ffdc 	bl	8002664 <HAL_RCC_GetHCLKFreq>
 80026ac:	4602      	mov	r2, r0
 80026ae:	4b05      	ldr	r3, [pc, #20]	@ (80026c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	0b5b      	lsrs	r3, r3, #13
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	4903      	ldr	r1, [pc, #12]	@ (80026c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026ba:	5ccb      	ldrb	r3, [r1, r3]
 80026bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40023800 	.word	0x40023800
 80026c8:	08008224 	.word	0x08008224

080026cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	220f      	movs	r2, #15
 80026da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80026dc:	4b12      	ldr	r3, [pc, #72]	@ (8002728 <HAL_RCC_GetClockConfig+0x5c>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f003 0203 	and.w	r2, r3, #3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80026e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002728 <HAL_RCC_GetClockConfig+0x5c>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80026f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002728 <HAL_RCC_GetClockConfig+0x5c>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002700:	4b09      	ldr	r3, [pc, #36]	@ (8002728 <HAL_RCC_GetClockConfig+0x5c>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	08db      	lsrs	r3, r3, #3
 8002706:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800270e:	4b07      	ldr	r3, [pc, #28]	@ (800272c <HAL_RCC_GetClockConfig+0x60>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0207 	and.w	r2, r3, #7
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	601a      	str	r2, [r3, #0]
}
 800271a:	bf00      	nop
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	40023800 	.word	0x40023800
 800272c:	40023c00 	.word	0x40023c00

08002730 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800273c:	2300      	movs	r3, #0
 800273e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b00      	cmp	r3, #0
 800274a:	d105      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002754:	2b00      	cmp	r3, #0
 8002756:	d035      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002758:	4b67      	ldr	r3, [pc, #412]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800275e:	f7fe ffff 	bl	8001760 <HAL_GetTick>
 8002762:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002764:	e008      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002766:	f7fe fffb 	bl	8001760 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d901      	bls.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e0ba      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002778:	4b60      	ldr	r3, [pc, #384]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1f0      	bne.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	019a      	lsls	r2, r3, #6
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	071b      	lsls	r3, r3, #28
 8002790:	495a      	ldr	r1, [pc, #360]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002792:	4313      	orrs	r3, r2
 8002794:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002798:	4b57      	ldr	r3, [pc, #348]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800279a:	2201      	movs	r2, #1
 800279c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800279e:	f7fe ffdf 	bl	8001760 <HAL_GetTick>
 80027a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80027a4:	e008      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80027a6:	f7fe ffdb 	bl	8001760 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e09a      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80027b8:	4b50      	ldr	r3, [pc, #320]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d0f0      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 8083 	beq.w	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	4b49      	ldr	r3, [pc, #292]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80027d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027da:	4a48      	ldr	r2, [pc, #288]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80027dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80027e2:	4b46      	ldr	r3, [pc, #280]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ea:	60fb      	str	r3, [r7, #12]
 80027ec:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80027ee:	4b44      	ldr	r3, [pc, #272]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a43      	ldr	r2, [pc, #268]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027f8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80027fa:	f7fe ffb1 	bl	8001760 <HAL_GetTick>
 80027fe:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002800:	e008      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002802:	f7fe ffad 	bl	8001760 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e06c      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002814:	4b3a      	ldr	r3, [pc, #232]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0f0      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002820:	4b36      	ldr	r3, [pc, #216]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002822:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002824:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002828:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d02f      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	429a      	cmp	r2, r3
 800283c:	d028      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800283e:	4b2f      	ldr	r3, [pc, #188]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002842:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002846:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002848:	4b2e      	ldr	r3, [pc, #184]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800284a:	2201      	movs	r2, #1
 800284c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800284e:	4b2d      	ldr	r3, [pc, #180]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002854:	4a29      	ldr	r2, [pc, #164]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800285a:	4b28      	ldr	r3, [pc, #160]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800285c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b01      	cmp	r3, #1
 8002864:	d114      	bne.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002866:	f7fe ff7b 	bl	8001760 <HAL_GetTick>
 800286a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800286c:	e00a      	b.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800286e:	f7fe ff77 	bl	8001760 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	f241 3288 	movw	r2, #5000	@ 0x1388
 800287c:	4293      	cmp	r3, r2
 800287e:	d901      	bls.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e034      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002884:	4b1d      	ldr	r3, [pc, #116]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002886:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d0ee      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002898:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800289c:	d10d      	bne.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800289e:	4b17      	ldr	r3, [pc, #92]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80028ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028b2:	4912      	ldr	r1, [pc, #72]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	608b      	str	r3, [r1, #8]
 80028b8:	e005      	b.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80028ba:	4b10      	ldr	r3, [pc, #64]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	4a0f      	ldr	r2, [pc, #60]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80028c0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80028c4:	6093      	str	r3, [r2, #8]
 80028c6:	4b0d      	ldr	r3, [pc, #52]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80028c8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028d2:	490a      	ldr	r1, [pc, #40]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0308 	and.w	r3, r3, #8
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d003      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	7c1a      	ldrb	r2, [r3, #16]
 80028e8:	4b07      	ldr	r3, [pc, #28]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80028ea:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3718      	adds	r7, #24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	42470068 	.word	0x42470068
 80028fc:	40023800 	.word	0x40023800
 8002900:	40007000 	.word	0x40007000
 8002904:	42470e40 	.word	0x42470e40
 8002908:	424711e0 	.word	0x424711e0

0800290c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e073      	b.n	8002a06 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	7f5b      	ldrb	r3, [r3, #29]
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2b00      	cmp	r3, #0
 8002926:	d105      	bne.n	8002934 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7fe fa46 	bl	8000dc0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2202      	movs	r2, #2
 8002938:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	f003 0310 	and.w	r3, r3, #16
 8002944:	2b10      	cmp	r3, #16
 8002946:	d055      	beq.n	80029f4 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	22ca      	movs	r2, #202	@ 0xca
 800294e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2253      	movs	r2, #83	@ 0x53
 8002956:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 f9c3 	bl	8002ce4 <RTC_EnterInitMode>
 800295e:	4603      	mov	r3, r0
 8002960:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002962:	7bfb      	ldrb	r3, [r7, #15]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d12c      	bne.n	80029c2 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	6812      	ldr	r2, [r2, #0]
 8002972:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8002976:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800297a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6899      	ldr	r1, [r3, #8]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	431a      	orrs	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	431a      	orrs	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	430a      	orrs	r2, r1
 8002998:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	68d2      	ldr	r2, [r2, #12]
 80029a2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6919      	ldr	r1, [r3, #16]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	041a      	lsls	r2, r3, #16
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 f9ca 	bl	8002d52 <RTC_ExitInitMode>
 80029be:	4603      	mov	r3, r0
 80029c0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80029c2:	7bfb      	ldrb	r3, [r7, #15]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d110      	bne.n	80029ea <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80029d6:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	699a      	ldr	r2, [r3, #24]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	22ff      	movs	r2, #255	@ 0xff
 80029f0:	625a      	str	r2, [r3, #36]	@ 0x24
 80029f2:	e001      	b.n	80029f8 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80029f4:	2300      	movs	r3, #0
 80029f6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80029f8:	7bfb      	ldrb	r3, [r7, #15]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d102      	bne.n	8002a04 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
	...

08002a10 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002a10:	b590      	push	{r4, r7, lr}
 8002a12:	b089      	sub	sp, #36	@ 0x24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002a1c:	4b9b      	ldr	r3, [pc, #620]	@ (8002c8c <HAL_RTC_SetAlarm_IT+0x27c>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a9b      	ldr	r2, [pc, #620]	@ (8002c90 <HAL_RTC_SetAlarm_IT+0x280>)
 8002a22:	fba2 2303 	umull	r2, r3, r2, r3
 8002a26:	0adb      	lsrs	r3, r3, #11
 8002a28:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002a2c:	fb02 f303 	mul.w	r3, r2, r3
 8002a30:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8002a32:	2300      	movs	r3, #0
 8002a34:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8002a36:	2300      	movs	r3, #0
 8002a38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	7f1b      	ldrb	r3, [r3, #28]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d101      	bne.n	8002a46 <HAL_RTC_SetAlarm_IT+0x36>
 8002a42:	2302      	movs	r3, #2
 8002a44:	e11e      	b.n	8002c84 <HAL_RTC_SetAlarm_IT+0x274>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2202      	movs	r2, #2
 8002a50:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d137      	bne.n	8002ac8 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d102      	bne.n	8002a6c <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f000 f993 	bl	8002d9c <RTC_ByteToBcd2>
 8002a76:	4603      	mov	r3, r0
 8002a78:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	785b      	ldrb	r3, [r3, #1]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f000 f98c 	bl	8002d9c <RTC_ByteToBcd2>
 8002a84:	4603      	mov	r3, r0
 8002a86:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002a88:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	789b      	ldrb	r3, [r3, #2]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f000 f984 	bl	8002d9c <RTC_ByteToBcd2>
 8002a94:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002a96:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	78db      	ldrb	r3, [r3, #3]
 8002a9e:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8002aa0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 f976 	bl	8002d9c <RTC_ByteToBcd2>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 8002ab4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8002abc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	61fb      	str	r3, [r7, #28]
 8002ac6:	e023      	b.n	8002b10 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d102      	bne.n	8002adc <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	785b      	ldrb	r3, [r3, #1]
 8002ae6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002ae8:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8002aea:	68ba      	ldr	r2, [r7, #8]
 8002aec:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8002aee:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	78db      	ldrb	r3, [r3, #3]
 8002af4:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8002af6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002afe:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 8002b00:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8002b06:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	22ca      	movs	r2, #202	@ 0xca
 8002b22:	625a      	str	r2, [r3, #36]	@ 0x24
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2253      	movs	r2, #83	@ 0x53
 8002b2a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b34:	d142      	bne.n	8002bbc <HAL_RTC_SetAlarm_IT+0x1ac>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689a      	ldr	r2, [r3, #8]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b44:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8002b56:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d10b      	bne.n	8002b7c <HAL_RTC_SetAlarm_IT+0x16c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	22ff      	movs	r2, #255	@ 0xff
 8002b6a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2203      	movs	r2, #3
 8002b70:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e083      	b.n	8002c84 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0e6      	beq.n	8002b58 <HAL_RTC_SetAlarm_IT+0x148>

  /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	69fa      	ldr	r2, [r7, #28]
 8002b90:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ba8:	609a      	str	r2, [r3, #8]
    /* Enable Alarm A interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002bb8:	609a      	str	r2, [r3, #8]
 8002bba:	e04c      	b.n	8002c56 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689a      	ldr	r2, [r3, #8]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002bca:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8002bdc:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002bde:	4b2b      	ldr	r3, [pc, #172]	@ (8002c8c <HAL_RTC_SetAlarm_IT+0x27c>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a2b      	ldr	r2, [pc, #172]	@ (8002c90 <HAL_RTC_SetAlarm_IT+0x280>)
 8002be4:	fba2 2303 	umull	r2, r3, r2, r3
 8002be8:	0adb      	lsrs	r3, r3, #11
 8002bea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002bee:	fb02 f303 	mul.w	r3, r2, r3
 8002bf2:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d10b      	bne.n	8002c18 <HAL_RTC_SetAlarm_IT+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	22ff      	movs	r2, #255	@ 0xff
 8002c06:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2203      	movs	r2, #3
 8002c0c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e035      	b.n	8002c84 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d0e6      	beq.n	8002bf4 <HAL_RTC_SetAlarm_IT+0x1e4>

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	69fa      	ldr	r2, [r7, #28]
 8002c2c:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c44:	609a      	str	r2, [r3, #8]
    /* Enable Alarm B interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c54:	609a      	str	r2, [r3, #8]
  }

  /* Enable and configure the EXTI line associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002c56:	4b0f      	ldr	r3, [pc, #60]	@ (8002c94 <HAL_RTC_SetAlarm_IT+0x284>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a0e      	ldr	r2, [pc, #56]	@ (8002c94 <HAL_RTC_SetAlarm_IT+0x284>)
 8002c5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c60:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8002c62:	4b0c      	ldr	r3, [pc, #48]	@ (8002c94 <HAL_RTC_SetAlarm_IT+0x284>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	4a0b      	ldr	r2, [pc, #44]	@ (8002c94 <HAL_RTC_SetAlarm_IT+0x284>)
 8002c68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c6c:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	22ff      	movs	r2, #255	@ 0xff
 8002c74:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3724      	adds	r7, #36	@ 0x24
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd90      	pop	{r4, r7, pc}
 8002c8c:	20000008 	.word	0x20000008
 8002c90:	10624dd3 	.word	0x10624dd3
 8002c94:	40013c00 	.word	0x40013c00

08002c98 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a0d      	ldr	r2, [pc, #52]	@ (8002ce0 <HAL_RTC_WaitForSynchro+0x48>)
 8002caa:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cac:	f7fe fd58 	bl	8001760 <HAL_GetTick>
 8002cb0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002cb2:	e009      	b.n	8002cc8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002cb4:	f7fe fd54 	bl	8001760 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e007      	b.n	8002cd8 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	f003 0320 	and.w	r3, r3, #32
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d0ee      	beq.n	8002cb4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	00013f5f 	.word	0x00013f5f

08002ce4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cec:	2300      	movs	r3, #0
 8002cee:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d122      	bne.n	8002d48 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68da      	ldr	r2, [r3, #12]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002d10:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d12:	f7fe fd25 	bl	8001760 <HAL_GetTick>
 8002d16:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002d18:	e00c      	b.n	8002d34 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d1a:	f7fe fd21 	bl	8001760 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002d28:	d904      	bls.n	8002d34 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2204      	movs	r2, #4
 8002d2e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d102      	bne.n	8002d48 <RTC_EnterInitMode+0x64>
 8002d42:	7bfb      	ldrb	r3, [r7, #15]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d1e8      	bne.n	8002d1a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b084      	sub	sp, #16
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68da      	ldr	r2, [r3, #12]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d6c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f003 0320 	and.w	r3, r3, #32
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10a      	bne.n	8002d92 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f7ff ff8b 	bl	8002c98 <HAL_RTC_WaitForSynchro>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d004      	beq.n	8002d92 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2204      	movs	r2, #4
 8002d8c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	4603      	mov	r3, r0
 8002da4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002da6:	2300      	movs	r3, #0
 8002da8:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8002daa:	e005      	b.n	8002db8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	3301      	adds	r3, #1
 8002db0:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8002db2:	79fb      	ldrb	r3, [r7, #7]
 8002db4:	3b0a      	subs	r3, #10
 8002db6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8002db8:	79fb      	ldrb	r3, [r7, #7]
 8002dba:	2b09      	cmp	r3, #9
 8002dbc:	d8f6      	bhi.n	8002dac <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	011b      	lsls	r3, r3, #4
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	79fb      	ldrb	r3, [r7, #7]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	b2db      	uxtb	r3, r3
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e041      	b.n	8002e6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d106      	bne.n	8002e04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 f839 	bl	8002e76 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2202      	movs	r2, #2
 8002e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3304      	adds	r3, #4
 8002e14:	4619      	mov	r1, r3
 8002e16:	4610      	mov	r0, r2
 8002e18:	f000 f9b2 	bl	8003180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b083      	sub	sp, #12
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002e7e:	bf00      	nop
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
	...

08002e8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d001      	beq.n	8002ea4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e044      	b.n	8002f2e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68da      	ldr	r2, [r3, #12]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0201 	orr.w	r2, r2, #1
 8002eba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a1e      	ldr	r2, [pc, #120]	@ (8002f3c <HAL_TIM_Base_Start_IT+0xb0>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d018      	beq.n	8002ef8 <HAL_TIM_Base_Start_IT+0x6c>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ece:	d013      	beq.n	8002ef8 <HAL_TIM_Base_Start_IT+0x6c>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a1a      	ldr	r2, [pc, #104]	@ (8002f40 <HAL_TIM_Base_Start_IT+0xb4>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d00e      	beq.n	8002ef8 <HAL_TIM_Base_Start_IT+0x6c>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a19      	ldr	r2, [pc, #100]	@ (8002f44 <HAL_TIM_Base_Start_IT+0xb8>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d009      	beq.n	8002ef8 <HAL_TIM_Base_Start_IT+0x6c>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a17      	ldr	r2, [pc, #92]	@ (8002f48 <HAL_TIM_Base_Start_IT+0xbc>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d004      	beq.n	8002ef8 <HAL_TIM_Base_Start_IT+0x6c>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a16      	ldr	r2, [pc, #88]	@ (8002f4c <HAL_TIM_Base_Start_IT+0xc0>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d111      	bne.n	8002f1c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f003 0307 	and.w	r3, r3, #7
 8002f02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2b06      	cmp	r3, #6
 8002f08:	d010      	beq.n	8002f2c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f042 0201 	orr.w	r2, r2, #1
 8002f18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f1a:	e007      	b.n	8002f2c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f042 0201 	orr.w	r2, r2, #1
 8002f2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3714      	adds	r7, #20
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	40010000 	.word	0x40010000
 8002f40:	40000400 	.word	0x40000400
 8002f44:	40000800 	.word	0x40000800
 8002f48:	40000c00 	.word	0x40000c00
 8002f4c:	40014000 	.word	0x40014000

08002f50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d020      	beq.n	8002fb4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d01b      	beq.n	8002fb4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f06f 0202 	mvn.w	r2, #2
 8002f84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f8d2 	bl	8003144 <HAL_TIM_IC_CaptureCallback>
 8002fa0:	e005      	b.n	8002fae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f8c4 	bl	8003130 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 f8d5 	bl	8003158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	f003 0304 	and.w	r3, r3, #4
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d020      	beq.n	8003000 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f003 0304 	and.w	r3, r3, #4
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d01b      	beq.n	8003000 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f06f 0204 	mvn.w	r2, #4
 8002fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2202      	movs	r2, #2
 8002fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 f8ac 	bl	8003144 <HAL_TIM_IC_CaptureCallback>
 8002fec:	e005      	b.n	8002ffa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f89e 	bl	8003130 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 f8af 	bl	8003158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	2b00      	cmp	r3, #0
 8003008:	d020      	beq.n	800304c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f003 0308 	and.w	r3, r3, #8
 8003010:	2b00      	cmp	r3, #0
 8003012:	d01b      	beq.n	800304c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f06f 0208 	mvn.w	r2, #8
 800301c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2204      	movs	r2, #4
 8003022:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	69db      	ldr	r3, [r3, #28]
 800302a:	f003 0303 	and.w	r3, r3, #3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 f886 	bl	8003144 <HAL_TIM_IC_CaptureCallback>
 8003038:	e005      	b.n	8003046 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 f878 	bl	8003130 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 f889 	bl	8003158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	f003 0310 	and.w	r3, r3, #16
 8003052:	2b00      	cmp	r3, #0
 8003054:	d020      	beq.n	8003098 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f003 0310 	and.w	r3, r3, #16
 800305c:	2b00      	cmp	r3, #0
 800305e:	d01b      	beq.n	8003098 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f06f 0210 	mvn.w	r2, #16
 8003068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2208      	movs	r2, #8
 800306e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f860 	bl	8003144 <HAL_TIM_IC_CaptureCallback>
 8003084:	e005      	b.n	8003092 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 f852 	bl	8003130 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f863 	bl	8003158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00c      	beq.n	80030bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d007      	beq.n	80030bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f06f 0201 	mvn.w	r2, #1
 80030b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7fd fce6 	bl	8000a88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00c      	beq.n	80030e0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d007      	beq.n	80030e0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80030d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 f8e0 	bl	80032a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00c      	beq.n	8003104 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d007      	beq.n	8003104 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80030fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f834 	bl	800316c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	f003 0320 	and.w	r3, r3, #32
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00c      	beq.n	8003128 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f003 0320 	and.w	r3, r3, #32
 8003114:	2b00      	cmp	r3, #0
 8003116:	d007      	beq.n	8003128 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f06f 0220 	mvn.w	r2, #32
 8003120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f8b2 	bl	800328c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003128:	bf00      	nop
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a37      	ldr	r2, [pc, #220]	@ (8003270 <TIM_Base_SetConfig+0xf0>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d00f      	beq.n	80031b8 <TIM_Base_SetConfig+0x38>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800319e:	d00b      	beq.n	80031b8 <TIM_Base_SetConfig+0x38>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a34      	ldr	r2, [pc, #208]	@ (8003274 <TIM_Base_SetConfig+0xf4>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d007      	beq.n	80031b8 <TIM_Base_SetConfig+0x38>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a33      	ldr	r2, [pc, #204]	@ (8003278 <TIM_Base_SetConfig+0xf8>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d003      	beq.n	80031b8 <TIM_Base_SetConfig+0x38>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a32      	ldr	r2, [pc, #200]	@ (800327c <TIM_Base_SetConfig+0xfc>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d108      	bne.n	80031ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a28      	ldr	r2, [pc, #160]	@ (8003270 <TIM_Base_SetConfig+0xf0>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d01b      	beq.n	800320a <TIM_Base_SetConfig+0x8a>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031d8:	d017      	beq.n	800320a <TIM_Base_SetConfig+0x8a>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a25      	ldr	r2, [pc, #148]	@ (8003274 <TIM_Base_SetConfig+0xf4>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d013      	beq.n	800320a <TIM_Base_SetConfig+0x8a>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a24      	ldr	r2, [pc, #144]	@ (8003278 <TIM_Base_SetConfig+0xf8>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d00f      	beq.n	800320a <TIM_Base_SetConfig+0x8a>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a23      	ldr	r2, [pc, #140]	@ (800327c <TIM_Base_SetConfig+0xfc>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d00b      	beq.n	800320a <TIM_Base_SetConfig+0x8a>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a22      	ldr	r2, [pc, #136]	@ (8003280 <TIM_Base_SetConfig+0x100>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d007      	beq.n	800320a <TIM_Base_SetConfig+0x8a>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a21      	ldr	r2, [pc, #132]	@ (8003284 <TIM_Base_SetConfig+0x104>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d003      	beq.n	800320a <TIM_Base_SetConfig+0x8a>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a20      	ldr	r2, [pc, #128]	@ (8003288 <TIM_Base_SetConfig+0x108>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d108      	bne.n	800321c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003210:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	4313      	orrs	r3, r2
 800321a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	4313      	orrs	r3, r2
 8003228:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	689a      	ldr	r2, [r3, #8]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a0c      	ldr	r2, [pc, #48]	@ (8003270 <TIM_Base_SetConfig+0xf0>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d103      	bne.n	800324a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	691a      	ldr	r2, [r3, #16]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f043 0204 	orr.w	r2, r3, #4
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	601a      	str	r2, [r3, #0]
}
 8003262:	bf00      	nop
 8003264:	3714      	adds	r7, #20
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	40010000 	.word	0x40010000
 8003274:	40000400 	.word	0x40000400
 8003278:	40000800 	.word	0x40000800
 800327c:	40000c00 	.word	0x40000c00
 8003280:	40014000 	.word	0x40014000
 8003284:	40014400 	.word	0x40014400
 8003288:	40014800 	.word	0x40014800

0800328c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e042      	b.n	800334c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d106      	bne.n	80032e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f7fd fd9c 	bl	8000e18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2224      	movs	r2, #36	@ 0x24
 80032e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68da      	ldr	r2, [r3, #12]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80032f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 fdd3 	bl	8003ea4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	691a      	ldr	r2, [r3, #16]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800330c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	695a      	ldr	r2, [r3, #20]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800331c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68da      	ldr	r2, [r3, #12]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800332c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2220      	movs	r2, #32
 8003338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2220      	movs	r2, #32
 8003340:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b08a      	sub	sp, #40	@ 0x28
 8003358:	af02      	add	r7, sp, #8
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	603b      	str	r3, [r7, #0]
 8003360:	4613      	mov	r3, r2
 8003362:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003364:	2300      	movs	r3, #0
 8003366:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b20      	cmp	r3, #32
 8003372:	d175      	bne.n	8003460 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d002      	beq.n	8003380 <HAL_UART_Transmit+0x2c>
 800337a:	88fb      	ldrh	r3, [r7, #6]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d101      	bne.n	8003384 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e06e      	b.n	8003462 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2221      	movs	r2, #33	@ 0x21
 800338e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003392:	f7fe f9e5 	bl	8001760 <HAL_GetTick>
 8003396:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	88fa      	ldrh	r2, [r7, #6]
 800339c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	88fa      	ldrh	r2, [r7, #6]
 80033a2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033ac:	d108      	bne.n	80033c0 <HAL_UART_Transmit+0x6c>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d104      	bne.n	80033c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80033b6:	2300      	movs	r3, #0
 80033b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	61bb      	str	r3, [r7, #24]
 80033be:	e003      	b.n	80033c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033c4:	2300      	movs	r3, #0
 80033c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80033c8:	e02e      	b.n	8003428 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	2200      	movs	r2, #0
 80033d2:	2180      	movs	r1, #128	@ 0x80
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f000 fb37 	bl	8003a48 <UART_WaitOnFlagUntilTimeout>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d005      	beq.n	80033ec <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2220      	movs	r2, #32
 80033e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e03a      	b.n	8003462 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10b      	bne.n	800340a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	881b      	ldrh	r3, [r3, #0]
 80033f6:	461a      	mov	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003400:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	3302      	adds	r3, #2
 8003406:	61bb      	str	r3, [r7, #24]
 8003408:	e007      	b.n	800341a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	781a      	ldrb	r2, [r3, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	3301      	adds	r3, #1
 8003418:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800341e:	b29b      	uxth	r3, r3
 8003420:	3b01      	subs	r3, #1
 8003422:	b29a      	uxth	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800342c:	b29b      	uxth	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1cb      	bne.n	80033ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	2200      	movs	r2, #0
 800343a:	2140      	movs	r1, #64	@ 0x40
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f000 fb03 	bl	8003a48 <UART_WaitOnFlagUntilTimeout>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d005      	beq.n	8003454 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2220      	movs	r2, #32
 800344c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e006      	b.n	8003462 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2220      	movs	r2, #32
 8003458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800345c:	2300      	movs	r3, #0
 800345e:	e000      	b.n	8003462 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003460:	2302      	movs	r3, #2
  }
}
 8003462:	4618      	mov	r0, r3
 8003464:	3720      	adds	r7, #32
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b084      	sub	sp, #16
 800346e:	af00      	add	r7, sp, #0
 8003470:	60f8      	str	r0, [r7, #12]
 8003472:	60b9      	str	r1, [r7, #8]
 8003474:	4613      	mov	r3, r2
 8003476:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b20      	cmp	r3, #32
 8003482:	d112      	bne.n	80034aa <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d002      	beq.n	8003490 <HAL_UART_Receive_IT+0x26>
 800348a:	88fb      	ldrh	r3, [r7, #6]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d101      	bne.n	8003494 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e00b      	b.n	80034ac <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800349a:	88fb      	ldrh	r3, [r7, #6]
 800349c:	461a      	mov	r2, r3
 800349e:	68b9      	ldr	r1, [r7, #8]
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f000 fb2a 	bl	8003afa <UART_Start_Receive_IT>
 80034a6:	4603      	mov	r3, r0
 80034a8:	e000      	b.n	80034ac <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80034aa:	2302      	movs	r3, #2
  }
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3710      	adds	r7, #16
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b0ba      	sub	sp, #232	@ 0xe8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80034da:	2300      	movs	r3, #0
 80034dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80034e0:	2300      	movs	r3, #0
 80034e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80034e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034ea:	f003 030f 	and.w	r3, r3, #15
 80034ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80034f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d10f      	bne.n	800351a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034fe:	f003 0320 	and.w	r3, r3, #32
 8003502:	2b00      	cmp	r3, #0
 8003504:	d009      	beq.n	800351a <HAL_UART_IRQHandler+0x66>
 8003506:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800350a:	f003 0320 	and.w	r3, r3, #32
 800350e:	2b00      	cmp	r3, #0
 8003510:	d003      	beq.n	800351a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 fc07 	bl	8003d26 <UART_Receive_IT>
      return;
 8003518:	e273      	b.n	8003a02 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800351a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800351e:	2b00      	cmp	r3, #0
 8003520:	f000 80de 	beq.w	80036e0 <HAL_UART_IRQHandler+0x22c>
 8003524:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b00      	cmp	r3, #0
 800352e:	d106      	bne.n	800353e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003534:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003538:	2b00      	cmp	r3, #0
 800353a:	f000 80d1 	beq.w	80036e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800353e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00b      	beq.n	8003562 <HAL_UART_IRQHandler+0xae>
 800354a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800354e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003552:	2b00      	cmp	r3, #0
 8003554:	d005      	beq.n	8003562 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800355a:	f043 0201 	orr.w	r2, r3, #1
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003566:	f003 0304 	and.w	r3, r3, #4
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00b      	beq.n	8003586 <HAL_UART_IRQHandler+0xd2>
 800356e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d005      	beq.n	8003586 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800357e:	f043 0202 	orr.w	r2, r3, #2
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00b      	beq.n	80035aa <HAL_UART_IRQHandler+0xf6>
 8003592:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d005      	beq.n	80035aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a2:	f043 0204 	orr.w	r2, r3, #4
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80035aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d011      	beq.n	80035da <HAL_UART_IRQHandler+0x126>
 80035b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035ba:	f003 0320 	and.w	r3, r3, #32
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d105      	bne.n	80035ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80035c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d005      	beq.n	80035da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035d2:	f043 0208 	orr.w	r2, r3, #8
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f000 820a 	beq.w	80039f8 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035e8:	f003 0320 	and.w	r3, r3, #32
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d008      	beq.n	8003602 <HAL_UART_IRQHandler+0x14e>
 80035f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035f4:	f003 0320 	and.w	r3, r3, #32
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d002      	beq.n	8003602 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 fb92 	bl	8003d26 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800360c:	2b40      	cmp	r3, #64	@ 0x40
 800360e:	bf0c      	ite	eq
 8003610:	2301      	moveq	r3, #1
 8003612:	2300      	movne	r3, #0
 8003614:	b2db      	uxtb	r3, r3
 8003616:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800361e:	f003 0308 	and.w	r3, r3, #8
 8003622:	2b00      	cmp	r3, #0
 8003624:	d103      	bne.n	800362e <HAL_UART_IRQHandler+0x17a>
 8003626:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800362a:	2b00      	cmp	r3, #0
 800362c:	d04f      	beq.n	80036ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 fa9d 	bl	8003b6e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800363e:	2b40      	cmp	r3, #64	@ 0x40
 8003640:	d141      	bne.n	80036c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	3314      	adds	r3, #20
 8003648:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800364c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003650:	e853 3f00 	ldrex	r3, [r3]
 8003654:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003658:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800365c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003660:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	3314      	adds	r3, #20
 800366a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800366e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003672:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003676:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800367a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800367e:	e841 2300 	strex	r3, r2, [r1]
 8003682:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003686:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1d9      	bne.n	8003642 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003692:	2b00      	cmp	r3, #0
 8003694:	d013      	beq.n	80036be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800369a:	4a8a      	ldr	r2, [pc, #552]	@ (80038c4 <HAL_UART_IRQHandler+0x410>)
 800369c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7fe f9ba 	bl	8001a1c <HAL_DMA_Abort_IT>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d016      	beq.n	80036dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80036b8:	4610      	mov	r0, r2
 80036ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036bc:	e00e      	b.n	80036dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f9ac 	bl	8003a1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036c4:	e00a      	b.n	80036dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f9a8 	bl	8003a1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036cc:	e006      	b.n	80036dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f9a4 	bl	8003a1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80036da:	e18d      	b.n	80039f8 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036dc:	bf00      	nop
    return;
 80036de:	e18b      	b.n	80039f8 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	f040 8167 	bne.w	80039b8 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80036ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036ee:	f003 0310 	and.w	r3, r3, #16
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f000 8160 	beq.w	80039b8 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80036f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036fc:	f003 0310 	and.w	r3, r3, #16
 8003700:	2b00      	cmp	r3, #0
 8003702:	f000 8159 	beq.w	80039b8 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003706:	2300      	movs	r3, #0
 8003708:	60bb      	str	r3, [r7, #8]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	60bb      	str	r3, [r7, #8]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	60bb      	str	r3, [r7, #8]
 800371a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003726:	2b40      	cmp	r3, #64	@ 0x40
 8003728:	f040 80ce 	bne.w	80038c8 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003738:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800373c:	2b00      	cmp	r3, #0
 800373e:	f000 80a9 	beq.w	8003894 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003746:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800374a:	429a      	cmp	r2, r3
 800374c:	f080 80a2 	bcs.w	8003894 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003756:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003762:	f000 8088 	beq.w	8003876 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	330c      	adds	r3, #12
 800376c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003770:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003774:	e853 3f00 	ldrex	r3, [r3]
 8003778:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800377c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003780:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003784:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	330c      	adds	r3, #12
 800378e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003792:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003796:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800379a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800379e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80037a2:	e841 2300 	strex	r3, r2, [r1]
 80037a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80037aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1d9      	bne.n	8003766 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	3314      	adds	r3, #20
 80037b8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037bc:	e853 3f00 	ldrex	r3, [r3]
 80037c0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80037c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80037c4:	f023 0301 	bic.w	r3, r3, #1
 80037c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	3314      	adds	r3, #20
 80037d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80037d6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80037da:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037dc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80037de:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80037e2:	e841 2300 	strex	r3, r2, [r1]
 80037e6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80037e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1e1      	bne.n	80037b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	3314      	adds	r3, #20
 80037f4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80037f8:	e853 3f00 	ldrex	r3, [r3]
 80037fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80037fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003800:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003804:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	3314      	adds	r3, #20
 800380e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003812:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003814:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003816:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003818:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800381a:	e841 2300 	strex	r3, r2, [r1]
 800381e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003820:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1e3      	bne.n	80037ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2220      	movs	r2, #32
 800382a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	330c      	adds	r3, #12
 800383a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800383e:	e853 3f00 	ldrex	r3, [r3]
 8003842:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003844:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003846:	f023 0310 	bic.w	r3, r3, #16
 800384a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	330c      	adds	r3, #12
 8003854:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003858:	65ba      	str	r2, [r7, #88]	@ 0x58
 800385a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800385e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003860:	e841 2300 	strex	r3, r2, [r1]
 8003864:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003866:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1e3      	bne.n	8003834 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003870:	4618      	mov	r0, r3
 8003872:	f7fe f863 	bl	800193c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2202      	movs	r2, #2
 800387a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003884:	b29b      	uxth	r3, r3
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	b29b      	uxth	r3, r3
 800388a:	4619      	mov	r1, r3
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 f8cf 	bl	8003a30 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003892:	e0b3      	b.n	80039fc <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003898:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800389c:	429a      	cmp	r2, r3
 800389e:	f040 80ad 	bne.w	80039fc <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038a6:	69db      	ldr	r3, [r3, #28]
 80038a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038ac:	f040 80a6 	bne.w	80039fc <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2202      	movs	r2, #2
 80038b4:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80038ba:	4619      	mov	r1, r3
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 f8b7 	bl	8003a30 <HAL_UARTEx_RxEventCallback>
      return;
 80038c2:	e09b      	b.n	80039fc <HAL_UART_IRQHandler+0x548>
 80038c4:	08003c35 	.word	0x08003c35
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038dc:	b29b      	uxth	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f000 808e 	beq.w	8003a00 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80038e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 8089 	beq.w	8003a00 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	330c      	adds	r3, #12
 80038f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038f8:	e853 3f00 	ldrex	r3, [r3]
 80038fc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80038fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003900:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003904:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	330c      	adds	r3, #12
 800390e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003912:	647a      	str	r2, [r7, #68]	@ 0x44
 8003914:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003916:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003918:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800391a:	e841 2300 	strex	r3, r2, [r1]
 800391e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003920:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1e3      	bne.n	80038ee <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	3314      	adds	r3, #20
 800392c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003930:	e853 3f00 	ldrex	r3, [r3]
 8003934:	623b      	str	r3, [r7, #32]
   return(result);
 8003936:	6a3b      	ldr	r3, [r7, #32]
 8003938:	f023 0301 	bic.w	r3, r3, #1
 800393c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	3314      	adds	r3, #20
 8003946:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800394a:	633a      	str	r2, [r7, #48]	@ 0x30
 800394c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003950:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003952:	e841 2300 	strex	r3, r2, [r1]
 8003956:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1e3      	bne.n	8003926 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2220      	movs	r2, #32
 8003962:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	330c      	adds	r3, #12
 8003972:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	e853 3f00 	ldrex	r3, [r3]
 800397a:	60fb      	str	r3, [r7, #12]
   return(result);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f023 0310 	bic.w	r3, r3, #16
 8003982:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	330c      	adds	r3, #12
 800398c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003990:	61fa      	str	r2, [r7, #28]
 8003992:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003994:	69b9      	ldr	r1, [r7, #24]
 8003996:	69fa      	ldr	r2, [r7, #28]
 8003998:	e841 2300 	strex	r3, r2, [r1]
 800399c:	617b      	str	r3, [r7, #20]
   return(result);
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1e3      	bne.n	800396c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2202      	movs	r2, #2
 80039a8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80039ae:	4619      	mov	r1, r3
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 f83d 	bl	8003a30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039b6:	e023      	b.n	8003a00 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80039b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d009      	beq.n	80039d8 <HAL_UART_IRQHandler+0x524>
 80039c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d003      	beq.n	80039d8 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 f940 	bl	8003c56 <UART_Transmit_IT>
    return;
 80039d6:	e014      	b.n	8003a02 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80039d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00e      	beq.n	8003a02 <HAL_UART_IRQHandler+0x54e>
 80039e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d008      	beq.n	8003a02 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 f980 	bl	8003cf6 <UART_EndTransmit_IT>
    return;
 80039f6:	e004      	b.n	8003a02 <HAL_UART_IRQHandler+0x54e>
    return;
 80039f8:	bf00      	nop
 80039fa:	e002      	b.n	8003a02 <HAL_UART_IRQHandler+0x54e>
      return;
 80039fc:	bf00      	nop
 80039fe:	e000      	b.n	8003a02 <HAL_UART_IRQHandler+0x54e>
      return;
 8003a00:	bf00      	nop
  }
}
 8003a02:	37e8      	adds	r7, #232	@ 0xe8
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	460b      	mov	r3, r1
 8003a3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	603b      	str	r3, [r7, #0]
 8003a54:	4613      	mov	r3, r2
 8003a56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a58:	e03b      	b.n	8003ad2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a5a:	6a3b      	ldr	r3, [r7, #32]
 8003a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a60:	d037      	beq.n	8003ad2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a62:	f7fd fe7d 	bl	8001760 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	6a3a      	ldr	r2, [r7, #32]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d302      	bcc.n	8003a78 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a72:	6a3b      	ldr	r3, [r7, #32]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d101      	bne.n	8003a7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e03a      	b.n	8003af2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	f003 0304 	and.w	r3, r3, #4
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d023      	beq.n	8003ad2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	2b80      	cmp	r3, #128	@ 0x80
 8003a8e:	d020      	beq.n	8003ad2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	2b40      	cmp	r3, #64	@ 0x40
 8003a94:	d01d      	beq.n	8003ad2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0308 	and.w	r3, r3, #8
 8003aa0:	2b08      	cmp	r3, #8
 8003aa2:	d116      	bne.n	8003ad2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	617b      	str	r3, [r7, #20]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	617b      	str	r3, [r7, #20]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	617b      	str	r3, [r7, #20]
 8003ab8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f000 f857 	bl	8003b6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2208      	movs	r2, #8
 8003ac4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e00f      	b.n	8003af2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	4013      	ands	r3, r2
 8003adc:	68ba      	ldr	r2, [r7, #8]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	bf0c      	ite	eq
 8003ae2:	2301      	moveq	r3, #1
 8003ae4:	2300      	movne	r3, #0
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	461a      	mov	r2, r3
 8003aea:	79fb      	ldrb	r3, [r7, #7]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d0b4      	beq.n	8003a5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3718      	adds	r7, #24
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b085      	sub	sp, #20
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	60f8      	str	r0, [r7, #12]
 8003b02:	60b9      	str	r1, [r7, #8]
 8003b04:	4613      	mov	r3, r2
 8003b06:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	68ba      	ldr	r2, [r7, #8]
 8003b0c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	88fa      	ldrh	r2, [r7, #6]
 8003b12:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	88fa      	ldrh	r2, [r7, #6]
 8003b18:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2222      	movs	r2, #34	@ 0x22
 8003b24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d007      	beq.n	8003b40 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68da      	ldr	r2, [r3, #12]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b3e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	695a      	ldr	r2, [r3, #20]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f042 0201 	orr.w	r2, r2, #1
 8003b4e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68da      	ldr	r2, [r3, #12]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f042 0220 	orr.w	r2, r2, #32
 8003b5e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3714      	adds	r7, #20
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr

08003b6e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b095      	sub	sp, #84	@ 0x54
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	330c      	adds	r3, #12
 8003b7c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b80:	e853 3f00 	ldrex	r3, [r3]
 8003b84:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	330c      	adds	r3, #12
 8003b94:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b96:	643a      	str	r2, [r7, #64]	@ 0x40
 8003b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b9c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b9e:	e841 2300 	strex	r3, r2, [r1]
 8003ba2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1e5      	bne.n	8003b76 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	3314      	adds	r3, #20
 8003bb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb2:	6a3b      	ldr	r3, [r7, #32]
 8003bb4:	e853 3f00 	ldrex	r3, [r3]
 8003bb8:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	f023 0301 	bic.w	r3, r3, #1
 8003bc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	3314      	adds	r3, #20
 8003bc8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003bca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bd2:	e841 2300 	strex	r3, r2, [r1]
 8003bd6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1e5      	bne.n	8003baa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d119      	bne.n	8003c1a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	330c      	adds	r3, #12
 8003bec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	e853 3f00 	ldrex	r3, [r3]
 8003bf4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	f023 0310 	bic.w	r3, r3, #16
 8003bfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	330c      	adds	r3, #12
 8003c04:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c06:	61ba      	str	r2, [r7, #24]
 8003c08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0a:	6979      	ldr	r1, [r7, #20]
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	e841 2300 	strex	r3, r2, [r1]
 8003c12:	613b      	str	r3, [r7, #16]
   return(result);
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1e5      	bne.n	8003be6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003c28:	bf00      	nop
 8003c2a:	3754      	adds	r7, #84	@ 0x54
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f7ff fee7 	bl	8003a1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c4e:	bf00      	nop
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c56:	b480      	push	{r7}
 8003c58:	b085      	sub	sp, #20
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b21      	cmp	r3, #33	@ 0x21
 8003c68:	d13e      	bne.n	8003ce8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c72:	d114      	bne.n	8003c9e <UART_Transmit_IT+0x48>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d110      	bne.n	8003c9e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	881b      	ldrh	r3, [r3, #0]
 8003c86:	461a      	mov	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c90:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	1c9a      	adds	r2, r3, #2
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	621a      	str	r2, [r3, #32]
 8003c9c:	e008      	b.n	8003cb0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	1c59      	adds	r1, r3, #1
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	6211      	str	r1, [r2, #32]
 8003ca8:	781a      	ldrb	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d10f      	bne.n	8003ce4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68da      	ldr	r2, [r3, #12]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003cd2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68da      	ldr	r2, [r3, #12]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ce2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	e000      	b.n	8003cea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003ce8:	2302      	movs	r3, #2
  }
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3714      	adds	r7, #20
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b082      	sub	sp, #8
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68da      	ldr	r2, [r3, #12]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d0c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2220      	movs	r2, #32
 8003d12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7ff fe76 	bl	8003a08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b08c      	sub	sp, #48	@ 0x30
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8003d32:	2300      	movs	r3, #0
 8003d34:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b22      	cmp	r3, #34	@ 0x22
 8003d40:	f040 80aa 	bne.w	8003e98 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d4c:	d115      	bne.n	8003d7a <UART_Receive_IT+0x54>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d111      	bne.n	8003d7a <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d6c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d72:	1c9a      	adds	r2, r3, #2
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d78:	e024      	b.n	8003dc4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d88:	d007      	beq.n	8003d9a <UART_Receive_IT+0x74>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10a      	bne.n	8003da8 <UART_Receive_IT+0x82>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d106      	bne.n	8003da8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	b2da      	uxtb	r2, r3
 8003da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003da4:	701a      	strb	r2, [r3, #0]
 8003da6:	e008      	b.n	8003dba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003db4:	b2da      	uxtb	r2, r3
 8003db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003db8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dbe:	1c5a      	adds	r2, r3, #1
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d15d      	bne.n	8003e94 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68da      	ldr	r2, [r3, #12]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f022 0220 	bic.w	r2, r2, #32
 8003de6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68da      	ldr	r2, [r3, #12]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003df6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	695a      	ldr	r2, [r3, #20]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 0201 	bic.w	r2, r2, #1
 8003e06:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d135      	bne.n	8003e8a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	330c      	adds	r3, #12
 8003e2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	e853 3f00 	ldrex	r3, [r3]
 8003e32:	613b      	str	r3, [r7, #16]
   return(result);
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	f023 0310 	bic.w	r3, r3, #16
 8003e3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	330c      	adds	r3, #12
 8003e42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e44:	623a      	str	r2, [r7, #32]
 8003e46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e48:	69f9      	ldr	r1, [r7, #28]
 8003e4a:	6a3a      	ldr	r2, [r7, #32]
 8003e4c:	e841 2300 	strex	r3, r2, [r1]
 8003e50:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1e5      	bne.n	8003e24 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0310 	and.w	r3, r3, #16
 8003e62:	2b10      	cmp	r3, #16
 8003e64:	d10a      	bne.n	8003e7c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e66:	2300      	movs	r3, #0
 8003e68:	60fb      	str	r3, [r7, #12]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	60fb      	str	r3, [r7, #12]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	60fb      	str	r3, [r7, #12]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e80:	4619      	mov	r1, r3
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7ff fdd4 	bl	8003a30 <HAL_UARTEx_RxEventCallback>
 8003e88:	e002      	b.n	8003e90 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7fc fda2 	bl	80009d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003e90:	2300      	movs	r3, #0
 8003e92:	e002      	b.n	8003e9a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003e94:	2300      	movs	r3, #0
 8003e96:	e000      	b.n	8003e9a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003e98:	2302      	movs	r3, #2
  }
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3730      	adds	r7, #48	@ 0x30
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
	...

08003ea4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ea4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ea8:	b0c0      	sub	sp, #256	@ 0x100
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ec0:	68d9      	ldr	r1, [r3, #12]
 8003ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	ea40 0301 	orr.w	r3, r0, r1
 8003ecc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ed2:	689a      	ldr	r2, [r3, #8]
 8003ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	431a      	orrs	r2, r3
 8003edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003efc:	f021 010c 	bic.w	r1, r1, #12
 8003f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003f0a:	430b      	orrs	r3, r1
 8003f0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f1e:	6999      	ldr	r1, [r3, #24]
 8003f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	ea40 0301 	orr.w	r3, r0, r1
 8003f2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	4b8f      	ldr	r3, [pc, #572]	@ (8004170 <UART_SetConfig+0x2cc>)
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d005      	beq.n	8003f44 <UART_SetConfig+0xa0>
 8003f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	4b8d      	ldr	r3, [pc, #564]	@ (8004174 <UART_SetConfig+0x2d0>)
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d104      	bne.n	8003f4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f44:	f7fe fbae 	bl	80026a4 <HAL_RCC_GetPCLK2Freq>
 8003f48:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003f4c:	e003      	b.n	8003f56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f4e:	f7fe fb95 	bl	800267c <HAL_RCC_GetPCLK1Freq>
 8003f52:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f5a:	69db      	ldr	r3, [r3, #28]
 8003f5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f60:	f040 810c 	bne.w	800417c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003f6e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003f72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003f76:	4622      	mov	r2, r4
 8003f78:	462b      	mov	r3, r5
 8003f7a:	1891      	adds	r1, r2, r2
 8003f7c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003f7e:	415b      	adcs	r3, r3
 8003f80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003f86:	4621      	mov	r1, r4
 8003f88:	eb12 0801 	adds.w	r8, r2, r1
 8003f8c:	4629      	mov	r1, r5
 8003f8e:	eb43 0901 	adc.w	r9, r3, r1
 8003f92:	f04f 0200 	mov.w	r2, #0
 8003f96:	f04f 0300 	mov.w	r3, #0
 8003f9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fa2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fa6:	4690      	mov	r8, r2
 8003fa8:	4699      	mov	r9, r3
 8003faa:	4623      	mov	r3, r4
 8003fac:	eb18 0303 	adds.w	r3, r8, r3
 8003fb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003fb4:	462b      	mov	r3, r5
 8003fb6:	eb49 0303 	adc.w	r3, r9, r3
 8003fba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003fca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003fce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	18db      	adds	r3, r3, r3
 8003fd6:	653b      	str	r3, [r7, #80]	@ 0x50
 8003fd8:	4613      	mov	r3, r2
 8003fda:	eb42 0303 	adc.w	r3, r2, r3
 8003fde:	657b      	str	r3, [r7, #84]	@ 0x54
 8003fe0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003fe4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003fe8:	f7fc f952 	bl	8000290 <__aeabi_uldivmod>
 8003fec:	4602      	mov	r2, r0
 8003fee:	460b      	mov	r3, r1
 8003ff0:	4b61      	ldr	r3, [pc, #388]	@ (8004178 <UART_SetConfig+0x2d4>)
 8003ff2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ff6:	095b      	lsrs	r3, r3, #5
 8003ff8:	011c      	lsls	r4, r3, #4
 8003ffa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ffe:	2200      	movs	r2, #0
 8004000:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004004:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004008:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800400c:	4642      	mov	r2, r8
 800400e:	464b      	mov	r3, r9
 8004010:	1891      	adds	r1, r2, r2
 8004012:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004014:	415b      	adcs	r3, r3
 8004016:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004018:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800401c:	4641      	mov	r1, r8
 800401e:	eb12 0a01 	adds.w	sl, r2, r1
 8004022:	4649      	mov	r1, r9
 8004024:	eb43 0b01 	adc.w	fp, r3, r1
 8004028:	f04f 0200 	mov.w	r2, #0
 800402c:	f04f 0300 	mov.w	r3, #0
 8004030:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004034:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004038:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800403c:	4692      	mov	sl, r2
 800403e:	469b      	mov	fp, r3
 8004040:	4643      	mov	r3, r8
 8004042:	eb1a 0303 	adds.w	r3, sl, r3
 8004046:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800404a:	464b      	mov	r3, r9
 800404c:	eb4b 0303 	adc.w	r3, fp, r3
 8004050:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004060:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004064:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004068:	460b      	mov	r3, r1
 800406a:	18db      	adds	r3, r3, r3
 800406c:	643b      	str	r3, [r7, #64]	@ 0x40
 800406e:	4613      	mov	r3, r2
 8004070:	eb42 0303 	adc.w	r3, r2, r3
 8004074:	647b      	str	r3, [r7, #68]	@ 0x44
 8004076:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800407a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800407e:	f7fc f907 	bl	8000290 <__aeabi_uldivmod>
 8004082:	4602      	mov	r2, r0
 8004084:	460b      	mov	r3, r1
 8004086:	4611      	mov	r1, r2
 8004088:	4b3b      	ldr	r3, [pc, #236]	@ (8004178 <UART_SetConfig+0x2d4>)
 800408a:	fba3 2301 	umull	r2, r3, r3, r1
 800408e:	095b      	lsrs	r3, r3, #5
 8004090:	2264      	movs	r2, #100	@ 0x64
 8004092:	fb02 f303 	mul.w	r3, r2, r3
 8004096:	1acb      	subs	r3, r1, r3
 8004098:	00db      	lsls	r3, r3, #3
 800409a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800409e:	4b36      	ldr	r3, [pc, #216]	@ (8004178 <UART_SetConfig+0x2d4>)
 80040a0:	fba3 2302 	umull	r2, r3, r3, r2
 80040a4:	095b      	lsrs	r3, r3, #5
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80040ac:	441c      	add	r4, r3
 80040ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040b2:	2200      	movs	r2, #0
 80040b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80040b8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80040bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80040c0:	4642      	mov	r2, r8
 80040c2:	464b      	mov	r3, r9
 80040c4:	1891      	adds	r1, r2, r2
 80040c6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80040c8:	415b      	adcs	r3, r3
 80040ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80040d0:	4641      	mov	r1, r8
 80040d2:	1851      	adds	r1, r2, r1
 80040d4:	6339      	str	r1, [r7, #48]	@ 0x30
 80040d6:	4649      	mov	r1, r9
 80040d8:	414b      	adcs	r3, r1
 80040da:	637b      	str	r3, [r7, #52]	@ 0x34
 80040dc:	f04f 0200 	mov.w	r2, #0
 80040e0:	f04f 0300 	mov.w	r3, #0
 80040e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80040e8:	4659      	mov	r1, fp
 80040ea:	00cb      	lsls	r3, r1, #3
 80040ec:	4651      	mov	r1, sl
 80040ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040f2:	4651      	mov	r1, sl
 80040f4:	00ca      	lsls	r2, r1, #3
 80040f6:	4610      	mov	r0, r2
 80040f8:	4619      	mov	r1, r3
 80040fa:	4603      	mov	r3, r0
 80040fc:	4642      	mov	r2, r8
 80040fe:	189b      	adds	r3, r3, r2
 8004100:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004104:	464b      	mov	r3, r9
 8004106:	460a      	mov	r2, r1
 8004108:	eb42 0303 	adc.w	r3, r2, r3
 800410c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800411c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004120:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004124:	460b      	mov	r3, r1
 8004126:	18db      	adds	r3, r3, r3
 8004128:	62bb      	str	r3, [r7, #40]	@ 0x28
 800412a:	4613      	mov	r3, r2
 800412c:	eb42 0303 	adc.w	r3, r2, r3
 8004130:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004132:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004136:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800413a:	f7fc f8a9 	bl	8000290 <__aeabi_uldivmod>
 800413e:	4602      	mov	r2, r0
 8004140:	460b      	mov	r3, r1
 8004142:	4b0d      	ldr	r3, [pc, #52]	@ (8004178 <UART_SetConfig+0x2d4>)
 8004144:	fba3 1302 	umull	r1, r3, r3, r2
 8004148:	095b      	lsrs	r3, r3, #5
 800414a:	2164      	movs	r1, #100	@ 0x64
 800414c:	fb01 f303 	mul.w	r3, r1, r3
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	3332      	adds	r3, #50	@ 0x32
 8004156:	4a08      	ldr	r2, [pc, #32]	@ (8004178 <UART_SetConfig+0x2d4>)
 8004158:	fba2 2303 	umull	r2, r3, r2, r3
 800415c:	095b      	lsrs	r3, r3, #5
 800415e:	f003 0207 	and.w	r2, r3, #7
 8004162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4422      	add	r2, r4
 800416a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800416c:	e106      	b.n	800437c <UART_SetConfig+0x4d8>
 800416e:	bf00      	nop
 8004170:	40011000 	.word	0x40011000
 8004174:	40011400 	.word	0x40011400
 8004178:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800417c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004180:	2200      	movs	r2, #0
 8004182:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004186:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800418a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800418e:	4642      	mov	r2, r8
 8004190:	464b      	mov	r3, r9
 8004192:	1891      	adds	r1, r2, r2
 8004194:	6239      	str	r1, [r7, #32]
 8004196:	415b      	adcs	r3, r3
 8004198:	627b      	str	r3, [r7, #36]	@ 0x24
 800419a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800419e:	4641      	mov	r1, r8
 80041a0:	1854      	adds	r4, r2, r1
 80041a2:	4649      	mov	r1, r9
 80041a4:	eb43 0501 	adc.w	r5, r3, r1
 80041a8:	f04f 0200 	mov.w	r2, #0
 80041ac:	f04f 0300 	mov.w	r3, #0
 80041b0:	00eb      	lsls	r3, r5, #3
 80041b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041b6:	00e2      	lsls	r2, r4, #3
 80041b8:	4614      	mov	r4, r2
 80041ba:	461d      	mov	r5, r3
 80041bc:	4643      	mov	r3, r8
 80041be:	18e3      	adds	r3, r4, r3
 80041c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80041c4:	464b      	mov	r3, r9
 80041c6:	eb45 0303 	adc.w	r3, r5, r3
 80041ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80041ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80041da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80041de:	f04f 0200 	mov.w	r2, #0
 80041e2:	f04f 0300 	mov.w	r3, #0
 80041e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80041ea:	4629      	mov	r1, r5
 80041ec:	008b      	lsls	r3, r1, #2
 80041ee:	4621      	mov	r1, r4
 80041f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041f4:	4621      	mov	r1, r4
 80041f6:	008a      	lsls	r2, r1, #2
 80041f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80041fc:	f7fc f848 	bl	8000290 <__aeabi_uldivmod>
 8004200:	4602      	mov	r2, r0
 8004202:	460b      	mov	r3, r1
 8004204:	4b60      	ldr	r3, [pc, #384]	@ (8004388 <UART_SetConfig+0x4e4>)
 8004206:	fba3 2302 	umull	r2, r3, r3, r2
 800420a:	095b      	lsrs	r3, r3, #5
 800420c:	011c      	lsls	r4, r3, #4
 800420e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004212:	2200      	movs	r2, #0
 8004214:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004218:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800421c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004220:	4642      	mov	r2, r8
 8004222:	464b      	mov	r3, r9
 8004224:	1891      	adds	r1, r2, r2
 8004226:	61b9      	str	r1, [r7, #24]
 8004228:	415b      	adcs	r3, r3
 800422a:	61fb      	str	r3, [r7, #28]
 800422c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004230:	4641      	mov	r1, r8
 8004232:	1851      	adds	r1, r2, r1
 8004234:	6139      	str	r1, [r7, #16]
 8004236:	4649      	mov	r1, r9
 8004238:	414b      	adcs	r3, r1
 800423a:	617b      	str	r3, [r7, #20]
 800423c:	f04f 0200 	mov.w	r2, #0
 8004240:	f04f 0300 	mov.w	r3, #0
 8004244:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004248:	4659      	mov	r1, fp
 800424a:	00cb      	lsls	r3, r1, #3
 800424c:	4651      	mov	r1, sl
 800424e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004252:	4651      	mov	r1, sl
 8004254:	00ca      	lsls	r2, r1, #3
 8004256:	4610      	mov	r0, r2
 8004258:	4619      	mov	r1, r3
 800425a:	4603      	mov	r3, r0
 800425c:	4642      	mov	r2, r8
 800425e:	189b      	adds	r3, r3, r2
 8004260:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004264:	464b      	mov	r3, r9
 8004266:	460a      	mov	r2, r1
 8004268:	eb42 0303 	adc.w	r3, r2, r3
 800426c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	67bb      	str	r3, [r7, #120]	@ 0x78
 800427a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800427c:	f04f 0200 	mov.w	r2, #0
 8004280:	f04f 0300 	mov.w	r3, #0
 8004284:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004288:	4649      	mov	r1, r9
 800428a:	008b      	lsls	r3, r1, #2
 800428c:	4641      	mov	r1, r8
 800428e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004292:	4641      	mov	r1, r8
 8004294:	008a      	lsls	r2, r1, #2
 8004296:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800429a:	f7fb fff9 	bl	8000290 <__aeabi_uldivmod>
 800429e:	4602      	mov	r2, r0
 80042a0:	460b      	mov	r3, r1
 80042a2:	4611      	mov	r1, r2
 80042a4:	4b38      	ldr	r3, [pc, #224]	@ (8004388 <UART_SetConfig+0x4e4>)
 80042a6:	fba3 2301 	umull	r2, r3, r3, r1
 80042aa:	095b      	lsrs	r3, r3, #5
 80042ac:	2264      	movs	r2, #100	@ 0x64
 80042ae:	fb02 f303 	mul.w	r3, r2, r3
 80042b2:	1acb      	subs	r3, r1, r3
 80042b4:	011b      	lsls	r3, r3, #4
 80042b6:	3332      	adds	r3, #50	@ 0x32
 80042b8:	4a33      	ldr	r2, [pc, #204]	@ (8004388 <UART_SetConfig+0x4e4>)
 80042ba:	fba2 2303 	umull	r2, r3, r2, r3
 80042be:	095b      	lsrs	r3, r3, #5
 80042c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042c4:	441c      	add	r4, r3
 80042c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042ca:	2200      	movs	r2, #0
 80042cc:	673b      	str	r3, [r7, #112]	@ 0x70
 80042ce:	677a      	str	r2, [r7, #116]	@ 0x74
 80042d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80042d4:	4642      	mov	r2, r8
 80042d6:	464b      	mov	r3, r9
 80042d8:	1891      	adds	r1, r2, r2
 80042da:	60b9      	str	r1, [r7, #8]
 80042dc:	415b      	adcs	r3, r3
 80042de:	60fb      	str	r3, [r7, #12]
 80042e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042e4:	4641      	mov	r1, r8
 80042e6:	1851      	adds	r1, r2, r1
 80042e8:	6039      	str	r1, [r7, #0]
 80042ea:	4649      	mov	r1, r9
 80042ec:	414b      	adcs	r3, r1
 80042ee:	607b      	str	r3, [r7, #4]
 80042f0:	f04f 0200 	mov.w	r2, #0
 80042f4:	f04f 0300 	mov.w	r3, #0
 80042f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80042fc:	4659      	mov	r1, fp
 80042fe:	00cb      	lsls	r3, r1, #3
 8004300:	4651      	mov	r1, sl
 8004302:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004306:	4651      	mov	r1, sl
 8004308:	00ca      	lsls	r2, r1, #3
 800430a:	4610      	mov	r0, r2
 800430c:	4619      	mov	r1, r3
 800430e:	4603      	mov	r3, r0
 8004310:	4642      	mov	r2, r8
 8004312:	189b      	adds	r3, r3, r2
 8004314:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004316:	464b      	mov	r3, r9
 8004318:	460a      	mov	r2, r1
 800431a:	eb42 0303 	adc.w	r3, r2, r3
 800431e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	663b      	str	r3, [r7, #96]	@ 0x60
 800432a:	667a      	str	r2, [r7, #100]	@ 0x64
 800432c:	f04f 0200 	mov.w	r2, #0
 8004330:	f04f 0300 	mov.w	r3, #0
 8004334:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004338:	4649      	mov	r1, r9
 800433a:	008b      	lsls	r3, r1, #2
 800433c:	4641      	mov	r1, r8
 800433e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004342:	4641      	mov	r1, r8
 8004344:	008a      	lsls	r2, r1, #2
 8004346:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800434a:	f7fb ffa1 	bl	8000290 <__aeabi_uldivmod>
 800434e:	4602      	mov	r2, r0
 8004350:	460b      	mov	r3, r1
 8004352:	4b0d      	ldr	r3, [pc, #52]	@ (8004388 <UART_SetConfig+0x4e4>)
 8004354:	fba3 1302 	umull	r1, r3, r3, r2
 8004358:	095b      	lsrs	r3, r3, #5
 800435a:	2164      	movs	r1, #100	@ 0x64
 800435c:	fb01 f303 	mul.w	r3, r1, r3
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	011b      	lsls	r3, r3, #4
 8004364:	3332      	adds	r3, #50	@ 0x32
 8004366:	4a08      	ldr	r2, [pc, #32]	@ (8004388 <UART_SetConfig+0x4e4>)
 8004368:	fba2 2303 	umull	r2, r3, r2, r3
 800436c:	095b      	lsrs	r3, r3, #5
 800436e:	f003 020f 	and.w	r2, r3, #15
 8004372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4422      	add	r2, r4
 800437a:	609a      	str	r2, [r3, #8]
}
 800437c:	bf00      	nop
 800437e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004382:	46bd      	mov	sp, r7
 8004384:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004388:	51eb851f 	.word	0x51eb851f

0800438c <__NVIC_SetPriority>:
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	4603      	mov	r3, r0
 8004394:	6039      	str	r1, [r7, #0]
 8004396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800439c:	2b00      	cmp	r3, #0
 800439e:	db0a      	blt.n	80043b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	b2da      	uxtb	r2, r3
 80043a4:	490c      	ldr	r1, [pc, #48]	@ (80043d8 <__NVIC_SetPriority+0x4c>)
 80043a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043aa:	0112      	lsls	r2, r2, #4
 80043ac:	b2d2      	uxtb	r2, r2
 80043ae:	440b      	add	r3, r1
 80043b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80043b4:	e00a      	b.n	80043cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	b2da      	uxtb	r2, r3
 80043ba:	4908      	ldr	r1, [pc, #32]	@ (80043dc <__NVIC_SetPriority+0x50>)
 80043bc:	79fb      	ldrb	r3, [r7, #7]
 80043be:	f003 030f 	and.w	r3, r3, #15
 80043c2:	3b04      	subs	r3, #4
 80043c4:	0112      	lsls	r2, r2, #4
 80043c6:	b2d2      	uxtb	r2, r2
 80043c8:	440b      	add	r3, r1
 80043ca:	761a      	strb	r2, [r3, #24]
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr
 80043d8:	e000e100 	.word	0xe000e100
 80043dc:	e000ed00 	.word	0xe000ed00

080043e0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80043e4:	4b05      	ldr	r3, [pc, #20]	@ (80043fc <SysTick_Handler+0x1c>)
 80043e6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80043e8:	f001 fe2c 	bl	8006044 <xTaskGetSchedulerState>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d001      	beq.n	80043f6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80043f2:	f002 fe29 	bl	8007048 <xPortSysTickHandler>
  }
}
 80043f6:	bf00      	nop
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	e000e010 	.word	0xe000e010

08004400 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004404:	2100      	movs	r1, #0
 8004406:	f06f 0004 	mvn.w	r0, #4
 800440a:	f7ff ffbf 	bl	800438c <__NVIC_SetPriority>
#endif
}
 800440e:	bf00      	nop
 8004410:	bd80      	pop	{r7, pc}
	...

08004414 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800441a:	f3ef 8305 	mrs	r3, IPSR
 800441e:	603b      	str	r3, [r7, #0]
  return(result);
 8004420:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004426:	f06f 0305 	mvn.w	r3, #5
 800442a:	607b      	str	r3, [r7, #4]
 800442c:	e00c      	b.n	8004448 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800442e:	4b0a      	ldr	r3, [pc, #40]	@ (8004458 <osKernelInitialize+0x44>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d105      	bne.n	8004442 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004436:	4b08      	ldr	r3, [pc, #32]	@ (8004458 <osKernelInitialize+0x44>)
 8004438:	2201      	movs	r2, #1
 800443a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800443c:	2300      	movs	r3, #0
 800443e:	607b      	str	r3, [r7, #4]
 8004440:	e002      	b.n	8004448 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004442:	f04f 33ff 	mov.w	r3, #4294967295
 8004446:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004448:	687b      	ldr	r3, [r7, #4]
}
 800444a:	4618      	mov	r0, r3
 800444c:	370c      	adds	r7, #12
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	200001c8 	.word	0x200001c8

0800445c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004462:	f3ef 8305 	mrs	r3, IPSR
 8004466:	603b      	str	r3, [r7, #0]
  return(result);
 8004468:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <osKernelStart+0x1a>
    stat = osErrorISR;
 800446e:	f06f 0305 	mvn.w	r3, #5
 8004472:	607b      	str	r3, [r7, #4]
 8004474:	e010      	b.n	8004498 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004476:	4b0b      	ldr	r3, [pc, #44]	@ (80044a4 <osKernelStart+0x48>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d109      	bne.n	8004492 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800447e:	f7ff ffbf 	bl	8004400 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004482:	4b08      	ldr	r3, [pc, #32]	@ (80044a4 <osKernelStart+0x48>)
 8004484:	2202      	movs	r2, #2
 8004486:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004488:	f001 f978 	bl	800577c <vTaskStartScheduler>
      stat = osOK;
 800448c:	2300      	movs	r3, #0
 800448e:	607b      	str	r3, [r7, #4]
 8004490:	e002      	b.n	8004498 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004492:	f04f 33ff 	mov.w	r3, #4294967295
 8004496:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004498:	687b      	ldr	r3, [r7, #4]
}
 800449a:	4618      	mov	r0, r3
 800449c:	3708      	adds	r7, #8
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	200001c8 	.word	0x200001c8

080044a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b08e      	sub	sp, #56	@ 0x38
 80044ac:	af04      	add	r7, sp, #16
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80044b4:	2300      	movs	r3, #0
 80044b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044b8:	f3ef 8305 	mrs	r3, IPSR
 80044bc:	617b      	str	r3, [r7, #20]
  return(result);
 80044be:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d17e      	bne.n	80045c2 <osThreadNew+0x11a>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d07b      	beq.n	80045c2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80044ca:	2380      	movs	r3, #128	@ 0x80
 80044cc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80044ce:	2318      	movs	r3, #24
 80044d0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80044d2:	2300      	movs	r3, #0
 80044d4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80044d6:	f04f 33ff 	mov.w	r3, #4294967295
 80044da:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d045      	beq.n	800456e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d002      	beq.n	80044f0 <osThreadNew+0x48>
        name = attr->name;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d002      	beq.n	80044fe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d008      	beq.n	8004516 <osThreadNew+0x6e>
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	2b38      	cmp	r3, #56	@ 0x38
 8004508:	d805      	bhi.n	8004516 <osThreadNew+0x6e>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b00      	cmp	r3, #0
 8004514:	d001      	beq.n	800451a <osThreadNew+0x72>
        return (NULL);
 8004516:	2300      	movs	r3, #0
 8004518:	e054      	b.n	80045c4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d003      	beq.n	800452a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	089b      	lsrs	r3, r3, #2
 8004528:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00e      	beq.n	8004550 <osThreadNew+0xa8>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	2ba7      	cmp	r3, #167	@ 0xa7
 8004538:	d90a      	bls.n	8004550 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800453e:	2b00      	cmp	r3, #0
 8004540:	d006      	beq.n	8004550 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d002      	beq.n	8004550 <osThreadNew+0xa8>
        mem = 1;
 800454a:	2301      	movs	r3, #1
 800454c:	61bb      	str	r3, [r7, #24]
 800454e:	e010      	b.n	8004572 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d10c      	bne.n	8004572 <osThreadNew+0xca>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d108      	bne.n	8004572 <osThreadNew+0xca>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d104      	bne.n	8004572 <osThreadNew+0xca>
          mem = 0;
 8004568:	2300      	movs	r3, #0
 800456a:	61bb      	str	r3, [r7, #24]
 800456c:	e001      	b.n	8004572 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800456e:	2300      	movs	r3, #0
 8004570:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d110      	bne.n	800459a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004580:	9202      	str	r2, [sp, #8]
 8004582:	9301      	str	r3, [sp, #4]
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	9300      	str	r3, [sp, #0]
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	6a3a      	ldr	r2, [r7, #32]
 800458c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f000 ff00 	bl	8005394 <xTaskCreateStatic>
 8004594:	4603      	mov	r3, r0
 8004596:	613b      	str	r3, [r7, #16]
 8004598:	e013      	b.n	80045c2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d110      	bne.n	80045c2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80045a0:	6a3b      	ldr	r3, [r7, #32]
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	f107 0310 	add.w	r3, r7, #16
 80045a8:	9301      	str	r3, [sp, #4]
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	9300      	str	r3, [sp, #0]
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f000 ff4e 	bl	8005454 <xTaskCreate>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d001      	beq.n	80045c2 <osThreadNew+0x11a>
            hTask = NULL;
 80045be:	2300      	movs	r3, #0
 80045c0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80045c2:	693b      	ldr	r3, [r7, #16]
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3728      	adds	r7, #40	@ 0x28
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045d4:	f3ef 8305 	mrs	r3, IPSR
 80045d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80045da:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d003      	beq.n	80045e8 <osDelay+0x1c>
    stat = osErrorISR;
 80045e0:	f06f 0305 	mvn.w	r3, #5
 80045e4:	60fb      	str	r3, [r7, #12]
 80045e6:	e007      	b.n	80045f8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80045e8:	2300      	movs	r3, #0
 80045ea:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d002      	beq.n	80045f8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f001 f88c 	bl	8005710 <vTaskDelay>
    }
  }

  return (stat);
 80045f8:	68fb      	ldr	r3, [r7, #12]
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
	...

08004604 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	4a07      	ldr	r2, [pc, #28]	@ (8004630 <vApplicationGetIdleTaskMemory+0x2c>)
 8004614:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	4a06      	ldr	r2, [pc, #24]	@ (8004634 <vApplicationGetIdleTaskMemory+0x30>)
 800461a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2280      	movs	r2, #128	@ 0x80
 8004620:	601a      	str	r2, [r3, #0]
}
 8004622:	bf00      	nop
 8004624:	3714      	adds	r7, #20
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	200001cc 	.word	0x200001cc
 8004634:	20000274 	.word	0x20000274

08004638 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	4a07      	ldr	r2, [pc, #28]	@ (8004664 <vApplicationGetTimerTaskMemory+0x2c>)
 8004648:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	4a06      	ldr	r2, [pc, #24]	@ (8004668 <vApplicationGetTimerTaskMemory+0x30>)
 800464e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004656:	601a      	str	r2, [r3, #0]
}
 8004658:	bf00      	nop
 800465a:	3714      	adds	r7, #20
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr
 8004664:	20000474 	.word	0x20000474
 8004668:	2000051c 	.word	0x2000051c

0800466c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f103 0208 	add.w	r2, r3, #8
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f04f 32ff 	mov.w	r2, #4294967295
 8004684:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f103 0208 	add.w	r2, r3, #8
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f103 0208 	add.w	r2, r3, #8
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80046ba:	bf00      	nop
 80046bc:	370c      	adds	r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr

080046c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80046c6:	b480      	push	{r7}
 80046c8:	b085      	sub	sp, #20
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
 80046ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	689a      	ldr	r2, [r3, #8]
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	1c5a      	adds	r2, r3, #1
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	601a      	str	r2, [r3, #0]
}
 8004702:	bf00      	nop
 8004704:	3714      	adds	r7, #20
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr

0800470e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800470e:	b480      	push	{r7}
 8004710:	b085      	sub	sp, #20
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
 8004716:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004724:	d103      	bne.n	800472e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	60fb      	str	r3, [r7, #12]
 800472c:	e00c      	b.n	8004748 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	3308      	adds	r3, #8
 8004732:	60fb      	str	r3, [r7, #12]
 8004734:	e002      	b.n	800473c <vListInsert+0x2e>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	60fb      	str	r3, [r7, #12]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	429a      	cmp	r2, r3
 8004746:	d2f6      	bcs.n	8004736 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	683a      	ldr	r2, [r7, #0]
 8004756:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	683a      	ldr	r2, [r7, #0]
 8004762:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	1c5a      	adds	r2, r3, #1
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	601a      	str	r2, [r3, #0]
}
 8004774:	bf00      	nop
 8004776:	3714      	adds	r7, #20
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	6892      	ldr	r2, [r2, #8]
 8004796:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	6852      	ldr	r2, [r2, #4]
 80047a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d103      	bne.n	80047b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	689a      	ldr	r2, [r3, #8]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	1e5a      	subs	r2, r3, #1
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3714      	adds	r7, #20
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d10b      	bne.n	8004800 <xQueueGenericReset+0x2c>
	__asm volatile
 80047e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ec:	f383 8811 	msr	BASEPRI, r3
 80047f0:	f3bf 8f6f 	isb	sy
 80047f4:	f3bf 8f4f 	dsb	sy
 80047f8:	60bb      	str	r3, [r7, #8]
}
 80047fa:	bf00      	nop
 80047fc:	bf00      	nop
 80047fe:	e7fd      	b.n	80047fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004800:	f002 fb92 	bl	8006f28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800480c:	68f9      	ldr	r1, [r7, #12]
 800480e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004810:	fb01 f303 	mul.w	r3, r1, r3
 8004814:	441a      	add	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004830:	3b01      	subs	r3, #1
 8004832:	68f9      	ldr	r1, [r7, #12]
 8004834:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004836:	fb01 f303 	mul.w	r3, r1, r3
 800483a:	441a      	add	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	22ff      	movs	r2, #255	@ 0xff
 8004844:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	22ff      	movs	r2, #255	@ 0xff
 800484c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d114      	bne.n	8004880 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d01a      	beq.n	8004894 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	3310      	adds	r3, #16
 8004862:	4618      	mov	r0, r3
 8004864:	f001 fa28 	bl	8005cb8 <xTaskRemoveFromEventList>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d012      	beq.n	8004894 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800486e:	4b0d      	ldr	r3, [pc, #52]	@ (80048a4 <xQueueGenericReset+0xd0>)
 8004870:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004874:	601a      	str	r2, [r3, #0]
 8004876:	f3bf 8f4f 	dsb	sy
 800487a:	f3bf 8f6f 	isb	sy
 800487e:	e009      	b.n	8004894 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	3310      	adds	r3, #16
 8004884:	4618      	mov	r0, r3
 8004886:	f7ff fef1 	bl	800466c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	3324      	adds	r3, #36	@ 0x24
 800488e:	4618      	mov	r0, r3
 8004890:	f7ff feec 	bl	800466c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004894:	f002 fb7a 	bl	8006f8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004898:	2301      	movs	r3, #1
}
 800489a:	4618      	mov	r0, r3
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	e000ed04 	.word	0xe000ed04

080048a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b08e      	sub	sp, #56	@ 0x38
 80048ac:	af02      	add	r7, sp, #8
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
 80048b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d10b      	bne.n	80048d4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80048bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048c0:	f383 8811 	msr	BASEPRI, r3
 80048c4:	f3bf 8f6f 	isb	sy
 80048c8:	f3bf 8f4f 	dsb	sy
 80048cc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80048ce:	bf00      	nop
 80048d0:	bf00      	nop
 80048d2:	e7fd      	b.n	80048d0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10b      	bne.n	80048f2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80048da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048de:	f383 8811 	msr	BASEPRI, r3
 80048e2:	f3bf 8f6f 	isb	sy
 80048e6:	f3bf 8f4f 	dsb	sy
 80048ea:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80048ec:	bf00      	nop
 80048ee:	bf00      	nop
 80048f0:	e7fd      	b.n	80048ee <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d002      	beq.n	80048fe <xQueueGenericCreateStatic+0x56>
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d001      	beq.n	8004902 <xQueueGenericCreateStatic+0x5a>
 80048fe:	2301      	movs	r3, #1
 8004900:	e000      	b.n	8004904 <xQueueGenericCreateStatic+0x5c>
 8004902:	2300      	movs	r3, #0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d10b      	bne.n	8004920 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800490c:	f383 8811 	msr	BASEPRI, r3
 8004910:	f3bf 8f6f 	isb	sy
 8004914:	f3bf 8f4f 	dsb	sy
 8004918:	623b      	str	r3, [r7, #32]
}
 800491a:	bf00      	nop
 800491c:	bf00      	nop
 800491e:	e7fd      	b.n	800491c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d102      	bne.n	800492c <xQueueGenericCreateStatic+0x84>
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d101      	bne.n	8004930 <xQueueGenericCreateStatic+0x88>
 800492c:	2301      	movs	r3, #1
 800492e:	e000      	b.n	8004932 <xQueueGenericCreateStatic+0x8a>
 8004930:	2300      	movs	r3, #0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10b      	bne.n	800494e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800493a:	f383 8811 	msr	BASEPRI, r3
 800493e:	f3bf 8f6f 	isb	sy
 8004942:	f3bf 8f4f 	dsb	sy
 8004946:	61fb      	str	r3, [r7, #28]
}
 8004948:	bf00      	nop
 800494a:	bf00      	nop
 800494c:	e7fd      	b.n	800494a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800494e:	2350      	movs	r3, #80	@ 0x50
 8004950:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	2b50      	cmp	r3, #80	@ 0x50
 8004956:	d00b      	beq.n	8004970 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800495c:	f383 8811 	msr	BASEPRI, r3
 8004960:	f3bf 8f6f 	isb	sy
 8004964:	f3bf 8f4f 	dsb	sy
 8004968:	61bb      	str	r3, [r7, #24]
}
 800496a:	bf00      	nop
 800496c:	bf00      	nop
 800496e:	e7fd      	b.n	800496c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004970:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00d      	beq.n	8004998 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800497c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004984:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800498a:	9300      	str	r3, [sp, #0]
 800498c:	4613      	mov	r3, r2
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	68b9      	ldr	r1, [r7, #8]
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f000 f840 	bl	8004a18 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800499a:	4618      	mov	r0, r3
 800499c:	3730      	adds	r7, #48	@ 0x30
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b08a      	sub	sp, #40	@ 0x28
 80049a6:	af02      	add	r7, sp, #8
 80049a8:	60f8      	str	r0, [r7, #12]
 80049aa:	60b9      	str	r1, [r7, #8]
 80049ac:	4613      	mov	r3, r2
 80049ae:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d10b      	bne.n	80049ce <xQueueGenericCreate+0x2c>
	__asm volatile
 80049b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ba:	f383 8811 	msr	BASEPRI, r3
 80049be:	f3bf 8f6f 	isb	sy
 80049c2:	f3bf 8f4f 	dsb	sy
 80049c6:	613b      	str	r3, [r7, #16]
}
 80049c8:	bf00      	nop
 80049ca:	bf00      	nop
 80049cc:	e7fd      	b.n	80049ca <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	68ba      	ldr	r2, [r7, #8]
 80049d2:	fb02 f303 	mul.w	r3, r2, r3
 80049d6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	3350      	adds	r3, #80	@ 0x50
 80049dc:	4618      	mov	r0, r3
 80049de:	f002 fbc5 	bl	800716c <pvPortMalloc>
 80049e2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d011      	beq.n	8004a0e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	3350      	adds	r3, #80	@ 0x50
 80049f2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80049fc:	79fa      	ldrb	r2, [r7, #7]
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	9300      	str	r3, [sp, #0]
 8004a02:	4613      	mov	r3, r2
 8004a04:	697a      	ldr	r2, [r7, #20]
 8004a06:	68b9      	ldr	r1, [r7, #8]
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	f000 f805 	bl	8004a18 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004a0e:	69bb      	ldr	r3, [r7, #24]
	}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3720      	adds	r7, #32
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
 8004a24:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d103      	bne.n	8004a34 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	69ba      	ldr	r2, [r7, #24]
 8004a30:	601a      	str	r2, [r3, #0]
 8004a32:	e002      	b.n	8004a3a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004a46:	2101      	movs	r1, #1
 8004a48:	69b8      	ldr	r0, [r7, #24]
 8004a4a:	f7ff fec3 	bl	80047d4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	78fa      	ldrb	r2, [r7, #3]
 8004a52:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004a56:	bf00      	nop
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
	...

08004a60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b08e      	sub	sp, #56	@ 0x38
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	607a      	str	r2, [r7, #4]
 8004a6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10b      	bne.n	8004a94 <xQueueGenericSend+0x34>
	__asm volatile
 8004a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a80:	f383 8811 	msr	BASEPRI, r3
 8004a84:	f3bf 8f6f 	isb	sy
 8004a88:	f3bf 8f4f 	dsb	sy
 8004a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004a8e:	bf00      	nop
 8004a90:	bf00      	nop
 8004a92:	e7fd      	b.n	8004a90 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d103      	bne.n	8004aa2 <xQueueGenericSend+0x42>
 8004a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d101      	bne.n	8004aa6 <xQueueGenericSend+0x46>
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e000      	b.n	8004aa8 <xQueueGenericSend+0x48>
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d10b      	bne.n	8004ac4 <xQueueGenericSend+0x64>
	__asm volatile
 8004aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ab0:	f383 8811 	msr	BASEPRI, r3
 8004ab4:	f3bf 8f6f 	isb	sy
 8004ab8:	f3bf 8f4f 	dsb	sy
 8004abc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004abe:	bf00      	nop
 8004ac0:	bf00      	nop
 8004ac2:	e7fd      	b.n	8004ac0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d103      	bne.n	8004ad2 <xQueueGenericSend+0x72>
 8004aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004acc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d101      	bne.n	8004ad6 <xQueueGenericSend+0x76>
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e000      	b.n	8004ad8 <xQueueGenericSend+0x78>
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d10b      	bne.n	8004af4 <xQueueGenericSend+0x94>
	__asm volatile
 8004adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ae0:	f383 8811 	msr	BASEPRI, r3
 8004ae4:	f3bf 8f6f 	isb	sy
 8004ae8:	f3bf 8f4f 	dsb	sy
 8004aec:	623b      	str	r3, [r7, #32]
}
 8004aee:	bf00      	nop
 8004af0:	bf00      	nop
 8004af2:	e7fd      	b.n	8004af0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004af4:	f001 faa6 	bl	8006044 <xTaskGetSchedulerState>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d102      	bne.n	8004b04 <xQueueGenericSend+0xa4>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d101      	bne.n	8004b08 <xQueueGenericSend+0xa8>
 8004b04:	2301      	movs	r3, #1
 8004b06:	e000      	b.n	8004b0a <xQueueGenericSend+0xaa>
 8004b08:	2300      	movs	r3, #0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10b      	bne.n	8004b26 <xQueueGenericSend+0xc6>
	__asm volatile
 8004b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b12:	f383 8811 	msr	BASEPRI, r3
 8004b16:	f3bf 8f6f 	isb	sy
 8004b1a:	f3bf 8f4f 	dsb	sy
 8004b1e:	61fb      	str	r3, [r7, #28]
}
 8004b20:	bf00      	nop
 8004b22:	bf00      	nop
 8004b24:	e7fd      	b.n	8004b22 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b26:	f002 f9ff 	bl	8006f28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d302      	bcc.n	8004b3c <xQueueGenericSend+0xdc>
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d129      	bne.n	8004b90 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b3c:	683a      	ldr	r2, [r7, #0]
 8004b3e:	68b9      	ldr	r1, [r7, #8]
 8004b40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b42:	f000 fa91 	bl	8005068 <prvCopyDataToQueue>
 8004b46:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d010      	beq.n	8004b72 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b52:	3324      	adds	r3, #36	@ 0x24
 8004b54:	4618      	mov	r0, r3
 8004b56:	f001 f8af 	bl	8005cb8 <xTaskRemoveFromEventList>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d013      	beq.n	8004b88 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004b60:	4b3f      	ldr	r3, [pc, #252]	@ (8004c60 <xQueueGenericSend+0x200>)
 8004b62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b66:	601a      	str	r2, [r3, #0]
 8004b68:	f3bf 8f4f 	dsb	sy
 8004b6c:	f3bf 8f6f 	isb	sy
 8004b70:	e00a      	b.n	8004b88 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d007      	beq.n	8004b88 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004b78:	4b39      	ldr	r3, [pc, #228]	@ (8004c60 <xQueueGenericSend+0x200>)
 8004b7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b7e:	601a      	str	r2, [r3, #0]
 8004b80:	f3bf 8f4f 	dsb	sy
 8004b84:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004b88:	f002 fa00 	bl	8006f8c <vPortExitCritical>
				return pdPASS;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e063      	b.n	8004c58 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d103      	bne.n	8004b9e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b96:	f002 f9f9 	bl	8006f8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	e05c      	b.n	8004c58 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d106      	bne.n	8004bb2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ba4:	f107 0314 	add.w	r3, r7, #20
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f001 f8e9 	bl	8005d80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004bb2:	f002 f9eb 	bl	8006f8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004bb6:	f000 fe51 	bl	800585c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004bba:	f002 f9b5 	bl	8006f28 <vPortEnterCritical>
 8004bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bc0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004bc4:	b25b      	sxtb	r3, r3
 8004bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bca:	d103      	bne.n	8004bd4 <xQueueGenericSend+0x174>
 8004bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004bda:	b25b      	sxtb	r3, r3
 8004bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be0:	d103      	bne.n	8004bea <xQueueGenericSend+0x18a>
 8004be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004bea:	f002 f9cf 	bl	8006f8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004bee:	1d3a      	adds	r2, r7, #4
 8004bf0:	f107 0314 	add.w	r3, r7, #20
 8004bf4:	4611      	mov	r1, r2
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f001 f8d8 	bl	8005dac <xTaskCheckForTimeOut>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d124      	bne.n	8004c4c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004c02:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c04:	f000 fb28 	bl	8005258 <prvIsQueueFull>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d018      	beq.n	8004c40 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c10:	3310      	adds	r3, #16
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	4611      	mov	r1, r2
 8004c16:	4618      	mov	r0, r3
 8004c18:	f000 fffc 	bl	8005c14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004c1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c1e:	f000 fab3 	bl	8005188 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004c22:	f000 fe29 	bl	8005878 <xTaskResumeAll>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f47f af7c 	bne.w	8004b26 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8004c60 <xQueueGenericSend+0x200>)
 8004c30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c34:	601a      	str	r2, [r3, #0]
 8004c36:	f3bf 8f4f 	dsb	sy
 8004c3a:	f3bf 8f6f 	isb	sy
 8004c3e:	e772      	b.n	8004b26 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004c40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c42:	f000 faa1 	bl	8005188 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c46:	f000 fe17 	bl	8005878 <xTaskResumeAll>
 8004c4a:	e76c      	b.n	8004b26 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004c4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c4e:	f000 fa9b 	bl	8005188 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c52:	f000 fe11 	bl	8005878 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004c56:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3738      	adds	r7, #56	@ 0x38
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	e000ed04 	.word	0xe000ed04

08004c64 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b090      	sub	sp, #64	@ 0x40
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
 8004c70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d10b      	bne.n	8004c94 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c80:	f383 8811 	msr	BASEPRI, r3
 8004c84:	f3bf 8f6f 	isb	sy
 8004c88:	f3bf 8f4f 	dsb	sy
 8004c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004c8e:	bf00      	nop
 8004c90:	bf00      	nop
 8004c92:	e7fd      	b.n	8004c90 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d103      	bne.n	8004ca2 <xQueueGenericSendFromISR+0x3e>
 8004c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <xQueueGenericSendFromISR+0x42>
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e000      	b.n	8004ca8 <xQueueGenericSendFromISR+0x44>
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d10b      	bne.n	8004cc4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cb0:	f383 8811 	msr	BASEPRI, r3
 8004cb4:	f3bf 8f6f 	isb	sy
 8004cb8:	f3bf 8f4f 	dsb	sy
 8004cbc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004cbe:	bf00      	nop
 8004cc0:	bf00      	nop
 8004cc2:	e7fd      	b.n	8004cc0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d103      	bne.n	8004cd2 <xQueueGenericSendFromISR+0x6e>
 8004cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ccc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d101      	bne.n	8004cd6 <xQueueGenericSendFromISR+0x72>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e000      	b.n	8004cd8 <xQueueGenericSendFromISR+0x74>
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d10b      	bne.n	8004cf4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ce0:	f383 8811 	msr	BASEPRI, r3
 8004ce4:	f3bf 8f6f 	isb	sy
 8004ce8:	f3bf 8f4f 	dsb	sy
 8004cec:	623b      	str	r3, [r7, #32]
}
 8004cee:	bf00      	nop
 8004cf0:	bf00      	nop
 8004cf2:	e7fd      	b.n	8004cf0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004cf4:	f002 f9f8 	bl	80070e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004cf8:	f3ef 8211 	mrs	r2, BASEPRI
 8004cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d00:	f383 8811 	msr	BASEPRI, r3
 8004d04:	f3bf 8f6f 	isb	sy
 8004d08:	f3bf 8f4f 	dsb	sy
 8004d0c:	61fa      	str	r2, [r7, #28]
 8004d0e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004d10:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d12:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d302      	bcc.n	8004d26 <xQueueGenericSendFromISR+0xc2>
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d12f      	bne.n	8004d86 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d28:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d2c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d36:	683a      	ldr	r2, [r7, #0]
 8004d38:	68b9      	ldr	r1, [r7, #8]
 8004d3a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004d3c:	f000 f994 	bl	8005068 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004d40:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d48:	d112      	bne.n	8004d70 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d016      	beq.n	8004d80 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d54:	3324      	adds	r3, #36	@ 0x24
 8004d56:	4618      	mov	r0, r3
 8004d58:	f000 ffae 	bl	8005cb8 <xTaskRemoveFromEventList>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00e      	beq.n	8004d80 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00b      	beq.n	8004d80 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	601a      	str	r2, [r3, #0]
 8004d6e:	e007      	b.n	8004d80 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004d70:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004d74:	3301      	adds	r3, #1
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	b25a      	sxtb	r2, r3
 8004d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004d80:	2301      	movs	r3, #1
 8004d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004d84:	e001      	b.n	8004d8a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004d86:	2300      	movs	r3, #0
 8004d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d8c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004d94:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004d96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3740      	adds	r7, #64	@ 0x40
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b08c      	sub	sp, #48	@ 0x30
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004dac:	2300      	movs	r3, #0
 8004dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10b      	bne.n	8004dd2 <xQueueReceive+0x32>
	__asm volatile
 8004dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dbe:	f383 8811 	msr	BASEPRI, r3
 8004dc2:	f3bf 8f6f 	isb	sy
 8004dc6:	f3bf 8f4f 	dsb	sy
 8004dca:	623b      	str	r3, [r7, #32]
}
 8004dcc:	bf00      	nop
 8004dce:	bf00      	nop
 8004dd0:	e7fd      	b.n	8004dce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d103      	bne.n	8004de0 <xQueueReceive+0x40>
 8004dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d101      	bne.n	8004de4 <xQueueReceive+0x44>
 8004de0:	2301      	movs	r3, #1
 8004de2:	e000      	b.n	8004de6 <xQueueReceive+0x46>
 8004de4:	2300      	movs	r3, #0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d10b      	bne.n	8004e02 <xQueueReceive+0x62>
	__asm volatile
 8004dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dee:	f383 8811 	msr	BASEPRI, r3
 8004df2:	f3bf 8f6f 	isb	sy
 8004df6:	f3bf 8f4f 	dsb	sy
 8004dfa:	61fb      	str	r3, [r7, #28]
}
 8004dfc:	bf00      	nop
 8004dfe:	bf00      	nop
 8004e00:	e7fd      	b.n	8004dfe <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e02:	f001 f91f 	bl	8006044 <xTaskGetSchedulerState>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d102      	bne.n	8004e12 <xQueueReceive+0x72>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d101      	bne.n	8004e16 <xQueueReceive+0x76>
 8004e12:	2301      	movs	r3, #1
 8004e14:	e000      	b.n	8004e18 <xQueueReceive+0x78>
 8004e16:	2300      	movs	r3, #0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10b      	bne.n	8004e34 <xQueueReceive+0x94>
	__asm volatile
 8004e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e20:	f383 8811 	msr	BASEPRI, r3
 8004e24:	f3bf 8f6f 	isb	sy
 8004e28:	f3bf 8f4f 	dsb	sy
 8004e2c:	61bb      	str	r3, [r7, #24]
}
 8004e2e:	bf00      	nop
 8004e30:	bf00      	nop
 8004e32:	e7fd      	b.n	8004e30 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e34:	f002 f878 	bl	8006f28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e3c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d01f      	beq.n	8004e84 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e44:	68b9      	ldr	r1, [r7, #8]
 8004e46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e48:	f000 f978 	bl	800513c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e4e:	1e5a      	subs	r2, r3, #1
 8004e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e52:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00f      	beq.n	8004e7c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e5e:	3310      	adds	r3, #16
 8004e60:	4618      	mov	r0, r3
 8004e62:	f000 ff29 	bl	8005cb8 <xTaskRemoveFromEventList>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d007      	beq.n	8004e7c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004e6c:	4b3c      	ldr	r3, [pc, #240]	@ (8004f60 <xQueueReceive+0x1c0>)
 8004e6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e72:	601a      	str	r2, [r3, #0]
 8004e74:	f3bf 8f4f 	dsb	sy
 8004e78:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004e7c:	f002 f886 	bl	8006f8c <vPortExitCritical>
				return pdPASS;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e069      	b.n	8004f58 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d103      	bne.n	8004e92 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e8a:	f002 f87f 	bl	8006f8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	e062      	b.n	8004f58 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d106      	bne.n	8004ea6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e98:	f107 0310 	add.w	r3, r7, #16
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f000 ff6f 	bl	8005d80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ea6:	f002 f871 	bl	8006f8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004eaa:	f000 fcd7 	bl	800585c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004eae:	f002 f83b 	bl	8006f28 <vPortEnterCritical>
 8004eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eb4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004eb8:	b25b      	sxtb	r3, r3
 8004eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ebe:	d103      	bne.n	8004ec8 <xQueueReceive+0x128>
 8004ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ece:	b25b      	sxtb	r3, r3
 8004ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed4:	d103      	bne.n	8004ede <xQueueReceive+0x13e>
 8004ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ede:	f002 f855 	bl	8006f8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ee2:	1d3a      	adds	r2, r7, #4
 8004ee4:	f107 0310 	add.w	r3, r7, #16
 8004ee8:	4611      	mov	r1, r2
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 ff5e 	bl	8005dac <xTaskCheckForTimeOut>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d123      	bne.n	8004f3e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ef6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ef8:	f000 f998 	bl	800522c <prvIsQueueEmpty>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d017      	beq.n	8004f32 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f04:	3324      	adds	r3, #36	@ 0x24
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	4611      	mov	r1, r2
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f000 fe82 	bl	8005c14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004f10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f12:	f000 f939 	bl	8005188 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004f16:	f000 fcaf 	bl	8005878 <xTaskResumeAll>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d189      	bne.n	8004e34 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004f20:	4b0f      	ldr	r3, [pc, #60]	@ (8004f60 <xQueueReceive+0x1c0>)
 8004f22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f26:	601a      	str	r2, [r3, #0]
 8004f28:	f3bf 8f4f 	dsb	sy
 8004f2c:	f3bf 8f6f 	isb	sy
 8004f30:	e780      	b.n	8004e34 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004f32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f34:	f000 f928 	bl	8005188 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f38:	f000 fc9e 	bl	8005878 <xTaskResumeAll>
 8004f3c:	e77a      	b.n	8004e34 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004f3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f40:	f000 f922 	bl	8005188 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f44:	f000 fc98 	bl	8005878 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f4a:	f000 f96f 	bl	800522c <prvIsQueueEmpty>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	f43f af6f 	beq.w	8004e34 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004f56:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3730      	adds	r7, #48	@ 0x30
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	e000ed04 	.word	0xe000ed04

08004f64 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b08e      	sub	sp, #56	@ 0x38
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d10b      	bne.n	8004f92 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8004f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f7e:	f383 8811 	msr	BASEPRI, r3
 8004f82:	f3bf 8f6f 	isb	sy
 8004f86:	f3bf 8f4f 	dsb	sy
 8004f8a:	623b      	str	r3, [r7, #32]
}
 8004f8c:	bf00      	nop
 8004f8e:	bf00      	nop
 8004f90:	e7fd      	b.n	8004f8e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d103      	bne.n	8004fa0 <xQueueReceiveFromISR+0x3c>
 8004f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d101      	bne.n	8004fa4 <xQueueReceiveFromISR+0x40>
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e000      	b.n	8004fa6 <xQueueReceiveFromISR+0x42>
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10b      	bne.n	8004fc2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8004faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fae:	f383 8811 	msr	BASEPRI, r3
 8004fb2:	f3bf 8f6f 	isb	sy
 8004fb6:	f3bf 8f4f 	dsb	sy
 8004fba:	61fb      	str	r3, [r7, #28]
}
 8004fbc:	bf00      	nop
 8004fbe:	bf00      	nop
 8004fc0:	e7fd      	b.n	8004fbe <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004fc2:	f002 f891 	bl	80070e8 <vPortValidateInterruptPriority>
	__asm volatile
 8004fc6:	f3ef 8211 	mrs	r2, BASEPRI
 8004fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fce:	f383 8811 	msr	BASEPRI, r3
 8004fd2:	f3bf 8f6f 	isb	sy
 8004fd6:	f3bf 8f4f 	dsb	sy
 8004fda:	61ba      	str	r2, [r7, #24]
 8004fdc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004fde:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fe6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d02f      	beq.n	800504e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004ff4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004ff8:	68b9      	ldr	r1, [r7, #8]
 8004ffa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004ffc:	f000 f89e 	bl	800513c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005002:	1e5a      	subs	r2, r3, #1
 8005004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005006:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005008:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800500c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005010:	d112      	bne.n	8005038 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d016      	beq.n	8005048 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800501a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800501c:	3310      	adds	r3, #16
 800501e:	4618      	mov	r0, r3
 8005020:	f000 fe4a 	bl	8005cb8 <xTaskRemoveFromEventList>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00e      	beq.n	8005048 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00b      	beq.n	8005048 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	601a      	str	r2, [r3, #0]
 8005036:	e007      	b.n	8005048 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005038:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800503c:	3301      	adds	r3, #1
 800503e:	b2db      	uxtb	r3, r3
 8005040:	b25a      	sxtb	r2, r3
 8005042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005044:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005048:	2301      	movs	r3, #1
 800504a:	637b      	str	r3, [r7, #52]	@ 0x34
 800504c:	e001      	b.n	8005052 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800504e:	2300      	movs	r3, #0
 8005050:	637b      	str	r3, [r7, #52]	@ 0x34
 8005052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005054:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	f383 8811 	msr	BASEPRI, r3
}
 800505c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800505e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005060:	4618      	mov	r0, r3
 8005062:	3738      	adds	r7, #56	@ 0x38
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b086      	sub	sp, #24
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005074:	2300      	movs	r3, #0
 8005076:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800507c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005082:	2b00      	cmp	r3, #0
 8005084:	d10d      	bne.n	80050a2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d14d      	bne.n	800512a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	4618      	mov	r0, r3
 8005094:	f000 fff4 	bl	8006080 <xTaskPriorityDisinherit>
 8005098:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	609a      	str	r2, [r3, #8]
 80050a0:	e043      	b.n	800512a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d119      	bne.n	80050dc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6858      	ldr	r0, [r3, #4]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b0:	461a      	mov	r2, r3
 80050b2:	68b9      	ldr	r1, [r7, #8]
 80050b4:	f002 fafc 	bl	80076b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c0:	441a      	add	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	685a      	ldr	r2, [r3, #4]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d32b      	bcc.n	800512a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	605a      	str	r2, [r3, #4]
 80050da:	e026      	b.n	800512a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	68d8      	ldr	r0, [r3, #12]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e4:	461a      	mov	r2, r3
 80050e6:	68b9      	ldr	r1, [r7, #8]
 80050e8:	f002 fae2 	bl	80076b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	68da      	ldr	r2, [r3, #12]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f4:	425b      	negs	r3, r3
 80050f6:	441a      	add	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	68da      	ldr	r2, [r3, #12]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	429a      	cmp	r2, r3
 8005106:	d207      	bcs.n	8005118 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	689a      	ldr	r2, [r3, #8]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005110:	425b      	negs	r3, r3
 8005112:	441a      	add	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2b02      	cmp	r3, #2
 800511c:	d105      	bne.n	800512a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d002      	beq.n	800512a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	3b01      	subs	r3, #1
 8005128:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	1c5a      	adds	r2, r3, #1
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005132:	697b      	ldr	r3, [r7, #20]
}
 8005134:	4618      	mov	r0, r3
 8005136:	3718      	adds	r7, #24
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800514a:	2b00      	cmp	r3, #0
 800514c:	d018      	beq.n	8005180 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68da      	ldr	r2, [r3, #12]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005156:	441a      	add	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	68da      	ldr	r2, [r3, #12]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	429a      	cmp	r2, r3
 8005166:	d303      	bcc.n	8005170 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	68d9      	ldr	r1, [r3, #12]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005178:	461a      	mov	r2, r3
 800517a:	6838      	ldr	r0, [r7, #0]
 800517c:	f002 fa98 	bl	80076b0 <memcpy>
	}
}
 8005180:	bf00      	nop
 8005182:	3708      	adds	r7, #8
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005190:	f001 feca 	bl	8006f28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800519a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800519c:	e011      	b.n	80051c2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d012      	beq.n	80051cc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	3324      	adds	r3, #36	@ 0x24
 80051aa:	4618      	mov	r0, r3
 80051ac:	f000 fd84 	bl	8005cb8 <xTaskRemoveFromEventList>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80051b6:	f000 fe5d 	bl	8005e74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80051ba:	7bfb      	ldrb	r3, [r7, #15]
 80051bc:	3b01      	subs	r3, #1
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	dce9      	bgt.n	800519e <prvUnlockQueue+0x16>
 80051ca:	e000      	b.n	80051ce <prvUnlockQueue+0x46>
					break;
 80051cc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	22ff      	movs	r2, #255	@ 0xff
 80051d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80051d6:	f001 fed9 	bl	8006f8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80051da:	f001 fea5 	bl	8006f28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80051e4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80051e6:	e011      	b.n	800520c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d012      	beq.n	8005216 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	3310      	adds	r3, #16
 80051f4:	4618      	mov	r0, r3
 80051f6:	f000 fd5f 	bl	8005cb8 <xTaskRemoveFromEventList>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d001      	beq.n	8005204 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005200:	f000 fe38 	bl	8005e74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005204:	7bbb      	ldrb	r3, [r7, #14]
 8005206:	3b01      	subs	r3, #1
 8005208:	b2db      	uxtb	r3, r3
 800520a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800520c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005210:	2b00      	cmp	r3, #0
 8005212:	dce9      	bgt.n	80051e8 <prvUnlockQueue+0x60>
 8005214:	e000      	b.n	8005218 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005216:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	22ff      	movs	r2, #255	@ 0xff
 800521c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005220:	f001 feb4 	bl	8006f8c <vPortExitCritical>
}
 8005224:	bf00      	nop
 8005226:	3710      	adds	r7, #16
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005234:	f001 fe78 	bl	8006f28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800523c:	2b00      	cmp	r3, #0
 800523e:	d102      	bne.n	8005246 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005240:	2301      	movs	r3, #1
 8005242:	60fb      	str	r3, [r7, #12]
 8005244:	e001      	b.n	800524a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005246:	2300      	movs	r3, #0
 8005248:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800524a:	f001 fe9f 	bl	8006f8c <vPortExitCritical>

	return xReturn;
 800524e:	68fb      	ldr	r3, [r7, #12]
}
 8005250:	4618      	mov	r0, r3
 8005252:	3710      	adds	r7, #16
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005260:	f001 fe62 	bl	8006f28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800526c:	429a      	cmp	r2, r3
 800526e:	d102      	bne.n	8005276 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005270:	2301      	movs	r3, #1
 8005272:	60fb      	str	r3, [r7, #12]
 8005274:	e001      	b.n	800527a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005276:	2300      	movs	r3, #0
 8005278:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800527a:	f001 fe87 	bl	8006f8c <vPortExitCritical>

	return xReturn;
 800527e:	68fb      	ldr	r3, [r7, #12]
}
 8005280:	4618      	mov	r0, r3
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8005288:	b480      	push	{r7}
 800528a:	b087      	sub	sp, #28
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	613b      	str	r3, [r7, #16]

	configASSERT( pxQueue );
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d10b      	bne.n	80052b2 <xQueueIsQueueFullFromISR+0x2a>
	__asm volatile
 800529a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800529e:	f383 8811 	msr	BASEPRI, r3
 80052a2:	f3bf 8f6f 	isb	sy
 80052a6:	f3bf 8f4f 	dsb	sy
 80052aa:	60fb      	str	r3, [r7, #12]
}
 80052ac:	bf00      	nop
 80052ae:	bf00      	nop
 80052b0:	e7fd      	b.n	80052ae <xQueueIsQueueFullFromISR+0x26>
	if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d102      	bne.n	80052c4 <xQueueIsQueueFullFromISR+0x3c>
	{
		xReturn = pdTRUE;
 80052be:	2301      	movs	r3, #1
 80052c0:	617b      	str	r3, [r7, #20]
 80052c2:	e001      	b.n	80052c8 <xQueueIsQueueFullFromISR+0x40>
	}
	else
	{
		xReturn = pdFALSE;
 80052c4:	2300      	movs	r3, #0
 80052c6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80052c8:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80052ca:	4618      	mov	r0, r3
 80052cc:	371c      	adds	r7, #28
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
	...

080052d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80052e2:	2300      	movs	r3, #0
 80052e4:	60fb      	str	r3, [r7, #12]
 80052e6:	e014      	b.n	8005312 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80052e8:	4a0f      	ldr	r2, [pc, #60]	@ (8005328 <vQueueAddToRegistry+0x50>)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d10b      	bne.n	800530c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80052f4:	490c      	ldr	r1, [pc, #48]	@ (8005328 <vQueueAddToRegistry+0x50>)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	683a      	ldr	r2, [r7, #0]
 80052fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80052fe:	4a0a      	ldr	r2, [pc, #40]	@ (8005328 <vQueueAddToRegistry+0x50>)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	00db      	lsls	r3, r3, #3
 8005304:	4413      	add	r3, r2
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800530a:	e006      	b.n	800531a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	3301      	adds	r3, #1
 8005310:	60fb      	str	r3, [r7, #12]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2b07      	cmp	r3, #7
 8005316:	d9e7      	bls.n	80052e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005318:	bf00      	nop
 800531a:	bf00      	nop
 800531c:	3714      	adds	r7, #20
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	2000091c 	.word	0x2000091c

0800532c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800532c:	b580      	push	{r7, lr}
 800532e:	b086      	sub	sp, #24
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800533c:	f001 fdf4 	bl	8006f28 <vPortEnterCritical>
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005346:	b25b      	sxtb	r3, r3
 8005348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800534c:	d103      	bne.n	8005356 <vQueueWaitForMessageRestricted+0x2a>
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800535c:	b25b      	sxtb	r3, r3
 800535e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005362:	d103      	bne.n	800536c <vQueueWaitForMessageRestricted+0x40>
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	2200      	movs	r2, #0
 8005368:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800536c:	f001 fe0e 	bl	8006f8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005374:	2b00      	cmp	r3, #0
 8005376:	d106      	bne.n	8005386 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	3324      	adds	r3, #36	@ 0x24
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	68b9      	ldr	r1, [r7, #8]
 8005380:	4618      	mov	r0, r3
 8005382:	f000 fc6d 	bl	8005c60 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005386:	6978      	ldr	r0, [r7, #20]
 8005388:	f7ff fefe 	bl	8005188 <prvUnlockQueue>
	}
 800538c:	bf00      	nop
 800538e:	3718      	adds	r7, #24
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005394:	b580      	push	{r7, lr}
 8005396:	b08e      	sub	sp, #56	@ 0x38
 8005398:	af04      	add	r7, sp, #16
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
 80053a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80053a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d10b      	bne.n	80053c0 <xTaskCreateStatic+0x2c>
	__asm volatile
 80053a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ac:	f383 8811 	msr	BASEPRI, r3
 80053b0:	f3bf 8f6f 	isb	sy
 80053b4:	f3bf 8f4f 	dsb	sy
 80053b8:	623b      	str	r3, [r7, #32]
}
 80053ba:	bf00      	nop
 80053bc:	bf00      	nop
 80053be:	e7fd      	b.n	80053bc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80053c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d10b      	bne.n	80053de <xTaskCreateStatic+0x4a>
	__asm volatile
 80053c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ca:	f383 8811 	msr	BASEPRI, r3
 80053ce:	f3bf 8f6f 	isb	sy
 80053d2:	f3bf 8f4f 	dsb	sy
 80053d6:	61fb      	str	r3, [r7, #28]
}
 80053d8:	bf00      	nop
 80053da:	bf00      	nop
 80053dc:	e7fd      	b.n	80053da <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80053de:	23a8      	movs	r3, #168	@ 0xa8
 80053e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	2ba8      	cmp	r3, #168	@ 0xa8
 80053e6:	d00b      	beq.n	8005400 <xTaskCreateStatic+0x6c>
	__asm volatile
 80053e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ec:	f383 8811 	msr	BASEPRI, r3
 80053f0:	f3bf 8f6f 	isb	sy
 80053f4:	f3bf 8f4f 	dsb	sy
 80053f8:	61bb      	str	r3, [r7, #24]
}
 80053fa:	bf00      	nop
 80053fc:	bf00      	nop
 80053fe:	e7fd      	b.n	80053fc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005400:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005404:	2b00      	cmp	r3, #0
 8005406:	d01e      	beq.n	8005446 <xTaskCreateStatic+0xb2>
 8005408:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800540a:	2b00      	cmp	r3, #0
 800540c:	d01b      	beq.n	8005446 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800540e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005410:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005414:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005416:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541a:	2202      	movs	r2, #2
 800541c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005420:	2300      	movs	r3, #0
 8005422:	9303      	str	r3, [sp, #12]
 8005424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005426:	9302      	str	r3, [sp, #8]
 8005428:	f107 0314 	add.w	r3, r7, #20
 800542c:	9301      	str	r3, [sp, #4]
 800542e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005430:	9300      	str	r3, [sp, #0]
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	68b9      	ldr	r1, [r7, #8]
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f000 f851 	bl	80054e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800543e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005440:	f000 f8f6 	bl	8005630 <prvAddNewTaskToReadyList>
 8005444:	e001      	b.n	800544a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005446:	2300      	movs	r3, #0
 8005448:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800544a:	697b      	ldr	r3, [r7, #20]
	}
 800544c:	4618      	mov	r0, r3
 800544e:	3728      	adds	r7, #40	@ 0x28
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005454:	b580      	push	{r7, lr}
 8005456:	b08c      	sub	sp, #48	@ 0x30
 8005458:	af04      	add	r7, sp, #16
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	603b      	str	r3, [r7, #0]
 8005460:	4613      	mov	r3, r2
 8005462:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005464:	88fb      	ldrh	r3, [r7, #6]
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4618      	mov	r0, r3
 800546a:	f001 fe7f 	bl	800716c <pvPortMalloc>
 800546e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00e      	beq.n	8005494 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005476:	20a8      	movs	r0, #168	@ 0xa8
 8005478:	f001 fe78 	bl	800716c <pvPortMalloc>
 800547c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d003      	beq.n	800548c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	631a      	str	r2, [r3, #48]	@ 0x30
 800548a:	e005      	b.n	8005498 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800548c:	6978      	ldr	r0, [r7, #20]
 800548e:	f001 ff3b 	bl	8007308 <vPortFree>
 8005492:	e001      	b.n	8005498 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005494:	2300      	movs	r3, #0
 8005496:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d017      	beq.n	80054ce <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80054a6:	88fa      	ldrh	r2, [r7, #6]
 80054a8:	2300      	movs	r3, #0
 80054aa:	9303      	str	r3, [sp, #12]
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	9302      	str	r3, [sp, #8]
 80054b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054b2:	9301      	str	r3, [sp, #4]
 80054b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054b6:	9300      	str	r3, [sp, #0]
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	68b9      	ldr	r1, [r7, #8]
 80054bc:	68f8      	ldr	r0, [r7, #12]
 80054be:	f000 f80f 	bl	80054e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054c2:	69f8      	ldr	r0, [r7, #28]
 80054c4:	f000 f8b4 	bl	8005630 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80054c8:	2301      	movs	r3, #1
 80054ca:	61bb      	str	r3, [r7, #24]
 80054cc:	e002      	b.n	80054d4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80054ce:	f04f 33ff 	mov.w	r3, #4294967295
 80054d2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80054d4:	69bb      	ldr	r3, [r7, #24]
	}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3720      	adds	r7, #32
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
	...

080054e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b088      	sub	sp, #32
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
 80054ec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80054ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	461a      	mov	r2, r3
 80054f8:	21a5      	movs	r1, #165	@ 0xa5
 80054fa:	f002 f847 	bl	800758c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80054fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005500:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005508:	3b01      	subs	r3, #1
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	4413      	add	r3, r2
 800550e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	f023 0307 	bic.w	r3, r3, #7
 8005516:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	f003 0307 	and.w	r3, r3, #7
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00b      	beq.n	800553a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005526:	f383 8811 	msr	BASEPRI, r3
 800552a:	f3bf 8f6f 	isb	sy
 800552e:	f3bf 8f4f 	dsb	sy
 8005532:	617b      	str	r3, [r7, #20]
}
 8005534:	bf00      	nop
 8005536:	bf00      	nop
 8005538:	e7fd      	b.n	8005536 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d01f      	beq.n	8005580 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005540:	2300      	movs	r3, #0
 8005542:	61fb      	str	r3, [r7, #28]
 8005544:	e012      	b.n	800556c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005546:	68ba      	ldr	r2, [r7, #8]
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	4413      	add	r3, r2
 800554c:	7819      	ldrb	r1, [r3, #0]
 800554e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	4413      	add	r3, r2
 8005554:	3334      	adds	r3, #52	@ 0x34
 8005556:	460a      	mov	r2, r1
 8005558:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800555a:	68ba      	ldr	r2, [r7, #8]
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	4413      	add	r3, r2
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d006      	beq.n	8005574 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	3301      	adds	r3, #1
 800556a:	61fb      	str	r3, [r7, #28]
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	2b0f      	cmp	r3, #15
 8005570:	d9e9      	bls.n	8005546 <prvInitialiseNewTask+0x66>
 8005572:	e000      	b.n	8005576 <prvInitialiseNewTask+0x96>
			{
				break;
 8005574:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005578:	2200      	movs	r2, #0
 800557a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800557e:	e003      	b.n	8005588 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005582:	2200      	movs	r2, #0
 8005584:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800558a:	2b37      	cmp	r3, #55	@ 0x37
 800558c:	d901      	bls.n	8005592 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800558e:	2337      	movs	r3, #55	@ 0x37
 8005590:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005594:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005596:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800559a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800559c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800559e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a0:	2200      	movs	r2, #0
 80055a2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80055a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a6:	3304      	adds	r3, #4
 80055a8:	4618      	mov	r0, r3
 80055aa:	f7ff f87f 	bl	80046ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80055ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b0:	3318      	adds	r3, #24
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7ff f87a 	bl	80046ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80055b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055bc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80055c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80055c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055cc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80055ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d0:	2200      	movs	r2, #0
 80055d2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80055d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80055de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e0:	3354      	adds	r3, #84	@ 0x54
 80055e2:	224c      	movs	r2, #76	@ 0x4c
 80055e4:	2100      	movs	r1, #0
 80055e6:	4618      	mov	r0, r3
 80055e8:	f001 ffd0 	bl	800758c <memset>
 80055ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ee:	4a0d      	ldr	r2, [pc, #52]	@ (8005624 <prvInitialiseNewTask+0x144>)
 80055f0:	659a      	str	r2, [r3, #88]	@ 0x58
 80055f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f4:	4a0c      	ldr	r2, [pc, #48]	@ (8005628 <prvInitialiseNewTask+0x148>)
 80055f6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80055f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055fa:	4a0c      	ldr	r2, [pc, #48]	@ (800562c <prvInitialiseNewTask+0x14c>)
 80055fc:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80055fe:	683a      	ldr	r2, [r7, #0]
 8005600:	68f9      	ldr	r1, [r7, #12]
 8005602:	69b8      	ldr	r0, [r7, #24]
 8005604:	f001 fb62 	bl	8006ccc <pxPortInitialiseStack>
 8005608:	4602      	mov	r2, r0
 800560a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800560c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800560e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005610:	2b00      	cmp	r3, #0
 8005612:	d002      	beq.n	800561a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005616:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005618:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800561a:	bf00      	nop
 800561c:	3720      	adds	r7, #32
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	20004bb0 	.word	0x20004bb0
 8005628:	20004c18 	.word	0x20004c18
 800562c:	20004c80 	.word	0x20004c80

08005630 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005638:	f001 fc76 	bl	8006f28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800563c:	4b2d      	ldr	r3, [pc, #180]	@ (80056f4 <prvAddNewTaskToReadyList+0xc4>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	3301      	adds	r3, #1
 8005642:	4a2c      	ldr	r2, [pc, #176]	@ (80056f4 <prvAddNewTaskToReadyList+0xc4>)
 8005644:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005646:	4b2c      	ldr	r3, [pc, #176]	@ (80056f8 <prvAddNewTaskToReadyList+0xc8>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d109      	bne.n	8005662 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800564e:	4a2a      	ldr	r2, [pc, #168]	@ (80056f8 <prvAddNewTaskToReadyList+0xc8>)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005654:	4b27      	ldr	r3, [pc, #156]	@ (80056f4 <prvAddNewTaskToReadyList+0xc4>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d110      	bne.n	800567e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800565c:	f000 fc2e 	bl	8005ebc <prvInitialiseTaskLists>
 8005660:	e00d      	b.n	800567e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005662:	4b26      	ldr	r3, [pc, #152]	@ (80056fc <prvAddNewTaskToReadyList+0xcc>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d109      	bne.n	800567e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800566a:	4b23      	ldr	r3, [pc, #140]	@ (80056f8 <prvAddNewTaskToReadyList+0xc8>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005674:	429a      	cmp	r2, r3
 8005676:	d802      	bhi.n	800567e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005678:	4a1f      	ldr	r2, [pc, #124]	@ (80056f8 <prvAddNewTaskToReadyList+0xc8>)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800567e:	4b20      	ldr	r3, [pc, #128]	@ (8005700 <prvAddNewTaskToReadyList+0xd0>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	3301      	adds	r3, #1
 8005684:	4a1e      	ldr	r2, [pc, #120]	@ (8005700 <prvAddNewTaskToReadyList+0xd0>)
 8005686:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005688:	4b1d      	ldr	r3, [pc, #116]	@ (8005700 <prvAddNewTaskToReadyList+0xd0>)
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005694:	4b1b      	ldr	r3, [pc, #108]	@ (8005704 <prvAddNewTaskToReadyList+0xd4>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	429a      	cmp	r2, r3
 800569a:	d903      	bls.n	80056a4 <prvAddNewTaskToReadyList+0x74>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056a0:	4a18      	ldr	r2, [pc, #96]	@ (8005704 <prvAddNewTaskToReadyList+0xd4>)
 80056a2:	6013      	str	r3, [r2, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056a8:	4613      	mov	r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	4413      	add	r3, r2
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	4a15      	ldr	r2, [pc, #84]	@ (8005708 <prvAddNewTaskToReadyList+0xd8>)
 80056b2:	441a      	add	r2, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	3304      	adds	r3, #4
 80056b8:	4619      	mov	r1, r3
 80056ba:	4610      	mov	r0, r2
 80056bc:	f7ff f803 	bl	80046c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80056c0:	f001 fc64 	bl	8006f8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80056c4:	4b0d      	ldr	r3, [pc, #52]	@ (80056fc <prvAddNewTaskToReadyList+0xcc>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00e      	beq.n	80056ea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80056cc:	4b0a      	ldr	r3, [pc, #40]	@ (80056f8 <prvAddNewTaskToReadyList+0xc8>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d207      	bcs.n	80056ea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80056da:	4b0c      	ldr	r3, [pc, #48]	@ (800570c <prvAddNewTaskToReadyList+0xdc>)
 80056dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056e0:	601a      	str	r2, [r3, #0]
 80056e2:	f3bf 8f4f 	dsb	sy
 80056e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056ea:	bf00      	nop
 80056ec:	3708      	adds	r7, #8
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	20000e30 	.word	0x20000e30
 80056f8:	2000095c 	.word	0x2000095c
 80056fc:	20000e3c 	.word	0x20000e3c
 8005700:	20000e4c 	.word	0x20000e4c
 8005704:	20000e38 	.word	0x20000e38
 8005708:	20000960 	.word	0x20000960
 800570c:	e000ed04 	.word	0xe000ed04

08005710 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005718:	2300      	movs	r3, #0
 800571a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d018      	beq.n	8005754 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005722:	4b14      	ldr	r3, [pc, #80]	@ (8005774 <vTaskDelay+0x64>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00b      	beq.n	8005742 <vTaskDelay+0x32>
	__asm volatile
 800572a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800572e:	f383 8811 	msr	BASEPRI, r3
 8005732:	f3bf 8f6f 	isb	sy
 8005736:	f3bf 8f4f 	dsb	sy
 800573a:	60bb      	str	r3, [r7, #8]
}
 800573c:	bf00      	nop
 800573e:	bf00      	nop
 8005740:	e7fd      	b.n	800573e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005742:	f000 f88b 	bl	800585c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005746:	2100      	movs	r1, #0
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 ff11 	bl	8006570 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800574e:	f000 f893 	bl	8005878 <xTaskResumeAll>
 8005752:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d107      	bne.n	800576a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800575a:	4b07      	ldr	r3, [pc, #28]	@ (8005778 <vTaskDelay+0x68>)
 800575c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005760:	601a      	str	r2, [r3, #0]
 8005762:	f3bf 8f4f 	dsb	sy
 8005766:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800576a:	bf00      	nop
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	20000e58 	.word	0x20000e58
 8005778:	e000ed04 	.word	0xe000ed04

0800577c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b08a      	sub	sp, #40	@ 0x28
 8005780:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005782:	2300      	movs	r3, #0
 8005784:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005786:	2300      	movs	r3, #0
 8005788:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800578a:	463a      	mov	r2, r7
 800578c:	1d39      	adds	r1, r7, #4
 800578e:	f107 0308 	add.w	r3, r7, #8
 8005792:	4618      	mov	r0, r3
 8005794:	f7fe ff36 	bl	8004604 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005798:	6839      	ldr	r1, [r7, #0]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	68ba      	ldr	r2, [r7, #8]
 800579e:	9202      	str	r2, [sp, #8]
 80057a0:	9301      	str	r3, [sp, #4]
 80057a2:	2300      	movs	r3, #0
 80057a4:	9300      	str	r3, [sp, #0]
 80057a6:	2300      	movs	r3, #0
 80057a8:	460a      	mov	r2, r1
 80057aa:	4924      	ldr	r1, [pc, #144]	@ (800583c <vTaskStartScheduler+0xc0>)
 80057ac:	4824      	ldr	r0, [pc, #144]	@ (8005840 <vTaskStartScheduler+0xc4>)
 80057ae:	f7ff fdf1 	bl	8005394 <xTaskCreateStatic>
 80057b2:	4603      	mov	r3, r0
 80057b4:	4a23      	ldr	r2, [pc, #140]	@ (8005844 <vTaskStartScheduler+0xc8>)
 80057b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80057b8:	4b22      	ldr	r3, [pc, #136]	@ (8005844 <vTaskStartScheduler+0xc8>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d002      	beq.n	80057c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80057c0:	2301      	movs	r3, #1
 80057c2:	617b      	str	r3, [r7, #20]
 80057c4:	e001      	b.n	80057ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80057c6:	2300      	movs	r3, #0
 80057c8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d102      	bne.n	80057d6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80057d0:	f000 ff22 	bl	8006618 <xTimerCreateTimerTask>
 80057d4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d11b      	bne.n	8005814 <vTaskStartScheduler+0x98>
	__asm volatile
 80057dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057e0:	f383 8811 	msr	BASEPRI, r3
 80057e4:	f3bf 8f6f 	isb	sy
 80057e8:	f3bf 8f4f 	dsb	sy
 80057ec:	613b      	str	r3, [r7, #16]
}
 80057ee:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80057f0:	4b15      	ldr	r3, [pc, #84]	@ (8005848 <vTaskStartScheduler+0xcc>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	3354      	adds	r3, #84	@ 0x54
 80057f6:	4a15      	ldr	r2, [pc, #84]	@ (800584c <vTaskStartScheduler+0xd0>)
 80057f8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80057fa:	4b15      	ldr	r3, [pc, #84]	@ (8005850 <vTaskStartScheduler+0xd4>)
 80057fc:	f04f 32ff 	mov.w	r2, #4294967295
 8005800:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005802:	4b14      	ldr	r3, [pc, #80]	@ (8005854 <vTaskStartScheduler+0xd8>)
 8005804:	2201      	movs	r2, #1
 8005806:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005808:	4b13      	ldr	r3, [pc, #76]	@ (8005858 <vTaskStartScheduler+0xdc>)
 800580a:	2200      	movs	r2, #0
 800580c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800580e:	f001 fae7 	bl	8006de0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005812:	e00f      	b.n	8005834 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800581a:	d10b      	bne.n	8005834 <vTaskStartScheduler+0xb8>
	__asm volatile
 800581c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005820:	f383 8811 	msr	BASEPRI, r3
 8005824:	f3bf 8f6f 	isb	sy
 8005828:	f3bf 8f4f 	dsb	sy
 800582c:	60fb      	str	r3, [r7, #12]
}
 800582e:	bf00      	nop
 8005830:	bf00      	nop
 8005832:	e7fd      	b.n	8005830 <vTaskStartScheduler+0xb4>
}
 8005834:	bf00      	nop
 8005836:	3718      	adds	r7, #24
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	080081d8 	.word	0x080081d8
 8005840:	08005e8d 	.word	0x08005e8d
 8005844:	20000e54 	.word	0x20000e54
 8005848:	2000095c 	.word	0x2000095c
 800584c:	2000001c 	.word	0x2000001c
 8005850:	20000e50 	.word	0x20000e50
 8005854:	20000e3c 	.word	0x20000e3c
 8005858:	20000e34 	.word	0x20000e34

0800585c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800585c:	b480      	push	{r7}
 800585e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005860:	4b04      	ldr	r3, [pc, #16]	@ (8005874 <vTaskSuspendAll+0x18>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	3301      	adds	r3, #1
 8005866:	4a03      	ldr	r2, [pc, #12]	@ (8005874 <vTaskSuspendAll+0x18>)
 8005868:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800586a:	bf00      	nop
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr
 8005874:	20000e58 	.word	0x20000e58

08005878 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800587e:	2300      	movs	r3, #0
 8005880:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005882:	2300      	movs	r3, #0
 8005884:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005886:	4b42      	ldr	r3, [pc, #264]	@ (8005990 <xTaskResumeAll+0x118>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d10b      	bne.n	80058a6 <xTaskResumeAll+0x2e>
	__asm volatile
 800588e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005892:	f383 8811 	msr	BASEPRI, r3
 8005896:	f3bf 8f6f 	isb	sy
 800589a:	f3bf 8f4f 	dsb	sy
 800589e:	603b      	str	r3, [r7, #0]
}
 80058a0:	bf00      	nop
 80058a2:	bf00      	nop
 80058a4:	e7fd      	b.n	80058a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80058a6:	f001 fb3f 	bl	8006f28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80058aa:	4b39      	ldr	r3, [pc, #228]	@ (8005990 <xTaskResumeAll+0x118>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	3b01      	subs	r3, #1
 80058b0:	4a37      	ldr	r2, [pc, #220]	@ (8005990 <xTaskResumeAll+0x118>)
 80058b2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058b4:	4b36      	ldr	r3, [pc, #216]	@ (8005990 <xTaskResumeAll+0x118>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d162      	bne.n	8005982 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80058bc:	4b35      	ldr	r3, [pc, #212]	@ (8005994 <xTaskResumeAll+0x11c>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d05e      	beq.n	8005982 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058c4:	e02f      	b.n	8005926 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058c6:	4b34      	ldr	r3, [pc, #208]	@ (8005998 <xTaskResumeAll+0x120>)
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	3318      	adds	r3, #24
 80058d2:	4618      	mov	r0, r3
 80058d4:	f7fe ff54 	bl	8004780 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	3304      	adds	r3, #4
 80058dc:	4618      	mov	r0, r3
 80058de:	f7fe ff4f 	bl	8004780 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058e6:	4b2d      	ldr	r3, [pc, #180]	@ (800599c <xTaskResumeAll+0x124>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d903      	bls.n	80058f6 <xTaskResumeAll+0x7e>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f2:	4a2a      	ldr	r2, [pc, #168]	@ (800599c <xTaskResumeAll+0x124>)
 80058f4:	6013      	str	r3, [r2, #0]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058fa:	4613      	mov	r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	4413      	add	r3, r2
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	4a27      	ldr	r2, [pc, #156]	@ (80059a0 <xTaskResumeAll+0x128>)
 8005904:	441a      	add	r2, r3
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	3304      	adds	r3, #4
 800590a:	4619      	mov	r1, r3
 800590c:	4610      	mov	r0, r2
 800590e:	f7fe feda 	bl	80046c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005916:	4b23      	ldr	r3, [pc, #140]	@ (80059a4 <xTaskResumeAll+0x12c>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800591c:	429a      	cmp	r2, r3
 800591e:	d302      	bcc.n	8005926 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005920:	4b21      	ldr	r3, [pc, #132]	@ (80059a8 <xTaskResumeAll+0x130>)
 8005922:	2201      	movs	r2, #1
 8005924:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005926:	4b1c      	ldr	r3, [pc, #112]	@ (8005998 <xTaskResumeAll+0x120>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1cb      	bne.n	80058c6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d001      	beq.n	8005938 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005934:	f000 fb66 	bl	8006004 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005938:	4b1c      	ldr	r3, [pc, #112]	@ (80059ac <xTaskResumeAll+0x134>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d010      	beq.n	8005966 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005944:	f000 f846 	bl	80059d4 <xTaskIncrementTick>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d002      	beq.n	8005954 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800594e:	4b16      	ldr	r3, [pc, #88]	@ (80059a8 <xTaskResumeAll+0x130>)
 8005950:	2201      	movs	r2, #1
 8005952:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	3b01      	subs	r3, #1
 8005958:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d1f1      	bne.n	8005944 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005960:	4b12      	ldr	r3, [pc, #72]	@ (80059ac <xTaskResumeAll+0x134>)
 8005962:	2200      	movs	r2, #0
 8005964:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005966:	4b10      	ldr	r3, [pc, #64]	@ (80059a8 <xTaskResumeAll+0x130>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d009      	beq.n	8005982 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800596e:	2301      	movs	r3, #1
 8005970:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005972:	4b0f      	ldr	r3, [pc, #60]	@ (80059b0 <xTaskResumeAll+0x138>)
 8005974:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005978:	601a      	str	r2, [r3, #0]
 800597a:	f3bf 8f4f 	dsb	sy
 800597e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005982:	f001 fb03 	bl	8006f8c <vPortExitCritical>

	return xAlreadyYielded;
 8005986:	68bb      	ldr	r3, [r7, #8]
}
 8005988:	4618      	mov	r0, r3
 800598a:	3710      	adds	r7, #16
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	20000e58 	.word	0x20000e58
 8005994:	20000e30 	.word	0x20000e30
 8005998:	20000df0 	.word	0x20000df0
 800599c:	20000e38 	.word	0x20000e38
 80059a0:	20000960 	.word	0x20000960
 80059a4:	2000095c 	.word	0x2000095c
 80059a8:	20000e44 	.word	0x20000e44
 80059ac:	20000e40 	.word	0x20000e40
 80059b0:	e000ed04 	.word	0xe000ed04

080059b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80059ba:	4b05      	ldr	r3, [pc, #20]	@ (80059d0 <xTaskGetTickCount+0x1c>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80059c0:	687b      	ldr	r3, [r7, #4]
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	370c      	adds	r7, #12
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	20000e34 	.word	0x20000e34

080059d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b086      	sub	sp, #24
 80059d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80059da:	2300      	movs	r3, #0
 80059dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059de:	4b4f      	ldr	r3, [pc, #316]	@ (8005b1c <xTaskIncrementTick+0x148>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	f040 8090 	bne.w	8005b08 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80059e8:	4b4d      	ldr	r3, [pc, #308]	@ (8005b20 <xTaskIncrementTick+0x14c>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	3301      	adds	r3, #1
 80059ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80059f0:	4a4b      	ldr	r2, [pc, #300]	@ (8005b20 <xTaskIncrementTick+0x14c>)
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d121      	bne.n	8005a40 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80059fc:	4b49      	ldr	r3, [pc, #292]	@ (8005b24 <xTaskIncrementTick+0x150>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00b      	beq.n	8005a1e <xTaskIncrementTick+0x4a>
	__asm volatile
 8005a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a0a:	f383 8811 	msr	BASEPRI, r3
 8005a0e:	f3bf 8f6f 	isb	sy
 8005a12:	f3bf 8f4f 	dsb	sy
 8005a16:	603b      	str	r3, [r7, #0]
}
 8005a18:	bf00      	nop
 8005a1a:	bf00      	nop
 8005a1c:	e7fd      	b.n	8005a1a <xTaskIncrementTick+0x46>
 8005a1e:	4b41      	ldr	r3, [pc, #260]	@ (8005b24 <xTaskIncrementTick+0x150>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	60fb      	str	r3, [r7, #12]
 8005a24:	4b40      	ldr	r3, [pc, #256]	@ (8005b28 <xTaskIncrementTick+0x154>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a3e      	ldr	r2, [pc, #248]	@ (8005b24 <xTaskIncrementTick+0x150>)
 8005a2a:	6013      	str	r3, [r2, #0]
 8005a2c:	4a3e      	ldr	r2, [pc, #248]	@ (8005b28 <xTaskIncrementTick+0x154>)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6013      	str	r3, [r2, #0]
 8005a32:	4b3e      	ldr	r3, [pc, #248]	@ (8005b2c <xTaskIncrementTick+0x158>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	3301      	adds	r3, #1
 8005a38:	4a3c      	ldr	r2, [pc, #240]	@ (8005b2c <xTaskIncrementTick+0x158>)
 8005a3a:	6013      	str	r3, [r2, #0]
 8005a3c:	f000 fae2 	bl	8006004 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005a40:	4b3b      	ldr	r3, [pc, #236]	@ (8005b30 <xTaskIncrementTick+0x15c>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d349      	bcc.n	8005ade <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a4a:	4b36      	ldr	r3, [pc, #216]	@ (8005b24 <xTaskIncrementTick+0x150>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d104      	bne.n	8005a5e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a54:	4b36      	ldr	r3, [pc, #216]	@ (8005b30 <xTaskIncrementTick+0x15c>)
 8005a56:	f04f 32ff 	mov.w	r2, #4294967295
 8005a5a:	601a      	str	r2, [r3, #0]
					break;
 8005a5c:	e03f      	b.n	8005ade <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a5e:	4b31      	ldr	r3, [pc, #196]	@ (8005b24 <xTaskIncrementTick+0x150>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d203      	bcs.n	8005a7e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005a76:	4a2e      	ldr	r2, [pc, #184]	@ (8005b30 <xTaskIncrementTick+0x15c>)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005a7c:	e02f      	b.n	8005ade <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	3304      	adds	r3, #4
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7fe fe7c 	bl	8004780 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d004      	beq.n	8005a9a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	3318      	adds	r3, #24
 8005a94:	4618      	mov	r0, r3
 8005a96:	f7fe fe73 	bl	8004780 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a9e:	4b25      	ldr	r3, [pc, #148]	@ (8005b34 <xTaskIncrementTick+0x160>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d903      	bls.n	8005aae <xTaskIncrementTick+0xda>
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aaa:	4a22      	ldr	r2, [pc, #136]	@ (8005b34 <xTaskIncrementTick+0x160>)
 8005aac:	6013      	str	r3, [r2, #0]
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	4413      	add	r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	4a1f      	ldr	r2, [pc, #124]	@ (8005b38 <xTaskIncrementTick+0x164>)
 8005abc:	441a      	add	r2, r3
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	3304      	adds	r3, #4
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	4610      	mov	r0, r2
 8005ac6:	f7fe fdfe 	bl	80046c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ace:	4b1b      	ldr	r3, [pc, #108]	@ (8005b3c <xTaskIncrementTick+0x168>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d3b8      	bcc.n	8005a4a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005adc:	e7b5      	b.n	8005a4a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005ade:	4b17      	ldr	r3, [pc, #92]	@ (8005b3c <xTaskIncrementTick+0x168>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ae4:	4914      	ldr	r1, [pc, #80]	@ (8005b38 <xTaskIncrementTick+0x164>)
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	4413      	add	r3, r2
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	440b      	add	r3, r1
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d901      	bls.n	8005afa <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005af6:	2301      	movs	r3, #1
 8005af8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005afa:	4b11      	ldr	r3, [pc, #68]	@ (8005b40 <xTaskIncrementTick+0x16c>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d007      	beq.n	8005b12 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005b02:	2301      	movs	r3, #1
 8005b04:	617b      	str	r3, [r7, #20]
 8005b06:	e004      	b.n	8005b12 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005b08:	4b0e      	ldr	r3, [pc, #56]	@ (8005b44 <xTaskIncrementTick+0x170>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	3301      	adds	r3, #1
 8005b0e:	4a0d      	ldr	r2, [pc, #52]	@ (8005b44 <xTaskIncrementTick+0x170>)
 8005b10:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005b12:	697b      	ldr	r3, [r7, #20]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3718      	adds	r7, #24
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	20000e58 	.word	0x20000e58
 8005b20:	20000e34 	.word	0x20000e34
 8005b24:	20000de8 	.word	0x20000de8
 8005b28:	20000dec 	.word	0x20000dec
 8005b2c:	20000e48 	.word	0x20000e48
 8005b30:	20000e50 	.word	0x20000e50
 8005b34:	20000e38 	.word	0x20000e38
 8005b38:	20000960 	.word	0x20000960
 8005b3c:	2000095c 	.word	0x2000095c
 8005b40:	20000e44 	.word	0x20000e44
 8005b44:	20000e40 	.word	0x20000e40

08005b48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005b4e:	4b2b      	ldr	r3, [pc, #172]	@ (8005bfc <vTaskSwitchContext+0xb4>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d003      	beq.n	8005b5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005b56:	4b2a      	ldr	r3, [pc, #168]	@ (8005c00 <vTaskSwitchContext+0xb8>)
 8005b58:	2201      	movs	r2, #1
 8005b5a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005b5c:	e047      	b.n	8005bee <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005b5e:	4b28      	ldr	r3, [pc, #160]	@ (8005c00 <vTaskSwitchContext+0xb8>)
 8005b60:	2200      	movs	r2, #0
 8005b62:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b64:	4b27      	ldr	r3, [pc, #156]	@ (8005c04 <vTaskSwitchContext+0xbc>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	60fb      	str	r3, [r7, #12]
 8005b6a:	e011      	b.n	8005b90 <vTaskSwitchContext+0x48>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d10b      	bne.n	8005b8a <vTaskSwitchContext+0x42>
	__asm volatile
 8005b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b76:	f383 8811 	msr	BASEPRI, r3
 8005b7a:	f3bf 8f6f 	isb	sy
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	607b      	str	r3, [r7, #4]
}
 8005b84:	bf00      	nop
 8005b86:	bf00      	nop
 8005b88:	e7fd      	b.n	8005b86 <vTaskSwitchContext+0x3e>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	60fb      	str	r3, [r7, #12]
 8005b90:	491d      	ldr	r1, [pc, #116]	@ (8005c08 <vTaskSwitchContext+0xc0>)
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	4613      	mov	r3, r2
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	4413      	add	r3, r2
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	440b      	add	r3, r1
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d0e3      	beq.n	8005b6c <vTaskSwitchContext+0x24>
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	4413      	add	r3, r2
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	4a16      	ldr	r2, [pc, #88]	@ (8005c08 <vTaskSwitchContext+0xc0>)
 8005bb0:	4413      	add	r3, r2
 8005bb2:	60bb      	str	r3, [r7, #8]
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	685a      	ldr	r2, [r3, #4]
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	605a      	str	r2, [r3, #4]
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	685a      	ldr	r2, [r3, #4]
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	3308      	adds	r3, #8
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d104      	bne.n	8005bd4 <vTaskSwitchContext+0x8c>
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	685a      	ldr	r2, [r3, #4]
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	605a      	str	r2, [r3, #4]
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	4a0c      	ldr	r2, [pc, #48]	@ (8005c0c <vTaskSwitchContext+0xc4>)
 8005bdc:	6013      	str	r3, [r2, #0]
 8005bde:	4a09      	ldr	r2, [pc, #36]	@ (8005c04 <vTaskSwitchContext+0xbc>)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005be4:	4b09      	ldr	r3, [pc, #36]	@ (8005c0c <vTaskSwitchContext+0xc4>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	3354      	adds	r3, #84	@ 0x54
 8005bea:	4a09      	ldr	r2, [pc, #36]	@ (8005c10 <vTaskSwitchContext+0xc8>)
 8005bec:	6013      	str	r3, [r2, #0]
}
 8005bee:	bf00      	nop
 8005bf0:	3714      	adds	r7, #20
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	20000e58 	.word	0x20000e58
 8005c00:	20000e44 	.word	0x20000e44
 8005c04:	20000e38 	.word	0x20000e38
 8005c08:	20000960 	.word	0x20000960
 8005c0c:	2000095c 	.word	0x2000095c
 8005c10:	2000001c 	.word	0x2000001c

08005c14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d10b      	bne.n	8005c3c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c28:	f383 8811 	msr	BASEPRI, r3
 8005c2c:	f3bf 8f6f 	isb	sy
 8005c30:	f3bf 8f4f 	dsb	sy
 8005c34:	60fb      	str	r3, [r7, #12]
}
 8005c36:	bf00      	nop
 8005c38:	bf00      	nop
 8005c3a:	e7fd      	b.n	8005c38 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c3c:	4b07      	ldr	r3, [pc, #28]	@ (8005c5c <vTaskPlaceOnEventList+0x48>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	3318      	adds	r3, #24
 8005c42:	4619      	mov	r1, r3
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f7fe fd62 	bl	800470e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005c4a:	2101      	movs	r1, #1
 8005c4c:	6838      	ldr	r0, [r7, #0]
 8005c4e:	f000 fc8f 	bl	8006570 <prvAddCurrentTaskToDelayedList>
}
 8005c52:	bf00      	nop
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	2000095c 	.word	0x2000095c

08005c60 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d10b      	bne.n	8005c8a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c76:	f383 8811 	msr	BASEPRI, r3
 8005c7a:	f3bf 8f6f 	isb	sy
 8005c7e:	f3bf 8f4f 	dsb	sy
 8005c82:	617b      	str	r3, [r7, #20]
}
 8005c84:	bf00      	nop
 8005c86:	bf00      	nop
 8005c88:	e7fd      	b.n	8005c86 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8005cb4 <vTaskPlaceOnEventListRestricted+0x54>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	3318      	adds	r3, #24
 8005c90:	4619      	mov	r1, r3
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	f7fe fd17 	bl	80046c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d002      	beq.n	8005ca4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8005ca2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005ca4:	6879      	ldr	r1, [r7, #4]
 8005ca6:	68b8      	ldr	r0, [r7, #8]
 8005ca8:	f000 fc62 	bl	8006570 <prvAddCurrentTaskToDelayedList>
	}
 8005cac:	bf00      	nop
 8005cae:	3718      	adds	r7, #24
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	2000095c 	.word	0x2000095c

08005cb8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b086      	sub	sp, #24
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10b      	bne.n	8005ce6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cd2:	f383 8811 	msr	BASEPRI, r3
 8005cd6:	f3bf 8f6f 	isb	sy
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	60fb      	str	r3, [r7, #12]
}
 8005ce0:	bf00      	nop
 8005ce2:	bf00      	nop
 8005ce4:	e7fd      	b.n	8005ce2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	3318      	adds	r3, #24
 8005cea:	4618      	mov	r0, r3
 8005cec:	f7fe fd48 	bl	8004780 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cf0:	4b1d      	ldr	r3, [pc, #116]	@ (8005d68 <xTaskRemoveFromEventList+0xb0>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d11d      	bne.n	8005d34 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	3304      	adds	r3, #4
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f7fe fd3f 	bl	8004780 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d06:	4b19      	ldr	r3, [pc, #100]	@ (8005d6c <xTaskRemoveFromEventList+0xb4>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d903      	bls.n	8005d16 <xTaskRemoveFromEventList+0x5e>
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d12:	4a16      	ldr	r2, [pc, #88]	@ (8005d6c <xTaskRemoveFromEventList+0xb4>)
 8005d14:	6013      	str	r3, [r2, #0]
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	4413      	add	r3, r2
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	4a13      	ldr	r2, [pc, #76]	@ (8005d70 <xTaskRemoveFromEventList+0xb8>)
 8005d24:	441a      	add	r2, r3
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	3304      	adds	r3, #4
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	4610      	mov	r0, r2
 8005d2e:	f7fe fcca 	bl	80046c6 <vListInsertEnd>
 8005d32:	e005      	b.n	8005d40 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	3318      	adds	r3, #24
 8005d38:	4619      	mov	r1, r3
 8005d3a:	480e      	ldr	r0, [pc, #56]	@ (8005d74 <xTaskRemoveFromEventList+0xbc>)
 8005d3c:	f7fe fcc3 	bl	80046c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d44:	4b0c      	ldr	r3, [pc, #48]	@ (8005d78 <xTaskRemoveFromEventList+0xc0>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d905      	bls.n	8005d5a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005d52:	4b0a      	ldr	r3, [pc, #40]	@ (8005d7c <xTaskRemoveFromEventList+0xc4>)
 8005d54:	2201      	movs	r2, #1
 8005d56:	601a      	str	r2, [r3, #0]
 8005d58:	e001      	b.n	8005d5e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005d5e:	697b      	ldr	r3, [r7, #20]
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3718      	adds	r7, #24
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	20000e58 	.word	0x20000e58
 8005d6c:	20000e38 	.word	0x20000e38
 8005d70:	20000960 	.word	0x20000960
 8005d74:	20000df0 	.word	0x20000df0
 8005d78:	2000095c 	.word	0x2000095c
 8005d7c:	20000e44 	.word	0x20000e44

08005d80 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d88:	4b06      	ldr	r3, [pc, #24]	@ (8005da4 <vTaskInternalSetTimeOutState+0x24>)
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005d90:	4b05      	ldr	r3, [pc, #20]	@ (8005da8 <vTaskInternalSetTimeOutState+0x28>)
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	605a      	str	r2, [r3, #4]
}
 8005d98:	bf00      	nop
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr
 8005da4:	20000e48 	.word	0x20000e48
 8005da8:	20000e34 	.word	0x20000e34

08005dac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b088      	sub	sp, #32
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10b      	bne.n	8005dd4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc0:	f383 8811 	msr	BASEPRI, r3
 8005dc4:	f3bf 8f6f 	isb	sy
 8005dc8:	f3bf 8f4f 	dsb	sy
 8005dcc:	613b      	str	r3, [r7, #16]
}
 8005dce:	bf00      	nop
 8005dd0:	bf00      	nop
 8005dd2:	e7fd      	b.n	8005dd0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d10b      	bne.n	8005df2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dde:	f383 8811 	msr	BASEPRI, r3
 8005de2:	f3bf 8f6f 	isb	sy
 8005de6:	f3bf 8f4f 	dsb	sy
 8005dea:	60fb      	str	r3, [r7, #12]
}
 8005dec:	bf00      	nop
 8005dee:	bf00      	nop
 8005df0:	e7fd      	b.n	8005dee <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005df2:	f001 f899 	bl	8006f28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005df6:	4b1d      	ldr	r3, [pc, #116]	@ (8005e6c <xTaskCheckForTimeOut+0xc0>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	69ba      	ldr	r2, [r7, #24]
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e0e:	d102      	bne.n	8005e16 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005e10:	2300      	movs	r3, #0
 8005e12:	61fb      	str	r3, [r7, #28]
 8005e14:	e023      	b.n	8005e5e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	4b15      	ldr	r3, [pc, #84]	@ (8005e70 <xTaskCheckForTimeOut+0xc4>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d007      	beq.n	8005e32 <xTaskCheckForTimeOut+0x86>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	69ba      	ldr	r2, [r7, #24]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d302      	bcc.n	8005e32 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	61fb      	str	r3, [r7, #28]
 8005e30:	e015      	b.n	8005e5e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d20b      	bcs.n	8005e54 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	1ad2      	subs	r2, r2, r3
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f7ff ff99 	bl	8005d80 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	61fb      	str	r3, [r7, #28]
 8005e52:	e004      	b.n	8005e5e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	2200      	movs	r2, #0
 8005e58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005e5e:	f001 f895 	bl	8006f8c <vPortExitCritical>

	return xReturn;
 8005e62:	69fb      	ldr	r3, [r7, #28]
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3720      	adds	r7, #32
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	20000e34 	.word	0x20000e34
 8005e70:	20000e48 	.word	0x20000e48

08005e74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005e74:	b480      	push	{r7}
 8005e76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005e78:	4b03      	ldr	r3, [pc, #12]	@ (8005e88 <vTaskMissedYield+0x14>)
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	601a      	str	r2, [r3, #0]
}
 8005e7e:	bf00      	nop
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr
 8005e88:	20000e44 	.word	0x20000e44

08005e8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005e94:	f000 f852 	bl	8005f3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e98:	4b06      	ldr	r3, [pc, #24]	@ (8005eb4 <prvIdleTask+0x28>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d9f9      	bls.n	8005e94 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005ea0:	4b05      	ldr	r3, [pc, #20]	@ (8005eb8 <prvIdleTask+0x2c>)
 8005ea2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ea6:	601a      	str	r2, [r3, #0]
 8005ea8:	f3bf 8f4f 	dsb	sy
 8005eac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005eb0:	e7f0      	b.n	8005e94 <prvIdleTask+0x8>
 8005eb2:	bf00      	nop
 8005eb4:	20000960 	.word	0x20000960
 8005eb8:	e000ed04 	.word	0xe000ed04

08005ebc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	607b      	str	r3, [r7, #4]
 8005ec6:	e00c      	b.n	8005ee2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	4613      	mov	r3, r2
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	4413      	add	r3, r2
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	4a12      	ldr	r2, [pc, #72]	@ (8005f1c <prvInitialiseTaskLists+0x60>)
 8005ed4:	4413      	add	r3, r2
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7fe fbc8 	bl	800466c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	3301      	adds	r3, #1
 8005ee0:	607b      	str	r3, [r7, #4]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2b37      	cmp	r3, #55	@ 0x37
 8005ee6:	d9ef      	bls.n	8005ec8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005ee8:	480d      	ldr	r0, [pc, #52]	@ (8005f20 <prvInitialiseTaskLists+0x64>)
 8005eea:	f7fe fbbf 	bl	800466c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005eee:	480d      	ldr	r0, [pc, #52]	@ (8005f24 <prvInitialiseTaskLists+0x68>)
 8005ef0:	f7fe fbbc 	bl	800466c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005ef4:	480c      	ldr	r0, [pc, #48]	@ (8005f28 <prvInitialiseTaskLists+0x6c>)
 8005ef6:	f7fe fbb9 	bl	800466c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005efa:	480c      	ldr	r0, [pc, #48]	@ (8005f2c <prvInitialiseTaskLists+0x70>)
 8005efc:	f7fe fbb6 	bl	800466c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005f00:	480b      	ldr	r0, [pc, #44]	@ (8005f30 <prvInitialiseTaskLists+0x74>)
 8005f02:	f7fe fbb3 	bl	800466c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005f06:	4b0b      	ldr	r3, [pc, #44]	@ (8005f34 <prvInitialiseTaskLists+0x78>)
 8005f08:	4a05      	ldr	r2, [pc, #20]	@ (8005f20 <prvInitialiseTaskLists+0x64>)
 8005f0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8005f38 <prvInitialiseTaskLists+0x7c>)
 8005f0e:	4a05      	ldr	r2, [pc, #20]	@ (8005f24 <prvInitialiseTaskLists+0x68>)
 8005f10:	601a      	str	r2, [r3, #0]
}
 8005f12:	bf00      	nop
 8005f14:	3708      	adds	r7, #8
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	20000960 	.word	0x20000960
 8005f20:	20000dc0 	.word	0x20000dc0
 8005f24:	20000dd4 	.word	0x20000dd4
 8005f28:	20000df0 	.word	0x20000df0
 8005f2c:	20000e04 	.word	0x20000e04
 8005f30:	20000e1c 	.word	0x20000e1c
 8005f34:	20000de8 	.word	0x20000de8
 8005f38:	20000dec 	.word	0x20000dec

08005f3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b082      	sub	sp, #8
 8005f40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f42:	e019      	b.n	8005f78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005f44:	f000 fff0 	bl	8006f28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f48:	4b10      	ldr	r3, [pc, #64]	@ (8005f8c <prvCheckTasksWaitingTermination+0x50>)
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	3304      	adds	r3, #4
 8005f54:	4618      	mov	r0, r3
 8005f56:	f7fe fc13 	bl	8004780 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8005f90 <prvCheckTasksWaitingTermination+0x54>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	4a0b      	ldr	r2, [pc, #44]	@ (8005f90 <prvCheckTasksWaitingTermination+0x54>)
 8005f62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005f64:	4b0b      	ldr	r3, [pc, #44]	@ (8005f94 <prvCheckTasksWaitingTermination+0x58>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	3b01      	subs	r3, #1
 8005f6a:	4a0a      	ldr	r2, [pc, #40]	@ (8005f94 <prvCheckTasksWaitingTermination+0x58>)
 8005f6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005f6e:	f001 f80d 	bl	8006f8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 f810 	bl	8005f98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f78:	4b06      	ldr	r3, [pc, #24]	@ (8005f94 <prvCheckTasksWaitingTermination+0x58>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d1e1      	bne.n	8005f44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005f80:	bf00      	nop
 8005f82:	bf00      	nop
 8005f84:	3708      	adds	r7, #8
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	20000e04 	.word	0x20000e04
 8005f90:	20000e30 	.word	0x20000e30
 8005f94:	20000e18 	.word	0x20000e18

08005f98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	3354      	adds	r3, #84	@ 0x54
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f001 faf9 	bl	800759c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d108      	bne.n	8005fc6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f001 f9a5 	bl	8007308 <vPortFree>
				vPortFree( pxTCB );
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f001 f9a2 	bl	8007308 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005fc4:	e019      	b.n	8005ffa <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d103      	bne.n	8005fd8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f001 f999 	bl	8007308 <vPortFree>
	}
 8005fd6:	e010      	b.n	8005ffa <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005fde:	2b02      	cmp	r3, #2
 8005fe0:	d00b      	beq.n	8005ffa <prvDeleteTCB+0x62>
	__asm volatile
 8005fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fe6:	f383 8811 	msr	BASEPRI, r3
 8005fea:	f3bf 8f6f 	isb	sy
 8005fee:	f3bf 8f4f 	dsb	sy
 8005ff2:	60fb      	str	r3, [r7, #12]
}
 8005ff4:	bf00      	nop
 8005ff6:	bf00      	nop
 8005ff8:	e7fd      	b.n	8005ff6 <prvDeleteTCB+0x5e>
	}
 8005ffa:	bf00      	nop
 8005ffc:	3710      	adds	r7, #16
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
	...

08006004 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800600a:	4b0c      	ldr	r3, [pc, #48]	@ (800603c <prvResetNextTaskUnblockTime+0x38>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d104      	bne.n	800601e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006014:	4b0a      	ldr	r3, [pc, #40]	@ (8006040 <prvResetNextTaskUnblockTime+0x3c>)
 8006016:	f04f 32ff 	mov.w	r2, #4294967295
 800601a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800601c:	e008      	b.n	8006030 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800601e:	4b07      	ldr	r3, [pc, #28]	@ (800603c <prvResetNextTaskUnblockTime+0x38>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	4a04      	ldr	r2, [pc, #16]	@ (8006040 <prvResetNextTaskUnblockTime+0x3c>)
 800602e:	6013      	str	r3, [r2, #0]
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr
 800603c:	20000de8 	.word	0x20000de8
 8006040:	20000e50 	.word	0x20000e50

08006044 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800604a:	4b0b      	ldr	r3, [pc, #44]	@ (8006078 <xTaskGetSchedulerState+0x34>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d102      	bne.n	8006058 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006052:	2301      	movs	r3, #1
 8006054:	607b      	str	r3, [r7, #4]
 8006056:	e008      	b.n	800606a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006058:	4b08      	ldr	r3, [pc, #32]	@ (800607c <xTaskGetSchedulerState+0x38>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d102      	bne.n	8006066 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006060:	2302      	movs	r3, #2
 8006062:	607b      	str	r3, [r7, #4]
 8006064:	e001      	b.n	800606a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006066:	2300      	movs	r3, #0
 8006068:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800606a:	687b      	ldr	r3, [r7, #4]
	}
 800606c:	4618      	mov	r0, r3
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr
 8006078:	20000e3c 	.word	0x20000e3c
 800607c:	20000e58 	.word	0x20000e58

08006080 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006080:	b580      	push	{r7, lr}
 8006082:	b086      	sub	sp, #24
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800608c:	2300      	movs	r3, #0
 800608e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d058      	beq.n	8006148 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006096:	4b2f      	ldr	r3, [pc, #188]	@ (8006154 <xTaskPriorityDisinherit+0xd4>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	693a      	ldr	r2, [r7, #16]
 800609c:	429a      	cmp	r2, r3
 800609e:	d00b      	beq.n	80060b8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80060a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060a4:	f383 8811 	msr	BASEPRI, r3
 80060a8:	f3bf 8f6f 	isb	sy
 80060ac:	f3bf 8f4f 	dsb	sy
 80060b0:	60fb      	str	r3, [r7, #12]
}
 80060b2:	bf00      	nop
 80060b4:	bf00      	nop
 80060b6:	e7fd      	b.n	80060b4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10b      	bne.n	80060d8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80060c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c4:	f383 8811 	msr	BASEPRI, r3
 80060c8:	f3bf 8f6f 	isb	sy
 80060cc:	f3bf 8f4f 	dsb	sy
 80060d0:	60bb      	str	r3, [r7, #8]
}
 80060d2:	bf00      	nop
 80060d4:	bf00      	nop
 80060d6:	e7fd      	b.n	80060d4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060dc:	1e5a      	subs	r2, r3, #1
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d02c      	beq.n	8006148 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d128      	bne.n	8006148 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	3304      	adds	r3, #4
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7fe fb40 	bl	8004780 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800610c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006118:	4b0f      	ldr	r3, [pc, #60]	@ (8006158 <xTaskPriorityDisinherit+0xd8>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	429a      	cmp	r2, r3
 800611e:	d903      	bls.n	8006128 <xTaskPriorityDisinherit+0xa8>
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006124:	4a0c      	ldr	r2, [pc, #48]	@ (8006158 <xTaskPriorityDisinherit+0xd8>)
 8006126:	6013      	str	r3, [r2, #0]
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800612c:	4613      	mov	r3, r2
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	4413      	add	r3, r2
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	4a09      	ldr	r2, [pc, #36]	@ (800615c <xTaskPriorityDisinherit+0xdc>)
 8006136:	441a      	add	r2, r3
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	3304      	adds	r3, #4
 800613c:	4619      	mov	r1, r3
 800613e:	4610      	mov	r0, r2
 8006140:	f7fe fac1 	bl	80046c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006144:	2301      	movs	r3, #1
 8006146:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006148:	697b      	ldr	r3, [r7, #20]
	}
 800614a:	4618      	mov	r0, r3
 800614c:	3718      	adds	r7, #24
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	2000095c 	.word	0x2000095c
 8006158:	20000e38 	.word	0x20000e38
 800615c:	20000960 	.word	0x20000960

08006160 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8006160:	b580      	push	{r7, lr}
 8006162:	b086      	sub	sp, #24
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
 800616c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800616e:	f000 fedb 	bl	8006f28 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006172:	4b29      	ldr	r3, [pc, #164]	@ (8006218 <xTaskNotifyWait+0xb8>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800617a:	b2db      	uxtb	r3, r3
 800617c:	2b02      	cmp	r3, #2
 800617e:	d01c      	beq.n	80061ba <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8006180:	4b25      	ldr	r3, [pc, #148]	@ (8006218 <xTaskNotifyWait+0xb8>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	43d2      	mvns	r2, r2
 800618c:	400a      	ands	r2, r1
 800618e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006192:	4b21      	ldr	r3, [pc, #132]	@ (8006218 <xTaskNotifyWait+0xb8>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00b      	beq.n	80061ba <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80061a2:	2101      	movs	r1, #1
 80061a4:	6838      	ldr	r0, [r7, #0]
 80061a6:	f000 f9e3 	bl	8006570 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80061aa:	4b1c      	ldr	r3, [pc, #112]	@ (800621c <xTaskNotifyWait+0xbc>)
 80061ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061b0:	601a      	str	r2, [r3, #0]
 80061b2:	f3bf 8f4f 	dsb	sy
 80061b6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80061ba:	f000 fee7 	bl	8006f8c <vPortExitCritical>

		taskENTER_CRITICAL();
 80061be:	f000 feb3 	bl	8006f28 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d005      	beq.n	80061d4 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80061c8:	4b13      	ldr	r3, [pc, #76]	@ (8006218 <xTaskNotifyWait+0xb8>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80061d4:	4b10      	ldr	r3, [pc, #64]	@ (8006218 <xTaskNotifyWait+0xb8>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d002      	beq.n	80061e8 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80061e2:	2300      	movs	r3, #0
 80061e4:	617b      	str	r3, [r7, #20]
 80061e6:	e00a      	b.n	80061fe <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80061e8:	4b0b      	ldr	r3, [pc, #44]	@ (8006218 <xTaskNotifyWait+0xb8>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 80061f0:	68ba      	ldr	r2, [r7, #8]
 80061f2:	43d2      	mvns	r2, r2
 80061f4:	400a      	ands	r2, r1
 80061f6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 80061fa:	2301      	movs	r3, #1
 80061fc:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80061fe:	4b06      	ldr	r3, [pc, #24]	@ (8006218 <xTaskNotifyWait+0xb8>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2200      	movs	r2, #0
 8006204:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8006208:	f000 fec0 	bl	8006f8c <vPortExitCritical>

		return xReturn;
 800620c:	697b      	ldr	r3, [r7, #20]
	}
 800620e:	4618      	mov	r0, r3
 8006210:	3718      	adds	r7, #24
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	2000095c 	.word	0x2000095c
 800621c:	e000ed04 	.word	0xe000ed04

08006220 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8006220:	b580      	push	{r7, lr}
 8006222:	b08a      	sub	sp, #40	@ 0x28
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	603b      	str	r3, [r7, #0]
 800622c:	4613      	mov	r3, r2
 800622e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8006230:	2301      	movs	r3, #1
 8006232:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d10b      	bne.n	8006252 <xTaskGenericNotify+0x32>
	__asm volatile
 800623a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800623e:	f383 8811 	msr	BASEPRI, r3
 8006242:	f3bf 8f6f 	isb	sy
 8006246:	f3bf 8f4f 	dsb	sy
 800624a:	61bb      	str	r3, [r7, #24]
}
 800624c:	bf00      	nop
 800624e:	bf00      	nop
 8006250:	e7fd      	b.n	800624e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8006256:	f000 fe67 	bl	8006f28 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d004      	beq.n	800626a <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006260:	6a3b      	ldr	r3, [r7, #32]
 8006262:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800626a:	6a3b      	ldr	r3, [r7, #32]
 800626c:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8006270:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006272:	6a3b      	ldr	r3, [r7, #32]
 8006274:	2202      	movs	r2, #2
 8006276:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800627a:	79fb      	ldrb	r3, [r7, #7]
 800627c:	2b04      	cmp	r3, #4
 800627e:	d82e      	bhi.n	80062de <xTaskGenericNotify+0xbe>
 8006280:	a201      	add	r2, pc, #4	@ (adr r2, 8006288 <xTaskGenericNotify+0x68>)
 8006282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006286:	bf00      	nop
 8006288:	08006303 	.word	0x08006303
 800628c:	0800629d 	.word	0x0800629d
 8006290:	080062af 	.word	0x080062af
 8006294:	080062bf 	.word	0x080062bf
 8006298:	080062c9 	.word	0x080062c9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800629c:	6a3b      	ldr	r3, [r7, #32]
 800629e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	431a      	orrs	r2, r3
 80062a6:	6a3b      	ldr	r3, [r7, #32]
 80062a8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80062ac:	e02c      	b.n	8006308 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80062ae:	6a3b      	ldr	r3, [r7, #32]
 80062b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80062b4:	1c5a      	adds	r2, r3, #1
 80062b6:	6a3b      	ldr	r3, [r7, #32]
 80062b8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80062bc:	e024      	b.n	8006308 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80062be:	6a3b      	ldr	r3, [r7, #32]
 80062c0:	68ba      	ldr	r2, [r7, #8]
 80062c2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80062c6:	e01f      	b.n	8006308 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80062c8:	7ffb      	ldrb	r3, [r7, #31]
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d004      	beq.n	80062d8 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80062ce:	6a3b      	ldr	r3, [r7, #32]
 80062d0:	68ba      	ldr	r2, [r7, #8]
 80062d2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80062d6:	e017      	b.n	8006308 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 80062d8:	2300      	movs	r3, #0
 80062da:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 80062dc:	e014      	b.n	8006308 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80062de:	6a3b      	ldr	r3, [r7, #32]
 80062e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80062e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e8:	d00d      	beq.n	8006306 <xTaskGenericNotify+0xe6>
	__asm volatile
 80062ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ee:	f383 8811 	msr	BASEPRI, r3
 80062f2:	f3bf 8f6f 	isb	sy
 80062f6:	f3bf 8f4f 	dsb	sy
 80062fa:	617b      	str	r3, [r7, #20]
}
 80062fc:	bf00      	nop
 80062fe:	bf00      	nop
 8006300:	e7fd      	b.n	80062fe <xTaskGenericNotify+0xde>
					break;
 8006302:	bf00      	nop
 8006304:	e000      	b.n	8006308 <xTaskGenericNotify+0xe8>

					break;
 8006306:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006308:	7ffb      	ldrb	r3, [r7, #31]
 800630a:	2b01      	cmp	r3, #1
 800630c:	d13b      	bne.n	8006386 <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800630e:	6a3b      	ldr	r3, [r7, #32]
 8006310:	3304      	adds	r3, #4
 8006312:	4618      	mov	r0, r3
 8006314:	f7fe fa34 	bl	8004780 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8006318:	6a3b      	ldr	r3, [r7, #32]
 800631a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800631c:	4b1d      	ldr	r3, [pc, #116]	@ (8006394 <xTaskGenericNotify+0x174>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	429a      	cmp	r2, r3
 8006322:	d903      	bls.n	800632c <xTaskGenericNotify+0x10c>
 8006324:	6a3b      	ldr	r3, [r7, #32]
 8006326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006328:	4a1a      	ldr	r2, [pc, #104]	@ (8006394 <xTaskGenericNotify+0x174>)
 800632a:	6013      	str	r3, [r2, #0]
 800632c:	6a3b      	ldr	r3, [r7, #32]
 800632e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006330:	4613      	mov	r3, r2
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	4413      	add	r3, r2
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	4a17      	ldr	r2, [pc, #92]	@ (8006398 <xTaskGenericNotify+0x178>)
 800633a:	441a      	add	r2, r3
 800633c:	6a3b      	ldr	r3, [r7, #32]
 800633e:	3304      	adds	r3, #4
 8006340:	4619      	mov	r1, r3
 8006342:	4610      	mov	r0, r2
 8006344:	f7fe f9bf 	bl	80046c6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006348:	6a3b      	ldr	r3, [r7, #32]
 800634a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00b      	beq.n	8006368 <xTaskGenericNotify+0x148>
	__asm volatile
 8006350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006354:	f383 8811 	msr	BASEPRI, r3
 8006358:	f3bf 8f6f 	isb	sy
 800635c:	f3bf 8f4f 	dsb	sy
 8006360:	613b      	str	r3, [r7, #16]
}
 8006362:	bf00      	nop
 8006364:	bf00      	nop
 8006366:	e7fd      	b.n	8006364 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006368:	6a3b      	ldr	r3, [r7, #32]
 800636a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800636c:	4b0b      	ldr	r3, [pc, #44]	@ (800639c <xTaskGenericNotify+0x17c>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006372:	429a      	cmp	r2, r3
 8006374:	d907      	bls.n	8006386 <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8006376:	4b0a      	ldr	r3, [pc, #40]	@ (80063a0 <xTaskGenericNotify+0x180>)
 8006378:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800637c:	601a      	str	r2, [r3, #0]
 800637e:	f3bf 8f4f 	dsb	sy
 8006382:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006386:	f000 fe01 	bl	8006f8c <vPortExitCritical>

		return xReturn;
 800638a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800638c:	4618      	mov	r0, r3
 800638e:	3728      	adds	r7, #40	@ 0x28
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}
 8006394:	20000e38 	.word	0x20000e38
 8006398:	20000960 	.word	0x20000960
 800639c:	2000095c 	.word	0x2000095c
 80063a0:	e000ed04 	.word	0xe000ed04

080063a4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b08e      	sub	sp, #56	@ 0x38
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	603b      	str	r3, [r7, #0]
 80063b0:	4613      	mov	r3, r2
 80063b2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80063b4:	2301      	movs	r3, #1
 80063b6:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d10b      	bne.n	80063d6 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 80063be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c2:	f383 8811 	msr	BASEPRI, r3
 80063c6:	f3bf 8f6f 	isb	sy
 80063ca:	f3bf 8f4f 	dsb	sy
 80063ce:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80063d0:	bf00      	nop
 80063d2:	bf00      	nop
 80063d4:	e7fd      	b.n	80063d2 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80063d6:	f000 fe87 	bl	80070e8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 80063de:	f3ef 8211 	mrs	r2, BASEPRI
 80063e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063e6:	f383 8811 	msr	BASEPRI, r3
 80063ea:	f3bf 8f6f 	isb	sy
 80063ee:	f3bf 8f4f 	dsb	sy
 80063f2:	623a      	str	r2, [r7, #32]
 80063f4:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80063f6:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80063f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d004      	beq.n	800640a <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006402:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800640a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800640c:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8006410:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006416:	2202      	movs	r2, #2
 8006418:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800641c:	79fb      	ldrb	r3, [r7, #7]
 800641e:	2b04      	cmp	r3, #4
 8006420:	d82e      	bhi.n	8006480 <xTaskGenericNotifyFromISR+0xdc>
 8006422:	a201      	add	r2, pc, #4	@ (adr r2, 8006428 <xTaskGenericNotifyFromISR+0x84>)
 8006424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006428:	080064a5 	.word	0x080064a5
 800642c:	0800643d 	.word	0x0800643d
 8006430:	0800644f 	.word	0x0800644f
 8006434:	0800645f 	.word	0x0800645f
 8006438:	08006469 	.word	0x08006469
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800643c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800643e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	431a      	orrs	r2, r3
 8006446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006448:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800644c:	e02d      	b.n	80064aa <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800644e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006450:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006454:	1c5a      	adds	r2, r3, #1
 8006456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006458:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800645c:	e025      	b.n	80064aa <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800645e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006460:	68ba      	ldr	r2, [r7, #8]
 8006462:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8006466:	e020      	b.n	80064aa <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006468:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800646c:	2b02      	cmp	r3, #2
 800646e:	d004      	beq.n	800647a <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8006470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006472:	68ba      	ldr	r2, [r7, #8]
 8006474:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8006478:	e017      	b.n	80064aa <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 800647a:	2300      	movs	r3, #0
 800647c:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800647e:	e014      	b.n	80064aa <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8006480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006482:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800648a:	d00d      	beq.n	80064a8 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 800648c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006490:	f383 8811 	msr	BASEPRI, r3
 8006494:	f3bf 8f6f 	isb	sy
 8006498:	f3bf 8f4f 	dsb	sy
 800649c:	61bb      	str	r3, [r7, #24]
}
 800649e:	bf00      	nop
 80064a0:	bf00      	nop
 80064a2:	e7fd      	b.n	80064a0 <xTaskGenericNotifyFromISR+0xfc>
					break;
 80064a4:	bf00      	nop
 80064a6:	e000      	b.n	80064aa <xTaskGenericNotifyFromISR+0x106>
					break;
 80064a8:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80064aa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d147      	bne.n	8006542 <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80064b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00b      	beq.n	80064d2 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 80064ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064be:	f383 8811 	msr	BASEPRI, r3
 80064c2:	f3bf 8f6f 	isb	sy
 80064c6:	f3bf 8f4f 	dsb	sy
 80064ca:	617b      	str	r3, [r7, #20]
}
 80064cc:	bf00      	nop
 80064ce:	bf00      	nop
 80064d0:	e7fd      	b.n	80064ce <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064d2:	4b21      	ldr	r3, [pc, #132]	@ (8006558 <xTaskGenericNotifyFromISR+0x1b4>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d11d      	bne.n	8006516 <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064dc:	3304      	adds	r3, #4
 80064de:	4618      	mov	r0, r3
 80064e0:	f7fe f94e 	bl	8004780 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80064e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064e8:	4b1c      	ldr	r3, [pc, #112]	@ (800655c <xTaskGenericNotifyFromISR+0x1b8>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d903      	bls.n	80064f8 <xTaskGenericNotifyFromISR+0x154>
 80064f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064f4:	4a19      	ldr	r2, [pc, #100]	@ (800655c <xTaskGenericNotifyFromISR+0x1b8>)
 80064f6:	6013      	str	r3, [r2, #0]
 80064f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064fc:	4613      	mov	r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4413      	add	r3, r2
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	4a16      	ldr	r2, [pc, #88]	@ (8006560 <xTaskGenericNotifyFromISR+0x1bc>)
 8006506:	441a      	add	r2, r3
 8006508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800650a:	3304      	adds	r3, #4
 800650c:	4619      	mov	r1, r3
 800650e:	4610      	mov	r0, r2
 8006510:	f7fe f8d9 	bl	80046c6 <vListInsertEnd>
 8006514:	e005      	b.n	8006522 <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006518:	3318      	adds	r3, #24
 800651a:	4619      	mov	r1, r3
 800651c:	4811      	ldr	r0, [pc, #68]	@ (8006564 <xTaskGenericNotifyFromISR+0x1c0>)
 800651e:	f7fe f8d2 	bl	80046c6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006524:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006526:	4b10      	ldr	r3, [pc, #64]	@ (8006568 <xTaskGenericNotifyFromISR+0x1c4>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800652c:	429a      	cmp	r2, r3
 800652e:	d908      	bls.n	8006542 <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8006530:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006532:	2b00      	cmp	r3, #0
 8006534:	d002      	beq.n	800653c <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8006536:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006538:	2201      	movs	r2, #1
 800653a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800653c:	4b0b      	ldr	r3, [pc, #44]	@ (800656c <xTaskGenericNotifyFromISR+0x1c8>)
 800653e:	2201      	movs	r2, #1
 8006540:	601a      	str	r2, [r3, #0]
 8006542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006544:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	f383 8811 	msr	BASEPRI, r3
}
 800654c:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800654e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8006550:	4618      	mov	r0, r3
 8006552:	3738      	adds	r7, #56	@ 0x38
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	20000e58 	.word	0x20000e58
 800655c:	20000e38 	.word	0x20000e38
 8006560:	20000960 	.word	0x20000960
 8006564:	20000df0 	.word	0x20000df0
 8006568:	2000095c 	.word	0x2000095c
 800656c:	20000e44 	.word	0x20000e44

08006570 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800657a:	4b21      	ldr	r3, [pc, #132]	@ (8006600 <prvAddCurrentTaskToDelayedList+0x90>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006580:	4b20      	ldr	r3, [pc, #128]	@ (8006604 <prvAddCurrentTaskToDelayedList+0x94>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	3304      	adds	r3, #4
 8006586:	4618      	mov	r0, r3
 8006588:	f7fe f8fa 	bl	8004780 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006592:	d10a      	bne.n	80065aa <prvAddCurrentTaskToDelayedList+0x3a>
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d007      	beq.n	80065aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800659a:	4b1a      	ldr	r3, [pc, #104]	@ (8006604 <prvAddCurrentTaskToDelayedList+0x94>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	3304      	adds	r3, #4
 80065a0:	4619      	mov	r1, r3
 80065a2:	4819      	ldr	r0, [pc, #100]	@ (8006608 <prvAddCurrentTaskToDelayedList+0x98>)
 80065a4:	f7fe f88f 	bl	80046c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80065a8:	e026      	b.n	80065f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4413      	add	r3, r2
 80065b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80065b2:	4b14      	ldr	r3, [pc, #80]	@ (8006604 <prvAddCurrentTaskToDelayedList+0x94>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68ba      	ldr	r2, [r7, #8]
 80065b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80065ba:	68ba      	ldr	r2, [r7, #8]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	429a      	cmp	r2, r3
 80065c0:	d209      	bcs.n	80065d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065c2:	4b12      	ldr	r3, [pc, #72]	@ (800660c <prvAddCurrentTaskToDelayedList+0x9c>)
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	4b0f      	ldr	r3, [pc, #60]	@ (8006604 <prvAddCurrentTaskToDelayedList+0x94>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	3304      	adds	r3, #4
 80065cc:	4619      	mov	r1, r3
 80065ce:	4610      	mov	r0, r2
 80065d0:	f7fe f89d 	bl	800470e <vListInsert>
}
 80065d4:	e010      	b.n	80065f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065d6:	4b0e      	ldr	r3, [pc, #56]	@ (8006610 <prvAddCurrentTaskToDelayedList+0xa0>)
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	4b0a      	ldr	r3, [pc, #40]	@ (8006604 <prvAddCurrentTaskToDelayedList+0x94>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	3304      	adds	r3, #4
 80065e0:	4619      	mov	r1, r3
 80065e2:	4610      	mov	r0, r2
 80065e4:	f7fe f893 	bl	800470e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80065e8:	4b0a      	ldr	r3, [pc, #40]	@ (8006614 <prvAddCurrentTaskToDelayedList+0xa4>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68ba      	ldr	r2, [r7, #8]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d202      	bcs.n	80065f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80065f2:	4a08      	ldr	r2, [pc, #32]	@ (8006614 <prvAddCurrentTaskToDelayedList+0xa4>)
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	6013      	str	r3, [r2, #0]
}
 80065f8:	bf00      	nop
 80065fa:	3710      	adds	r7, #16
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	20000e34 	.word	0x20000e34
 8006604:	2000095c 	.word	0x2000095c
 8006608:	20000e1c 	.word	0x20000e1c
 800660c:	20000dec 	.word	0x20000dec
 8006610:	20000de8 	.word	0x20000de8
 8006614:	20000e50 	.word	0x20000e50

08006618 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b08a      	sub	sp, #40	@ 0x28
 800661c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800661e:	2300      	movs	r3, #0
 8006620:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006622:	f000 fb13 	bl	8006c4c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006626:	4b1d      	ldr	r3, [pc, #116]	@ (800669c <xTimerCreateTimerTask+0x84>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d021      	beq.n	8006672 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800662e:	2300      	movs	r3, #0
 8006630:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006632:	2300      	movs	r3, #0
 8006634:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006636:	1d3a      	adds	r2, r7, #4
 8006638:	f107 0108 	add.w	r1, r7, #8
 800663c:	f107 030c 	add.w	r3, r7, #12
 8006640:	4618      	mov	r0, r3
 8006642:	f7fd fff9 	bl	8004638 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006646:	6879      	ldr	r1, [r7, #4]
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	9202      	str	r2, [sp, #8]
 800664e:	9301      	str	r3, [sp, #4]
 8006650:	2302      	movs	r3, #2
 8006652:	9300      	str	r3, [sp, #0]
 8006654:	2300      	movs	r3, #0
 8006656:	460a      	mov	r2, r1
 8006658:	4911      	ldr	r1, [pc, #68]	@ (80066a0 <xTimerCreateTimerTask+0x88>)
 800665a:	4812      	ldr	r0, [pc, #72]	@ (80066a4 <xTimerCreateTimerTask+0x8c>)
 800665c:	f7fe fe9a 	bl	8005394 <xTaskCreateStatic>
 8006660:	4603      	mov	r3, r0
 8006662:	4a11      	ldr	r2, [pc, #68]	@ (80066a8 <xTimerCreateTimerTask+0x90>)
 8006664:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006666:	4b10      	ldr	r3, [pc, #64]	@ (80066a8 <xTimerCreateTimerTask+0x90>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d001      	beq.n	8006672 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800666e:	2301      	movs	r3, #1
 8006670:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d10b      	bne.n	8006690 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800667c:	f383 8811 	msr	BASEPRI, r3
 8006680:	f3bf 8f6f 	isb	sy
 8006684:	f3bf 8f4f 	dsb	sy
 8006688:	613b      	str	r3, [r7, #16]
}
 800668a:	bf00      	nop
 800668c:	bf00      	nop
 800668e:	e7fd      	b.n	800668c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006690:	697b      	ldr	r3, [r7, #20]
}
 8006692:	4618      	mov	r0, r3
 8006694:	3718      	adds	r7, #24
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	20000e8c 	.word	0x20000e8c
 80066a0:	080081e0 	.word	0x080081e0
 80066a4:	080067e5 	.word	0x080067e5
 80066a8:	20000e90 	.word	0x20000e90

080066ac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b08a      	sub	sp, #40	@ 0x28
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
 80066b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80066ba:	2300      	movs	r3, #0
 80066bc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d10b      	bne.n	80066dc <xTimerGenericCommand+0x30>
	__asm volatile
 80066c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066c8:	f383 8811 	msr	BASEPRI, r3
 80066cc:	f3bf 8f6f 	isb	sy
 80066d0:	f3bf 8f4f 	dsb	sy
 80066d4:	623b      	str	r3, [r7, #32]
}
 80066d6:	bf00      	nop
 80066d8:	bf00      	nop
 80066da:	e7fd      	b.n	80066d8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80066dc:	4b19      	ldr	r3, [pc, #100]	@ (8006744 <xTimerGenericCommand+0x98>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d02a      	beq.n	800673a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	2b05      	cmp	r3, #5
 80066f4:	dc18      	bgt.n	8006728 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80066f6:	f7ff fca5 	bl	8006044 <xTaskGetSchedulerState>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b02      	cmp	r3, #2
 80066fe:	d109      	bne.n	8006714 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006700:	4b10      	ldr	r3, [pc, #64]	@ (8006744 <xTimerGenericCommand+0x98>)
 8006702:	6818      	ldr	r0, [r3, #0]
 8006704:	f107 0110 	add.w	r1, r7, #16
 8006708:	2300      	movs	r3, #0
 800670a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800670c:	f7fe f9a8 	bl	8004a60 <xQueueGenericSend>
 8006710:	6278      	str	r0, [r7, #36]	@ 0x24
 8006712:	e012      	b.n	800673a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006714:	4b0b      	ldr	r3, [pc, #44]	@ (8006744 <xTimerGenericCommand+0x98>)
 8006716:	6818      	ldr	r0, [r3, #0]
 8006718:	f107 0110 	add.w	r1, r7, #16
 800671c:	2300      	movs	r3, #0
 800671e:	2200      	movs	r2, #0
 8006720:	f7fe f99e 	bl	8004a60 <xQueueGenericSend>
 8006724:	6278      	str	r0, [r7, #36]	@ 0x24
 8006726:	e008      	b.n	800673a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006728:	4b06      	ldr	r3, [pc, #24]	@ (8006744 <xTimerGenericCommand+0x98>)
 800672a:	6818      	ldr	r0, [r3, #0]
 800672c:	f107 0110 	add.w	r1, r7, #16
 8006730:	2300      	movs	r3, #0
 8006732:	683a      	ldr	r2, [r7, #0]
 8006734:	f7fe fa96 	bl	8004c64 <xQueueGenericSendFromISR>
 8006738:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800673a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800673c:	4618      	mov	r0, r3
 800673e:	3728      	adds	r7, #40	@ 0x28
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	20000e8c 	.word	0x20000e8c

08006748 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b088      	sub	sp, #32
 800674c:	af02      	add	r7, sp, #8
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006752:	4b23      	ldr	r3, [pc, #140]	@ (80067e0 <prvProcessExpiredTimer+0x98>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	3304      	adds	r3, #4
 8006760:	4618      	mov	r0, r3
 8006762:	f7fe f80d 	bl	8004780 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800676c:	f003 0304 	and.w	r3, r3, #4
 8006770:	2b00      	cmp	r3, #0
 8006772:	d023      	beq.n	80067bc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	699a      	ldr	r2, [r3, #24]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	18d1      	adds	r1, r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	683a      	ldr	r2, [r7, #0]
 8006780:	6978      	ldr	r0, [r7, #20]
 8006782:	f000 f8d5 	bl	8006930 <prvInsertTimerInActiveList>
 8006786:	4603      	mov	r3, r0
 8006788:	2b00      	cmp	r3, #0
 800678a:	d020      	beq.n	80067ce <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800678c:	2300      	movs	r3, #0
 800678e:	9300      	str	r3, [sp, #0]
 8006790:	2300      	movs	r3, #0
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	2100      	movs	r1, #0
 8006796:	6978      	ldr	r0, [r7, #20]
 8006798:	f7ff ff88 	bl	80066ac <xTimerGenericCommand>
 800679c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d114      	bne.n	80067ce <prvProcessExpiredTimer+0x86>
	__asm volatile
 80067a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067a8:	f383 8811 	msr	BASEPRI, r3
 80067ac:	f3bf 8f6f 	isb	sy
 80067b0:	f3bf 8f4f 	dsb	sy
 80067b4:	60fb      	str	r3, [r7, #12]
}
 80067b6:	bf00      	nop
 80067b8:	bf00      	nop
 80067ba:	e7fd      	b.n	80067b8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80067c2:	f023 0301 	bic.w	r3, r3, #1
 80067c6:	b2da      	uxtb	r2, r3
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	6a1b      	ldr	r3, [r3, #32]
 80067d2:	6978      	ldr	r0, [r7, #20]
 80067d4:	4798      	blx	r3
}
 80067d6:	bf00      	nop
 80067d8:	3718      	adds	r7, #24
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	20000e84 	.word	0x20000e84

080067e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80067ec:	f107 0308 	add.w	r3, r7, #8
 80067f0:	4618      	mov	r0, r3
 80067f2:	f000 f859 	bl	80068a8 <prvGetNextExpireTime>
 80067f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	4619      	mov	r1, r3
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	f000 f805 	bl	800680c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006802:	f000 f8d7 	bl	80069b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006806:	bf00      	nop
 8006808:	e7f0      	b.n	80067ec <prvTimerTask+0x8>
	...

0800680c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006816:	f7ff f821 	bl	800585c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800681a:	f107 0308 	add.w	r3, r7, #8
 800681e:	4618      	mov	r0, r3
 8006820:	f000 f866 	bl	80068f0 <prvSampleTimeNow>
 8006824:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d130      	bne.n	800688e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d10a      	bne.n	8006848 <prvProcessTimerOrBlockTask+0x3c>
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	429a      	cmp	r2, r3
 8006838:	d806      	bhi.n	8006848 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800683a:	f7ff f81d 	bl	8005878 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800683e:	68f9      	ldr	r1, [r7, #12]
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f7ff ff81 	bl	8006748 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006846:	e024      	b.n	8006892 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d008      	beq.n	8006860 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800684e:	4b13      	ldr	r3, [pc, #76]	@ (800689c <prvProcessTimerOrBlockTask+0x90>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d101      	bne.n	800685c <prvProcessTimerOrBlockTask+0x50>
 8006858:	2301      	movs	r3, #1
 800685a:	e000      	b.n	800685e <prvProcessTimerOrBlockTask+0x52>
 800685c:	2300      	movs	r3, #0
 800685e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006860:	4b0f      	ldr	r3, [pc, #60]	@ (80068a0 <prvProcessTimerOrBlockTask+0x94>)
 8006862:	6818      	ldr	r0, [r3, #0]
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	683a      	ldr	r2, [r7, #0]
 800686c:	4619      	mov	r1, r3
 800686e:	f7fe fd5d 	bl	800532c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006872:	f7ff f801 	bl	8005878 <xTaskResumeAll>
 8006876:	4603      	mov	r3, r0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d10a      	bne.n	8006892 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800687c:	4b09      	ldr	r3, [pc, #36]	@ (80068a4 <prvProcessTimerOrBlockTask+0x98>)
 800687e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006882:	601a      	str	r2, [r3, #0]
 8006884:	f3bf 8f4f 	dsb	sy
 8006888:	f3bf 8f6f 	isb	sy
}
 800688c:	e001      	b.n	8006892 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800688e:	f7fe fff3 	bl	8005878 <xTaskResumeAll>
}
 8006892:	bf00      	nop
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	20000e88 	.word	0x20000e88
 80068a0:	20000e8c 	.word	0x20000e8c
 80068a4:	e000ed04 	.word	0xe000ed04

080068a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80068b0:	4b0e      	ldr	r3, [pc, #56]	@ (80068ec <prvGetNextExpireTime+0x44>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d101      	bne.n	80068be <prvGetNextExpireTime+0x16>
 80068ba:	2201      	movs	r2, #1
 80068bc:	e000      	b.n	80068c0 <prvGetNextExpireTime+0x18>
 80068be:	2200      	movs	r2, #0
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d105      	bne.n	80068d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80068cc:	4b07      	ldr	r3, [pc, #28]	@ (80068ec <prvGetNextExpireTime+0x44>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	60fb      	str	r3, [r7, #12]
 80068d6:	e001      	b.n	80068dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80068d8:	2300      	movs	r3, #0
 80068da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80068dc:	68fb      	ldr	r3, [r7, #12]
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3714      	adds	r7, #20
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	20000e84 	.word	0x20000e84

080068f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80068f8:	f7ff f85c 	bl	80059b4 <xTaskGetTickCount>
 80068fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80068fe:	4b0b      	ldr	r3, [pc, #44]	@ (800692c <prvSampleTimeNow+0x3c>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	429a      	cmp	r2, r3
 8006906:	d205      	bcs.n	8006914 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006908:	f000 f93a 	bl	8006b80 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	601a      	str	r2, [r3, #0]
 8006912:	e002      	b.n	800691a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800691a:	4a04      	ldr	r2, [pc, #16]	@ (800692c <prvSampleTimeNow+0x3c>)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006920:	68fb      	ldr	r3, [r7, #12]
}
 8006922:	4618      	mov	r0, r3
 8006924:	3710      	adds	r7, #16
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	20000e94 	.word	0x20000e94

08006930 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b086      	sub	sp, #24
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	607a      	str	r2, [r7, #4]
 800693c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800693e:	2300      	movs	r3, #0
 8006940:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	68ba      	ldr	r2, [r7, #8]
 8006946:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800694e:	68ba      	ldr	r2, [r7, #8]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	429a      	cmp	r2, r3
 8006954:	d812      	bhi.n	800697c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	1ad2      	subs	r2, r2, r3
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	699b      	ldr	r3, [r3, #24]
 8006960:	429a      	cmp	r2, r3
 8006962:	d302      	bcc.n	800696a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006964:	2301      	movs	r3, #1
 8006966:	617b      	str	r3, [r7, #20]
 8006968:	e01b      	b.n	80069a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800696a:	4b10      	ldr	r3, [pc, #64]	@ (80069ac <prvInsertTimerInActiveList+0x7c>)
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	3304      	adds	r3, #4
 8006972:	4619      	mov	r1, r3
 8006974:	4610      	mov	r0, r2
 8006976:	f7fd feca 	bl	800470e <vListInsert>
 800697a:	e012      	b.n	80069a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	429a      	cmp	r2, r3
 8006982:	d206      	bcs.n	8006992 <prvInsertTimerInActiveList+0x62>
 8006984:	68ba      	ldr	r2, [r7, #8]
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	429a      	cmp	r2, r3
 800698a:	d302      	bcc.n	8006992 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800698c:	2301      	movs	r3, #1
 800698e:	617b      	str	r3, [r7, #20]
 8006990:	e007      	b.n	80069a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006992:	4b07      	ldr	r3, [pc, #28]	@ (80069b0 <prvInsertTimerInActiveList+0x80>)
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	3304      	adds	r3, #4
 800699a:	4619      	mov	r1, r3
 800699c:	4610      	mov	r0, r2
 800699e:	f7fd feb6 	bl	800470e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80069a2:	697b      	ldr	r3, [r7, #20]
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3718      	adds	r7, #24
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	20000e88 	.word	0x20000e88
 80069b0:	20000e84 	.word	0x20000e84

080069b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b08e      	sub	sp, #56	@ 0x38
 80069b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80069ba:	e0ce      	b.n	8006b5a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	da19      	bge.n	80069f6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80069c2:	1d3b      	adds	r3, r7, #4
 80069c4:	3304      	adds	r3, #4
 80069c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80069c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d10b      	bne.n	80069e6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80069ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d2:	f383 8811 	msr	BASEPRI, r3
 80069d6:	f3bf 8f6f 	isb	sy
 80069da:	f3bf 8f4f 	dsb	sy
 80069de:	61fb      	str	r3, [r7, #28]
}
 80069e0:	bf00      	nop
 80069e2:	bf00      	nop
 80069e4:	e7fd      	b.n	80069e2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80069e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069ec:	6850      	ldr	r0, [r2, #4]
 80069ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069f0:	6892      	ldr	r2, [r2, #8]
 80069f2:	4611      	mov	r1, r2
 80069f4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f2c0 80ae 	blt.w	8006b5a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a04:	695b      	ldr	r3, [r3, #20]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d004      	beq.n	8006a14 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a0c:	3304      	adds	r3, #4
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7fd feb6 	bl	8004780 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a14:	463b      	mov	r3, r7
 8006a16:	4618      	mov	r0, r3
 8006a18:	f7ff ff6a 	bl	80068f0 <prvSampleTimeNow>
 8006a1c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2b09      	cmp	r3, #9
 8006a22:	f200 8097 	bhi.w	8006b54 <prvProcessReceivedCommands+0x1a0>
 8006a26:	a201      	add	r2, pc, #4	@ (adr r2, 8006a2c <prvProcessReceivedCommands+0x78>)
 8006a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a2c:	08006a55 	.word	0x08006a55
 8006a30:	08006a55 	.word	0x08006a55
 8006a34:	08006a55 	.word	0x08006a55
 8006a38:	08006acb 	.word	0x08006acb
 8006a3c:	08006adf 	.word	0x08006adf
 8006a40:	08006b2b 	.word	0x08006b2b
 8006a44:	08006a55 	.word	0x08006a55
 8006a48:	08006a55 	.word	0x08006a55
 8006a4c:	08006acb 	.word	0x08006acb
 8006a50:	08006adf 	.word	0x08006adf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a5a:	f043 0301 	orr.w	r3, r3, #1
 8006a5e:	b2da      	uxtb	r2, r3
 8006a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006a66:	68ba      	ldr	r2, [r7, #8]
 8006a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a6a:	699b      	ldr	r3, [r3, #24]
 8006a6c:	18d1      	adds	r1, r2, r3
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a74:	f7ff ff5c 	bl	8006930 <prvInsertTimerInActiveList>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d06c      	beq.n	8006b58 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a80:	6a1b      	ldr	r3, [r3, #32]
 8006a82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a84:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a8c:	f003 0304 	and.w	r3, r3, #4
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d061      	beq.n	8006b58 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006a94:	68ba      	ldr	r2, [r7, #8]
 8006a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a98:	699b      	ldr	r3, [r3, #24]
 8006a9a:	441a      	add	r2, r3
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	9300      	str	r3, [sp, #0]
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	2100      	movs	r1, #0
 8006aa4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006aa6:	f7ff fe01 	bl	80066ac <xTimerGenericCommand>
 8006aaa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006aac:	6a3b      	ldr	r3, [r7, #32]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d152      	bne.n	8006b58 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ab6:	f383 8811 	msr	BASEPRI, r3
 8006aba:	f3bf 8f6f 	isb	sy
 8006abe:	f3bf 8f4f 	dsb	sy
 8006ac2:	61bb      	str	r3, [r7, #24]
}
 8006ac4:	bf00      	nop
 8006ac6:	bf00      	nop
 8006ac8:	e7fd      	b.n	8006ac6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006acc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ad0:	f023 0301 	bic.w	r3, r3, #1
 8006ad4:	b2da      	uxtb	r2, r3
 8006ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ad8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006adc:	e03d      	b.n	8006b5a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ae0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ae4:	f043 0301 	orr.w	r3, r3, #1
 8006ae8:	b2da      	uxtb	r2, r3
 8006aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006af0:	68ba      	ldr	r2, [r7, #8]
 8006af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006af4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006af8:	699b      	ldr	r3, [r3, #24]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d10b      	bne.n	8006b16 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b02:	f383 8811 	msr	BASEPRI, r3
 8006b06:	f3bf 8f6f 	isb	sy
 8006b0a:	f3bf 8f4f 	dsb	sy
 8006b0e:	617b      	str	r3, [r7, #20]
}
 8006b10:	bf00      	nop
 8006b12:	bf00      	nop
 8006b14:	e7fd      	b.n	8006b12 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b18:	699a      	ldr	r2, [r3, #24]
 8006b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b1c:	18d1      	adds	r1, r2, r3
 8006b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b24:	f7ff ff04 	bl	8006930 <prvInsertTimerInActiveList>
					break;
 8006b28:	e017      	b.n	8006b5a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b30:	f003 0302 	and.w	r3, r3, #2
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d103      	bne.n	8006b40 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006b38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b3a:	f000 fbe5 	bl	8007308 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006b3e:	e00c      	b.n	8006b5a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b42:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b46:	f023 0301 	bic.w	r3, r3, #1
 8006b4a:	b2da      	uxtb	r2, r3
 8006b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b4e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006b52:	e002      	b.n	8006b5a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006b54:	bf00      	nop
 8006b56:	e000      	b.n	8006b5a <prvProcessReceivedCommands+0x1a6>
					break;
 8006b58:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b5a:	4b08      	ldr	r3, [pc, #32]	@ (8006b7c <prvProcessReceivedCommands+0x1c8>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	1d39      	adds	r1, r7, #4
 8006b60:	2200      	movs	r2, #0
 8006b62:	4618      	mov	r0, r3
 8006b64:	f7fe f91c 	bl	8004da0 <xQueueReceive>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	f47f af26 	bne.w	80069bc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006b70:	bf00      	nop
 8006b72:	bf00      	nop
 8006b74:	3730      	adds	r7, #48	@ 0x30
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	20000e8c 	.word	0x20000e8c

08006b80 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b088      	sub	sp, #32
 8006b84:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b86:	e049      	b.n	8006c1c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b88:	4b2e      	ldr	r3, [pc, #184]	@ (8006c44 <prvSwitchTimerLists+0xc4>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b92:	4b2c      	ldr	r3, [pc, #176]	@ (8006c44 <prvSwitchTimerLists+0xc4>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	3304      	adds	r3, #4
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f7fd fded 	bl	8004780 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6a1b      	ldr	r3, [r3, #32]
 8006baa:	68f8      	ldr	r0, [r7, #12]
 8006bac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006bb4:	f003 0304 	and.w	r3, r3, #4
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d02f      	beq.n	8006c1c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	699b      	ldr	r3, [r3, #24]
 8006bc0:	693a      	ldr	r2, [r7, #16]
 8006bc2:	4413      	add	r3, r2
 8006bc4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006bc6:	68ba      	ldr	r2, [r7, #8]
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d90e      	bls.n	8006bec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	68ba      	ldr	r2, [r7, #8]
 8006bd2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	68fa      	ldr	r2, [r7, #12]
 8006bd8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006bda:	4b1a      	ldr	r3, [pc, #104]	@ (8006c44 <prvSwitchTimerLists+0xc4>)
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	3304      	adds	r3, #4
 8006be2:	4619      	mov	r1, r3
 8006be4:	4610      	mov	r0, r2
 8006be6:	f7fd fd92 	bl	800470e <vListInsert>
 8006bea:	e017      	b.n	8006c1c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006bec:	2300      	movs	r3, #0
 8006bee:	9300      	str	r3, [sp, #0]
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	693a      	ldr	r2, [r7, #16]
 8006bf4:	2100      	movs	r1, #0
 8006bf6:	68f8      	ldr	r0, [r7, #12]
 8006bf8:	f7ff fd58 	bl	80066ac <xTimerGenericCommand>
 8006bfc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d10b      	bne.n	8006c1c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c08:	f383 8811 	msr	BASEPRI, r3
 8006c0c:	f3bf 8f6f 	isb	sy
 8006c10:	f3bf 8f4f 	dsb	sy
 8006c14:	603b      	str	r3, [r7, #0]
}
 8006c16:	bf00      	nop
 8006c18:	bf00      	nop
 8006c1a:	e7fd      	b.n	8006c18 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c1c:	4b09      	ldr	r3, [pc, #36]	@ (8006c44 <prvSwitchTimerLists+0xc4>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d1b0      	bne.n	8006b88 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006c26:	4b07      	ldr	r3, [pc, #28]	@ (8006c44 <prvSwitchTimerLists+0xc4>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006c2c:	4b06      	ldr	r3, [pc, #24]	@ (8006c48 <prvSwitchTimerLists+0xc8>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a04      	ldr	r2, [pc, #16]	@ (8006c44 <prvSwitchTimerLists+0xc4>)
 8006c32:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006c34:	4a04      	ldr	r2, [pc, #16]	@ (8006c48 <prvSwitchTimerLists+0xc8>)
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	6013      	str	r3, [r2, #0]
}
 8006c3a:	bf00      	nop
 8006c3c:	3718      	adds	r7, #24
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	20000e84 	.word	0x20000e84
 8006c48:	20000e88 	.word	0x20000e88

08006c4c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006c52:	f000 f969 	bl	8006f28 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006c56:	4b15      	ldr	r3, [pc, #84]	@ (8006cac <prvCheckForValidListAndQueue+0x60>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d120      	bne.n	8006ca0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006c5e:	4814      	ldr	r0, [pc, #80]	@ (8006cb0 <prvCheckForValidListAndQueue+0x64>)
 8006c60:	f7fd fd04 	bl	800466c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006c64:	4813      	ldr	r0, [pc, #76]	@ (8006cb4 <prvCheckForValidListAndQueue+0x68>)
 8006c66:	f7fd fd01 	bl	800466c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006c6a:	4b13      	ldr	r3, [pc, #76]	@ (8006cb8 <prvCheckForValidListAndQueue+0x6c>)
 8006c6c:	4a10      	ldr	r2, [pc, #64]	@ (8006cb0 <prvCheckForValidListAndQueue+0x64>)
 8006c6e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006c70:	4b12      	ldr	r3, [pc, #72]	@ (8006cbc <prvCheckForValidListAndQueue+0x70>)
 8006c72:	4a10      	ldr	r2, [pc, #64]	@ (8006cb4 <prvCheckForValidListAndQueue+0x68>)
 8006c74:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006c76:	2300      	movs	r3, #0
 8006c78:	9300      	str	r3, [sp, #0]
 8006c7a:	4b11      	ldr	r3, [pc, #68]	@ (8006cc0 <prvCheckForValidListAndQueue+0x74>)
 8006c7c:	4a11      	ldr	r2, [pc, #68]	@ (8006cc4 <prvCheckForValidListAndQueue+0x78>)
 8006c7e:	2110      	movs	r1, #16
 8006c80:	200a      	movs	r0, #10
 8006c82:	f7fd fe11 	bl	80048a8 <xQueueGenericCreateStatic>
 8006c86:	4603      	mov	r3, r0
 8006c88:	4a08      	ldr	r2, [pc, #32]	@ (8006cac <prvCheckForValidListAndQueue+0x60>)
 8006c8a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006c8c:	4b07      	ldr	r3, [pc, #28]	@ (8006cac <prvCheckForValidListAndQueue+0x60>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d005      	beq.n	8006ca0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006c94:	4b05      	ldr	r3, [pc, #20]	@ (8006cac <prvCheckForValidListAndQueue+0x60>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	490b      	ldr	r1, [pc, #44]	@ (8006cc8 <prvCheckForValidListAndQueue+0x7c>)
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7fe fb1c 	bl	80052d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ca0:	f000 f974 	bl	8006f8c <vPortExitCritical>
}
 8006ca4:	bf00      	nop
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	20000e8c 	.word	0x20000e8c
 8006cb0:	20000e5c 	.word	0x20000e5c
 8006cb4:	20000e70 	.word	0x20000e70
 8006cb8:	20000e84 	.word	0x20000e84
 8006cbc:	20000e88 	.word	0x20000e88
 8006cc0:	20000f38 	.word	0x20000f38
 8006cc4:	20000e98 	.word	0x20000e98
 8006cc8:	080081e8 	.word	0x080081e8

08006ccc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b085      	sub	sp, #20
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	3b04      	subs	r3, #4
 8006cdc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006ce4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	3b04      	subs	r3, #4
 8006cea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	f023 0201 	bic.w	r2, r3, #1
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	3b04      	subs	r3, #4
 8006cfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006cfc:	4a0c      	ldr	r2, [pc, #48]	@ (8006d30 <pxPortInitialiseStack+0x64>)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	3b14      	subs	r3, #20
 8006d06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	3b04      	subs	r3, #4
 8006d12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f06f 0202 	mvn.w	r2, #2
 8006d1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	3b20      	subs	r3, #32
 8006d20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006d22:	68fb      	ldr	r3, [r7, #12]
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3714      	adds	r7, #20
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr
 8006d30:	08006d35 	.word	0x08006d35

08006d34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006d3e:	4b13      	ldr	r3, [pc, #76]	@ (8006d8c <prvTaskExitError+0x58>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d46:	d00b      	beq.n	8006d60 <prvTaskExitError+0x2c>
	__asm volatile
 8006d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d4c:	f383 8811 	msr	BASEPRI, r3
 8006d50:	f3bf 8f6f 	isb	sy
 8006d54:	f3bf 8f4f 	dsb	sy
 8006d58:	60fb      	str	r3, [r7, #12]
}
 8006d5a:	bf00      	nop
 8006d5c:	bf00      	nop
 8006d5e:	e7fd      	b.n	8006d5c <prvTaskExitError+0x28>
	__asm volatile
 8006d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d64:	f383 8811 	msr	BASEPRI, r3
 8006d68:	f3bf 8f6f 	isb	sy
 8006d6c:	f3bf 8f4f 	dsb	sy
 8006d70:	60bb      	str	r3, [r7, #8]
}
 8006d72:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006d74:	bf00      	nop
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d0fc      	beq.n	8006d76 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006d7c:	bf00      	nop
 8006d7e:	bf00      	nop
 8006d80:	3714      	adds	r7, #20
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	20000018 	.word	0x20000018

08006d90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006d90:	4b07      	ldr	r3, [pc, #28]	@ (8006db0 <pxCurrentTCBConst2>)
 8006d92:	6819      	ldr	r1, [r3, #0]
 8006d94:	6808      	ldr	r0, [r1, #0]
 8006d96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d9a:	f380 8809 	msr	PSP, r0
 8006d9e:	f3bf 8f6f 	isb	sy
 8006da2:	f04f 0000 	mov.w	r0, #0
 8006da6:	f380 8811 	msr	BASEPRI, r0
 8006daa:	4770      	bx	lr
 8006dac:	f3af 8000 	nop.w

08006db0 <pxCurrentTCBConst2>:
 8006db0:	2000095c 	.word	0x2000095c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006db4:	bf00      	nop
 8006db6:	bf00      	nop

08006db8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006db8:	4808      	ldr	r0, [pc, #32]	@ (8006ddc <prvPortStartFirstTask+0x24>)
 8006dba:	6800      	ldr	r0, [r0, #0]
 8006dbc:	6800      	ldr	r0, [r0, #0]
 8006dbe:	f380 8808 	msr	MSP, r0
 8006dc2:	f04f 0000 	mov.w	r0, #0
 8006dc6:	f380 8814 	msr	CONTROL, r0
 8006dca:	b662      	cpsie	i
 8006dcc:	b661      	cpsie	f
 8006dce:	f3bf 8f4f 	dsb	sy
 8006dd2:	f3bf 8f6f 	isb	sy
 8006dd6:	df00      	svc	0
 8006dd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006dda:	bf00      	nop
 8006ddc:	e000ed08 	.word	0xe000ed08

08006de0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b086      	sub	sp, #24
 8006de4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006de6:	4b47      	ldr	r3, [pc, #284]	@ (8006f04 <xPortStartScheduler+0x124>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a47      	ldr	r2, [pc, #284]	@ (8006f08 <xPortStartScheduler+0x128>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d10b      	bne.n	8006e08 <xPortStartScheduler+0x28>
	__asm volatile
 8006df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006df4:	f383 8811 	msr	BASEPRI, r3
 8006df8:	f3bf 8f6f 	isb	sy
 8006dfc:	f3bf 8f4f 	dsb	sy
 8006e00:	60fb      	str	r3, [r7, #12]
}
 8006e02:	bf00      	nop
 8006e04:	bf00      	nop
 8006e06:	e7fd      	b.n	8006e04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006e08:	4b3e      	ldr	r3, [pc, #248]	@ (8006f04 <xPortStartScheduler+0x124>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a3f      	ldr	r2, [pc, #252]	@ (8006f0c <xPortStartScheduler+0x12c>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d10b      	bne.n	8006e2a <xPortStartScheduler+0x4a>
	__asm volatile
 8006e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e16:	f383 8811 	msr	BASEPRI, r3
 8006e1a:	f3bf 8f6f 	isb	sy
 8006e1e:	f3bf 8f4f 	dsb	sy
 8006e22:	613b      	str	r3, [r7, #16]
}
 8006e24:	bf00      	nop
 8006e26:	bf00      	nop
 8006e28:	e7fd      	b.n	8006e26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006e2a:	4b39      	ldr	r3, [pc, #228]	@ (8006f10 <xPortStartScheduler+0x130>)
 8006e2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	22ff      	movs	r2, #255	@ 0xff
 8006e3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006e44:	78fb      	ldrb	r3, [r7, #3]
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006e4c:	b2da      	uxtb	r2, r3
 8006e4e:	4b31      	ldr	r3, [pc, #196]	@ (8006f14 <xPortStartScheduler+0x134>)
 8006e50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006e52:	4b31      	ldr	r3, [pc, #196]	@ (8006f18 <xPortStartScheduler+0x138>)
 8006e54:	2207      	movs	r2, #7
 8006e56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e58:	e009      	b.n	8006e6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006e5a:	4b2f      	ldr	r3, [pc, #188]	@ (8006f18 <xPortStartScheduler+0x138>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	4a2d      	ldr	r2, [pc, #180]	@ (8006f18 <xPortStartScheduler+0x138>)
 8006e62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006e64:	78fb      	ldrb	r3, [r7, #3]
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	005b      	lsls	r3, r3, #1
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e6e:	78fb      	ldrb	r3, [r7, #3]
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e76:	2b80      	cmp	r3, #128	@ 0x80
 8006e78:	d0ef      	beq.n	8006e5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006e7a:	4b27      	ldr	r3, [pc, #156]	@ (8006f18 <xPortStartScheduler+0x138>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f1c3 0307 	rsb	r3, r3, #7
 8006e82:	2b04      	cmp	r3, #4
 8006e84:	d00b      	beq.n	8006e9e <xPortStartScheduler+0xbe>
	__asm volatile
 8006e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e8a:	f383 8811 	msr	BASEPRI, r3
 8006e8e:	f3bf 8f6f 	isb	sy
 8006e92:	f3bf 8f4f 	dsb	sy
 8006e96:	60bb      	str	r3, [r7, #8]
}
 8006e98:	bf00      	nop
 8006e9a:	bf00      	nop
 8006e9c:	e7fd      	b.n	8006e9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006e9e:	4b1e      	ldr	r3, [pc, #120]	@ (8006f18 <xPortStartScheduler+0x138>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	021b      	lsls	r3, r3, #8
 8006ea4:	4a1c      	ldr	r2, [pc, #112]	@ (8006f18 <xPortStartScheduler+0x138>)
 8006ea6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8006f18 <xPortStartScheduler+0x138>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006eb0:	4a19      	ldr	r2, [pc, #100]	@ (8006f18 <xPortStartScheduler+0x138>)
 8006eb2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	b2da      	uxtb	r2, r3
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006ebc:	4b17      	ldr	r3, [pc, #92]	@ (8006f1c <xPortStartScheduler+0x13c>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a16      	ldr	r2, [pc, #88]	@ (8006f1c <xPortStartScheduler+0x13c>)
 8006ec2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006ec6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006ec8:	4b14      	ldr	r3, [pc, #80]	@ (8006f1c <xPortStartScheduler+0x13c>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a13      	ldr	r2, [pc, #76]	@ (8006f1c <xPortStartScheduler+0x13c>)
 8006ece:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006ed2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006ed4:	f000 f8da 	bl	800708c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006ed8:	4b11      	ldr	r3, [pc, #68]	@ (8006f20 <xPortStartScheduler+0x140>)
 8006eda:	2200      	movs	r2, #0
 8006edc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006ede:	f000 f8f9 	bl	80070d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006ee2:	4b10      	ldr	r3, [pc, #64]	@ (8006f24 <xPortStartScheduler+0x144>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a0f      	ldr	r2, [pc, #60]	@ (8006f24 <xPortStartScheduler+0x144>)
 8006ee8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006eec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006eee:	f7ff ff63 	bl	8006db8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006ef2:	f7fe fe29 	bl	8005b48 <vTaskSwitchContext>
	prvTaskExitError();
 8006ef6:	f7ff ff1d 	bl	8006d34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3718      	adds	r7, #24
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	e000ed00 	.word	0xe000ed00
 8006f08:	410fc271 	.word	0x410fc271
 8006f0c:	410fc270 	.word	0x410fc270
 8006f10:	e000e400 	.word	0xe000e400
 8006f14:	20000f88 	.word	0x20000f88
 8006f18:	20000f8c 	.word	0x20000f8c
 8006f1c:	e000ed20 	.word	0xe000ed20
 8006f20:	20000018 	.word	0x20000018
 8006f24:	e000ef34 	.word	0xe000ef34

08006f28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
	__asm volatile
 8006f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f32:	f383 8811 	msr	BASEPRI, r3
 8006f36:	f3bf 8f6f 	isb	sy
 8006f3a:	f3bf 8f4f 	dsb	sy
 8006f3e:	607b      	str	r3, [r7, #4]
}
 8006f40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006f42:	4b10      	ldr	r3, [pc, #64]	@ (8006f84 <vPortEnterCritical+0x5c>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	3301      	adds	r3, #1
 8006f48:	4a0e      	ldr	r2, [pc, #56]	@ (8006f84 <vPortEnterCritical+0x5c>)
 8006f4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006f4c:	4b0d      	ldr	r3, [pc, #52]	@ (8006f84 <vPortEnterCritical+0x5c>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d110      	bne.n	8006f76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006f54:	4b0c      	ldr	r3, [pc, #48]	@ (8006f88 <vPortEnterCritical+0x60>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00b      	beq.n	8006f76 <vPortEnterCritical+0x4e>
	__asm volatile
 8006f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f62:	f383 8811 	msr	BASEPRI, r3
 8006f66:	f3bf 8f6f 	isb	sy
 8006f6a:	f3bf 8f4f 	dsb	sy
 8006f6e:	603b      	str	r3, [r7, #0]
}
 8006f70:	bf00      	nop
 8006f72:	bf00      	nop
 8006f74:	e7fd      	b.n	8006f72 <vPortEnterCritical+0x4a>
	}
}
 8006f76:	bf00      	nop
 8006f78:	370c      	adds	r7, #12
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	20000018 	.word	0x20000018
 8006f88:	e000ed04 	.word	0xe000ed04

08006f8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006f92:	4b12      	ldr	r3, [pc, #72]	@ (8006fdc <vPortExitCritical+0x50>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d10b      	bne.n	8006fb2 <vPortExitCritical+0x26>
	__asm volatile
 8006f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f9e:	f383 8811 	msr	BASEPRI, r3
 8006fa2:	f3bf 8f6f 	isb	sy
 8006fa6:	f3bf 8f4f 	dsb	sy
 8006faa:	607b      	str	r3, [r7, #4]
}
 8006fac:	bf00      	nop
 8006fae:	bf00      	nop
 8006fb0:	e7fd      	b.n	8006fae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8006fdc <vPortExitCritical+0x50>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	3b01      	subs	r3, #1
 8006fb8:	4a08      	ldr	r2, [pc, #32]	@ (8006fdc <vPortExitCritical+0x50>)
 8006fba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006fbc:	4b07      	ldr	r3, [pc, #28]	@ (8006fdc <vPortExitCritical+0x50>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d105      	bne.n	8006fd0 <vPortExitCritical+0x44>
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	f383 8811 	msr	BASEPRI, r3
}
 8006fce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006fd0:	bf00      	nop
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr
 8006fdc:	20000018 	.word	0x20000018

08006fe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006fe0:	f3ef 8009 	mrs	r0, PSP
 8006fe4:	f3bf 8f6f 	isb	sy
 8006fe8:	4b15      	ldr	r3, [pc, #84]	@ (8007040 <pxCurrentTCBConst>)
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	f01e 0f10 	tst.w	lr, #16
 8006ff0:	bf08      	it	eq
 8006ff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006ff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ffa:	6010      	str	r0, [r2, #0]
 8006ffc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007000:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007004:	f380 8811 	msr	BASEPRI, r0
 8007008:	f3bf 8f4f 	dsb	sy
 800700c:	f3bf 8f6f 	isb	sy
 8007010:	f7fe fd9a 	bl	8005b48 <vTaskSwitchContext>
 8007014:	f04f 0000 	mov.w	r0, #0
 8007018:	f380 8811 	msr	BASEPRI, r0
 800701c:	bc09      	pop	{r0, r3}
 800701e:	6819      	ldr	r1, [r3, #0]
 8007020:	6808      	ldr	r0, [r1, #0]
 8007022:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007026:	f01e 0f10 	tst.w	lr, #16
 800702a:	bf08      	it	eq
 800702c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007030:	f380 8809 	msr	PSP, r0
 8007034:	f3bf 8f6f 	isb	sy
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	f3af 8000 	nop.w

08007040 <pxCurrentTCBConst>:
 8007040:	2000095c 	.word	0x2000095c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007044:	bf00      	nop
 8007046:	bf00      	nop

08007048 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
	__asm volatile
 800704e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007052:	f383 8811 	msr	BASEPRI, r3
 8007056:	f3bf 8f6f 	isb	sy
 800705a:	f3bf 8f4f 	dsb	sy
 800705e:	607b      	str	r3, [r7, #4]
}
 8007060:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007062:	f7fe fcb7 	bl	80059d4 <xTaskIncrementTick>
 8007066:	4603      	mov	r3, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d003      	beq.n	8007074 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800706c:	4b06      	ldr	r3, [pc, #24]	@ (8007088 <xPortSysTickHandler+0x40>)
 800706e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007072:	601a      	str	r2, [r3, #0]
 8007074:	2300      	movs	r3, #0
 8007076:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	f383 8811 	msr	BASEPRI, r3
}
 800707e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007080:	bf00      	nop
 8007082:	3708      	adds	r7, #8
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}
 8007088:	e000ed04 	.word	0xe000ed04

0800708c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800708c:	b480      	push	{r7}
 800708e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007090:	4b0b      	ldr	r3, [pc, #44]	@ (80070c0 <vPortSetupTimerInterrupt+0x34>)
 8007092:	2200      	movs	r2, #0
 8007094:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007096:	4b0b      	ldr	r3, [pc, #44]	@ (80070c4 <vPortSetupTimerInterrupt+0x38>)
 8007098:	2200      	movs	r2, #0
 800709a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800709c:	4b0a      	ldr	r3, [pc, #40]	@ (80070c8 <vPortSetupTimerInterrupt+0x3c>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a0a      	ldr	r2, [pc, #40]	@ (80070cc <vPortSetupTimerInterrupt+0x40>)
 80070a2:	fba2 2303 	umull	r2, r3, r2, r3
 80070a6:	099b      	lsrs	r3, r3, #6
 80070a8:	4a09      	ldr	r2, [pc, #36]	@ (80070d0 <vPortSetupTimerInterrupt+0x44>)
 80070aa:	3b01      	subs	r3, #1
 80070ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80070ae:	4b04      	ldr	r3, [pc, #16]	@ (80070c0 <vPortSetupTimerInterrupt+0x34>)
 80070b0:	2207      	movs	r2, #7
 80070b2:	601a      	str	r2, [r3, #0]
}
 80070b4:	bf00      	nop
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr
 80070be:	bf00      	nop
 80070c0:	e000e010 	.word	0xe000e010
 80070c4:	e000e018 	.word	0xe000e018
 80070c8:	20000008 	.word	0x20000008
 80070cc:	10624dd3 	.word	0x10624dd3
 80070d0:	e000e014 	.word	0xe000e014

080070d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80070d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80070e4 <vPortEnableVFP+0x10>
 80070d8:	6801      	ldr	r1, [r0, #0]
 80070da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80070de:	6001      	str	r1, [r0, #0]
 80070e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80070e2:	bf00      	nop
 80070e4:	e000ed88 	.word	0xe000ed88

080070e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80070e8:	b480      	push	{r7}
 80070ea:	b085      	sub	sp, #20
 80070ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80070ee:	f3ef 8305 	mrs	r3, IPSR
 80070f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2b0f      	cmp	r3, #15
 80070f8:	d915      	bls.n	8007126 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80070fa:	4a18      	ldr	r2, [pc, #96]	@ (800715c <vPortValidateInterruptPriority+0x74>)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	4413      	add	r3, r2
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007104:	4b16      	ldr	r3, [pc, #88]	@ (8007160 <vPortValidateInterruptPriority+0x78>)
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	7afa      	ldrb	r2, [r7, #11]
 800710a:	429a      	cmp	r2, r3
 800710c:	d20b      	bcs.n	8007126 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800710e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007112:	f383 8811 	msr	BASEPRI, r3
 8007116:	f3bf 8f6f 	isb	sy
 800711a:	f3bf 8f4f 	dsb	sy
 800711e:	607b      	str	r3, [r7, #4]
}
 8007120:	bf00      	nop
 8007122:	bf00      	nop
 8007124:	e7fd      	b.n	8007122 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007126:	4b0f      	ldr	r3, [pc, #60]	@ (8007164 <vPortValidateInterruptPriority+0x7c>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800712e:	4b0e      	ldr	r3, [pc, #56]	@ (8007168 <vPortValidateInterruptPriority+0x80>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	429a      	cmp	r2, r3
 8007134:	d90b      	bls.n	800714e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800713a:	f383 8811 	msr	BASEPRI, r3
 800713e:	f3bf 8f6f 	isb	sy
 8007142:	f3bf 8f4f 	dsb	sy
 8007146:	603b      	str	r3, [r7, #0]
}
 8007148:	bf00      	nop
 800714a:	bf00      	nop
 800714c:	e7fd      	b.n	800714a <vPortValidateInterruptPriority+0x62>
	}
 800714e:	bf00      	nop
 8007150:	3714      	adds	r7, #20
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop
 800715c:	e000e3f0 	.word	0xe000e3f0
 8007160:	20000f88 	.word	0x20000f88
 8007164:	e000ed0c 	.word	0xe000ed0c
 8007168:	20000f8c 	.word	0x20000f8c

0800716c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b08a      	sub	sp, #40	@ 0x28
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007174:	2300      	movs	r3, #0
 8007176:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007178:	f7fe fb70 	bl	800585c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800717c:	4b5c      	ldr	r3, [pc, #368]	@ (80072f0 <pvPortMalloc+0x184>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d101      	bne.n	8007188 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007184:	f000 f924 	bl	80073d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007188:	4b5a      	ldr	r3, [pc, #360]	@ (80072f4 <pvPortMalloc+0x188>)
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4013      	ands	r3, r2
 8007190:	2b00      	cmp	r3, #0
 8007192:	f040 8095 	bne.w	80072c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d01e      	beq.n	80071da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800719c:	2208      	movs	r2, #8
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4413      	add	r3, r2
 80071a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f003 0307 	and.w	r3, r3, #7
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d015      	beq.n	80071da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f023 0307 	bic.w	r3, r3, #7
 80071b4:	3308      	adds	r3, #8
 80071b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f003 0307 	and.w	r3, r3, #7
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d00b      	beq.n	80071da <pvPortMalloc+0x6e>
	__asm volatile
 80071c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071c6:	f383 8811 	msr	BASEPRI, r3
 80071ca:	f3bf 8f6f 	isb	sy
 80071ce:	f3bf 8f4f 	dsb	sy
 80071d2:	617b      	str	r3, [r7, #20]
}
 80071d4:	bf00      	nop
 80071d6:	bf00      	nop
 80071d8:	e7fd      	b.n	80071d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d06f      	beq.n	80072c0 <pvPortMalloc+0x154>
 80071e0:	4b45      	ldr	r3, [pc, #276]	@ (80072f8 <pvPortMalloc+0x18c>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d86a      	bhi.n	80072c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80071ea:	4b44      	ldr	r3, [pc, #272]	@ (80072fc <pvPortMalloc+0x190>)
 80071ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80071ee:	4b43      	ldr	r3, [pc, #268]	@ (80072fc <pvPortMalloc+0x190>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80071f4:	e004      	b.n	8007200 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80071f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80071fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	429a      	cmp	r2, r3
 8007208:	d903      	bls.n	8007212 <pvPortMalloc+0xa6>
 800720a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d1f1      	bne.n	80071f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007212:	4b37      	ldr	r3, [pc, #220]	@ (80072f0 <pvPortMalloc+0x184>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007218:	429a      	cmp	r2, r3
 800721a:	d051      	beq.n	80072c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800721c:	6a3b      	ldr	r3, [r7, #32]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	2208      	movs	r2, #8
 8007222:	4413      	add	r3, r2
 8007224:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	6a3b      	ldr	r3, [r7, #32]
 800722c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800722e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007230:	685a      	ldr	r2, [r3, #4]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	1ad2      	subs	r2, r2, r3
 8007236:	2308      	movs	r3, #8
 8007238:	005b      	lsls	r3, r3, #1
 800723a:	429a      	cmp	r2, r3
 800723c:	d920      	bls.n	8007280 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800723e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4413      	add	r3, r2
 8007244:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	f003 0307 	and.w	r3, r3, #7
 800724c:	2b00      	cmp	r3, #0
 800724e:	d00b      	beq.n	8007268 <pvPortMalloc+0xfc>
	__asm volatile
 8007250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007254:	f383 8811 	msr	BASEPRI, r3
 8007258:	f3bf 8f6f 	isb	sy
 800725c:	f3bf 8f4f 	dsb	sy
 8007260:	613b      	str	r3, [r7, #16]
}
 8007262:	bf00      	nop
 8007264:	bf00      	nop
 8007266:	e7fd      	b.n	8007264 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800726a:	685a      	ldr	r2, [r3, #4]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	1ad2      	subs	r2, r2, r3
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800727a:	69b8      	ldr	r0, [r7, #24]
 800727c:	f000 f90a 	bl	8007494 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007280:	4b1d      	ldr	r3, [pc, #116]	@ (80072f8 <pvPortMalloc+0x18c>)
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	1ad3      	subs	r3, r2, r3
 800728a:	4a1b      	ldr	r2, [pc, #108]	@ (80072f8 <pvPortMalloc+0x18c>)
 800728c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800728e:	4b1a      	ldr	r3, [pc, #104]	@ (80072f8 <pvPortMalloc+0x18c>)
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	4b1b      	ldr	r3, [pc, #108]	@ (8007300 <pvPortMalloc+0x194>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	429a      	cmp	r2, r3
 8007298:	d203      	bcs.n	80072a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800729a:	4b17      	ldr	r3, [pc, #92]	@ (80072f8 <pvPortMalloc+0x18c>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a18      	ldr	r2, [pc, #96]	@ (8007300 <pvPortMalloc+0x194>)
 80072a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80072a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a4:	685a      	ldr	r2, [r3, #4]
 80072a6:	4b13      	ldr	r3, [pc, #76]	@ (80072f4 <pvPortMalloc+0x188>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	431a      	orrs	r2, r3
 80072ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80072b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b2:	2200      	movs	r2, #0
 80072b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80072b6:	4b13      	ldr	r3, [pc, #76]	@ (8007304 <pvPortMalloc+0x198>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	3301      	adds	r3, #1
 80072bc:	4a11      	ldr	r2, [pc, #68]	@ (8007304 <pvPortMalloc+0x198>)
 80072be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80072c0:	f7fe fada 	bl	8005878 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	f003 0307 	and.w	r3, r3, #7
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00b      	beq.n	80072e6 <pvPortMalloc+0x17a>
	__asm volatile
 80072ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072d2:	f383 8811 	msr	BASEPRI, r3
 80072d6:	f3bf 8f6f 	isb	sy
 80072da:	f3bf 8f4f 	dsb	sy
 80072de:	60fb      	str	r3, [r7, #12]
}
 80072e0:	bf00      	nop
 80072e2:	bf00      	nop
 80072e4:	e7fd      	b.n	80072e2 <pvPortMalloc+0x176>
	return pvReturn;
 80072e6:	69fb      	ldr	r3, [r7, #28]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3728      	adds	r7, #40	@ 0x28
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	20004b98 	.word	0x20004b98
 80072f4:	20004bac 	.word	0x20004bac
 80072f8:	20004b9c 	.word	0x20004b9c
 80072fc:	20004b90 	.word	0x20004b90
 8007300:	20004ba0 	.word	0x20004ba0
 8007304:	20004ba4 	.word	0x20004ba4

08007308 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b086      	sub	sp, #24
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d04f      	beq.n	80073ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800731a:	2308      	movs	r3, #8
 800731c:	425b      	negs	r3, r3
 800731e:	697a      	ldr	r2, [r7, #20]
 8007320:	4413      	add	r3, r2
 8007322:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	685a      	ldr	r2, [r3, #4]
 800732c:	4b25      	ldr	r3, [pc, #148]	@ (80073c4 <vPortFree+0xbc>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4013      	ands	r3, r2
 8007332:	2b00      	cmp	r3, #0
 8007334:	d10b      	bne.n	800734e <vPortFree+0x46>
	__asm volatile
 8007336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800733a:	f383 8811 	msr	BASEPRI, r3
 800733e:	f3bf 8f6f 	isb	sy
 8007342:	f3bf 8f4f 	dsb	sy
 8007346:	60fb      	str	r3, [r7, #12]
}
 8007348:	bf00      	nop
 800734a:	bf00      	nop
 800734c:	e7fd      	b.n	800734a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00b      	beq.n	800736e <vPortFree+0x66>
	__asm volatile
 8007356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800735a:	f383 8811 	msr	BASEPRI, r3
 800735e:	f3bf 8f6f 	isb	sy
 8007362:	f3bf 8f4f 	dsb	sy
 8007366:	60bb      	str	r3, [r7, #8]
}
 8007368:	bf00      	nop
 800736a:	bf00      	nop
 800736c:	e7fd      	b.n	800736a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	685a      	ldr	r2, [r3, #4]
 8007372:	4b14      	ldr	r3, [pc, #80]	@ (80073c4 <vPortFree+0xbc>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4013      	ands	r3, r2
 8007378:	2b00      	cmp	r3, #0
 800737a:	d01e      	beq.n	80073ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d11a      	bne.n	80073ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	685a      	ldr	r2, [r3, #4]
 8007388:	4b0e      	ldr	r3, [pc, #56]	@ (80073c4 <vPortFree+0xbc>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	43db      	mvns	r3, r3
 800738e:	401a      	ands	r2, r3
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007394:	f7fe fa62 	bl	800585c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	685a      	ldr	r2, [r3, #4]
 800739c:	4b0a      	ldr	r3, [pc, #40]	@ (80073c8 <vPortFree+0xc0>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4413      	add	r3, r2
 80073a2:	4a09      	ldr	r2, [pc, #36]	@ (80073c8 <vPortFree+0xc0>)
 80073a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80073a6:	6938      	ldr	r0, [r7, #16]
 80073a8:	f000 f874 	bl	8007494 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80073ac:	4b07      	ldr	r3, [pc, #28]	@ (80073cc <vPortFree+0xc4>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	3301      	adds	r3, #1
 80073b2:	4a06      	ldr	r2, [pc, #24]	@ (80073cc <vPortFree+0xc4>)
 80073b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80073b6:	f7fe fa5f 	bl	8005878 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80073ba:	bf00      	nop
 80073bc:	3718      	adds	r7, #24
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	20004bac 	.word	0x20004bac
 80073c8:	20004b9c 	.word	0x20004b9c
 80073cc:	20004ba8 	.word	0x20004ba8

080073d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80073d0:	b480      	push	{r7}
 80073d2:	b085      	sub	sp, #20
 80073d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80073d6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80073da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80073dc:	4b27      	ldr	r3, [pc, #156]	@ (800747c <prvHeapInit+0xac>)
 80073de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f003 0307 	and.w	r3, r3, #7
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00c      	beq.n	8007404 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	3307      	adds	r3, #7
 80073ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f023 0307 	bic.w	r3, r3, #7
 80073f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80073f8:	68ba      	ldr	r2, [r7, #8]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	1ad3      	subs	r3, r2, r3
 80073fe:	4a1f      	ldr	r2, [pc, #124]	@ (800747c <prvHeapInit+0xac>)
 8007400:	4413      	add	r3, r2
 8007402:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007408:	4a1d      	ldr	r2, [pc, #116]	@ (8007480 <prvHeapInit+0xb0>)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800740e:	4b1c      	ldr	r3, [pc, #112]	@ (8007480 <prvHeapInit+0xb0>)
 8007410:	2200      	movs	r2, #0
 8007412:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	68ba      	ldr	r2, [r7, #8]
 8007418:	4413      	add	r3, r2
 800741a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800741c:	2208      	movs	r2, #8
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	1a9b      	subs	r3, r3, r2
 8007422:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f023 0307 	bic.w	r3, r3, #7
 800742a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	4a15      	ldr	r2, [pc, #84]	@ (8007484 <prvHeapInit+0xb4>)
 8007430:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007432:	4b14      	ldr	r3, [pc, #80]	@ (8007484 <prvHeapInit+0xb4>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	2200      	movs	r2, #0
 8007438:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800743a:	4b12      	ldr	r3, [pc, #72]	@ (8007484 <prvHeapInit+0xb4>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	2200      	movs	r2, #0
 8007440:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	1ad2      	subs	r2, r2, r3
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007450:	4b0c      	ldr	r3, [pc, #48]	@ (8007484 <prvHeapInit+0xb4>)
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	4a0a      	ldr	r2, [pc, #40]	@ (8007488 <prvHeapInit+0xb8>)
 800745e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	4a09      	ldr	r2, [pc, #36]	@ (800748c <prvHeapInit+0xbc>)
 8007466:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007468:	4b09      	ldr	r3, [pc, #36]	@ (8007490 <prvHeapInit+0xc0>)
 800746a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800746e:	601a      	str	r2, [r3, #0]
}
 8007470:	bf00      	nop
 8007472:	3714      	adds	r7, #20
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr
 800747c:	20000f90 	.word	0x20000f90
 8007480:	20004b90 	.word	0x20004b90
 8007484:	20004b98 	.word	0x20004b98
 8007488:	20004ba0 	.word	0x20004ba0
 800748c:	20004b9c 	.word	0x20004b9c
 8007490:	20004bac 	.word	0x20004bac

08007494 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007494:	b480      	push	{r7}
 8007496:	b085      	sub	sp, #20
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800749c:	4b28      	ldr	r3, [pc, #160]	@ (8007540 <prvInsertBlockIntoFreeList+0xac>)
 800749e:	60fb      	str	r3, [r7, #12]
 80074a0:	e002      	b.n	80074a8 <prvInsertBlockIntoFreeList+0x14>
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	60fb      	str	r3, [r7, #12]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d8f7      	bhi.n	80074a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	68ba      	ldr	r2, [r7, #8]
 80074bc:	4413      	add	r3, r2
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d108      	bne.n	80074d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	685a      	ldr	r2, [r3, #4]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	441a      	add	r2, r3
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	68ba      	ldr	r2, [r7, #8]
 80074e0:	441a      	add	r2, r3
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	429a      	cmp	r2, r3
 80074e8:	d118      	bne.n	800751c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	4b15      	ldr	r3, [pc, #84]	@ (8007544 <prvInsertBlockIntoFreeList+0xb0>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d00d      	beq.n	8007512 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	685a      	ldr	r2, [r3, #4]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	441a      	add	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	601a      	str	r2, [r3, #0]
 8007510:	e008      	b.n	8007524 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007512:	4b0c      	ldr	r3, [pc, #48]	@ (8007544 <prvInsertBlockIntoFreeList+0xb0>)
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	601a      	str	r2, [r3, #0]
 800751a:	e003      	b.n	8007524 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007524:	68fa      	ldr	r2, [r7, #12]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	429a      	cmp	r2, r3
 800752a:	d002      	beq.n	8007532 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007532:	bf00      	nop
 8007534:	3714      	adds	r7, #20
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr
 800753e:	bf00      	nop
 8007540:	20004b90 	.word	0x20004b90
 8007544:	20004b98 	.word	0x20004b98

08007548 <siprintf>:
 8007548:	b40e      	push	{r1, r2, r3}
 800754a:	b510      	push	{r4, lr}
 800754c:	b09d      	sub	sp, #116	@ 0x74
 800754e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007550:	9002      	str	r0, [sp, #8]
 8007552:	9006      	str	r0, [sp, #24]
 8007554:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007558:	480a      	ldr	r0, [pc, #40]	@ (8007584 <siprintf+0x3c>)
 800755a:	9107      	str	r1, [sp, #28]
 800755c:	9104      	str	r1, [sp, #16]
 800755e:	490a      	ldr	r1, [pc, #40]	@ (8007588 <siprintf+0x40>)
 8007560:	f853 2b04 	ldr.w	r2, [r3], #4
 8007564:	9105      	str	r1, [sp, #20]
 8007566:	2400      	movs	r4, #0
 8007568:	a902      	add	r1, sp, #8
 800756a:	6800      	ldr	r0, [r0, #0]
 800756c:	9301      	str	r3, [sp, #4]
 800756e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007570:	f000 fa00 	bl	8007974 <_svfiprintf_r>
 8007574:	9b02      	ldr	r3, [sp, #8]
 8007576:	701c      	strb	r4, [r3, #0]
 8007578:	b01d      	add	sp, #116	@ 0x74
 800757a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800757e:	b003      	add	sp, #12
 8007580:	4770      	bx	lr
 8007582:	bf00      	nop
 8007584:	2000001c 	.word	0x2000001c
 8007588:	ffff0208 	.word	0xffff0208

0800758c <memset>:
 800758c:	4402      	add	r2, r0
 800758e:	4603      	mov	r3, r0
 8007590:	4293      	cmp	r3, r2
 8007592:	d100      	bne.n	8007596 <memset+0xa>
 8007594:	4770      	bx	lr
 8007596:	f803 1b01 	strb.w	r1, [r3], #1
 800759a:	e7f9      	b.n	8007590 <memset+0x4>

0800759c <_reclaim_reent>:
 800759c:	4b2d      	ldr	r3, [pc, #180]	@ (8007654 <_reclaim_reent+0xb8>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4283      	cmp	r3, r0
 80075a2:	b570      	push	{r4, r5, r6, lr}
 80075a4:	4604      	mov	r4, r0
 80075a6:	d053      	beq.n	8007650 <_reclaim_reent+0xb4>
 80075a8:	69c3      	ldr	r3, [r0, #28]
 80075aa:	b31b      	cbz	r3, 80075f4 <_reclaim_reent+0x58>
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	b163      	cbz	r3, 80075ca <_reclaim_reent+0x2e>
 80075b0:	2500      	movs	r5, #0
 80075b2:	69e3      	ldr	r3, [r4, #28]
 80075b4:	68db      	ldr	r3, [r3, #12]
 80075b6:	5959      	ldr	r1, [r3, r5]
 80075b8:	b9b1      	cbnz	r1, 80075e8 <_reclaim_reent+0x4c>
 80075ba:	3504      	adds	r5, #4
 80075bc:	2d80      	cmp	r5, #128	@ 0x80
 80075be:	d1f8      	bne.n	80075b2 <_reclaim_reent+0x16>
 80075c0:	69e3      	ldr	r3, [r4, #28]
 80075c2:	4620      	mov	r0, r4
 80075c4:	68d9      	ldr	r1, [r3, #12]
 80075c6:	f000 f881 	bl	80076cc <_free_r>
 80075ca:	69e3      	ldr	r3, [r4, #28]
 80075cc:	6819      	ldr	r1, [r3, #0]
 80075ce:	b111      	cbz	r1, 80075d6 <_reclaim_reent+0x3a>
 80075d0:	4620      	mov	r0, r4
 80075d2:	f000 f87b 	bl	80076cc <_free_r>
 80075d6:	69e3      	ldr	r3, [r4, #28]
 80075d8:	689d      	ldr	r5, [r3, #8]
 80075da:	b15d      	cbz	r5, 80075f4 <_reclaim_reent+0x58>
 80075dc:	4629      	mov	r1, r5
 80075de:	4620      	mov	r0, r4
 80075e0:	682d      	ldr	r5, [r5, #0]
 80075e2:	f000 f873 	bl	80076cc <_free_r>
 80075e6:	e7f8      	b.n	80075da <_reclaim_reent+0x3e>
 80075e8:	680e      	ldr	r6, [r1, #0]
 80075ea:	4620      	mov	r0, r4
 80075ec:	f000 f86e 	bl	80076cc <_free_r>
 80075f0:	4631      	mov	r1, r6
 80075f2:	e7e1      	b.n	80075b8 <_reclaim_reent+0x1c>
 80075f4:	6961      	ldr	r1, [r4, #20]
 80075f6:	b111      	cbz	r1, 80075fe <_reclaim_reent+0x62>
 80075f8:	4620      	mov	r0, r4
 80075fa:	f000 f867 	bl	80076cc <_free_r>
 80075fe:	69e1      	ldr	r1, [r4, #28]
 8007600:	b111      	cbz	r1, 8007608 <_reclaim_reent+0x6c>
 8007602:	4620      	mov	r0, r4
 8007604:	f000 f862 	bl	80076cc <_free_r>
 8007608:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800760a:	b111      	cbz	r1, 8007612 <_reclaim_reent+0x76>
 800760c:	4620      	mov	r0, r4
 800760e:	f000 f85d 	bl	80076cc <_free_r>
 8007612:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007614:	b111      	cbz	r1, 800761c <_reclaim_reent+0x80>
 8007616:	4620      	mov	r0, r4
 8007618:	f000 f858 	bl	80076cc <_free_r>
 800761c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800761e:	b111      	cbz	r1, 8007626 <_reclaim_reent+0x8a>
 8007620:	4620      	mov	r0, r4
 8007622:	f000 f853 	bl	80076cc <_free_r>
 8007626:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007628:	b111      	cbz	r1, 8007630 <_reclaim_reent+0x94>
 800762a:	4620      	mov	r0, r4
 800762c:	f000 f84e 	bl	80076cc <_free_r>
 8007630:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007632:	b111      	cbz	r1, 800763a <_reclaim_reent+0x9e>
 8007634:	4620      	mov	r0, r4
 8007636:	f000 f849 	bl	80076cc <_free_r>
 800763a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800763c:	b111      	cbz	r1, 8007644 <_reclaim_reent+0xa8>
 800763e:	4620      	mov	r0, r4
 8007640:	f000 f844 	bl	80076cc <_free_r>
 8007644:	6a23      	ldr	r3, [r4, #32]
 8007646:	b11b      	cbz	r3, 8007650 <_reclaim_reent+0xb4>
 8007648:	4620      	mov	r0, r4
 800764a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800764e:	4718      	bx	r3
 8007650:	bd70      	pop	{r4, r5, r6, pc}
 8007652:	bf00      	nop
 8007654:	2000001c 	.word	0x2000001c

08007658 <__errno>:
 8007658:	4b01      	ldr	r3, [pc, #4]	@ (8007660 <__errno+0x8>)
 800765a:	6818      	ldr	r0, [r3, #0]
 800765c:	4770      	bx	lr
 800765e:	bf00      	nop
 8007660:	2000001c 	.word	0x2000001c

08007664 <__libc_init_array>:
 8007664:	b570      	push	{r4, r5, r6, lr}
 8007666:	4d0d      	ldr	r5, [pc, #52]	@ (800769c <__libc_init_array+0x38>)
 8007668:	4c0d      	ldr	r4, [pc, #52]	@ (80076a0 <__libc_init_array+0x3c>)
 800766a:	1b64      	subs	r4, r4, r5
 800766c:	10a4      	asrs	r4, r4, #2
 800766e:	2600      	movs	r6, #0
 8007670:	42a6      	cmp	r6, r4
 8007672:	d109      	bne.n	8007688 <__libc_init_array+0x24>
 8007674:	4d0b      	ldr	r5, [pc, #44]	@ (80076a4 <__libc_init_array+0x40>)
 8007676:	4c0c      	ldr	r4, [pc, #48]	@ (80076a8 <__libc_init_array+0x44>)
 8007678:	f000 fc64 	bl	8007f44 <_init>
 800767c:	1b64      	subs	r4, r4, r5
 800767e:	10a4      	asrs	r4, r4, #2
 8007680:	2600      	movs	r6, #0
 8007682:	42a6      	cmp	r6, r4
 8007684:	d105      	bne.n	8007692 <__libc_init_array+0x2e>
 8007686:	bd70      	pop	{r4, r5, r6, pc}
 8007688:	f855 3b04 	ldr.w	r3, [r5], #4
 800768c:	4798      	blx	r3
 800768e:	3601      	adds	r6, #1
 8007690:	e7ee      	b.n	8007670 <__libc_init_array+0xc>
 8007692:	f855 3b04 	ldr.w	r3, [r5], #4
 8007696:	4798      	blx	r3
 8007698:	3601      	adds	r6, #1
 800769a:	e7f2      	b.n	8007682 <__libc_init_array+0x1e>
 800769c:	08008268 	.word	0x08008268
 80076a0:	08008268 	.word	0x08008268
 80076a4:	08008268 	.word	0x08008268
 80076a8:	0800826c 	.word	0x0800826c

080076ac <__retarget_lock_acquire_recursive>:
 80076ac:	4770      	bx	lr

080076ae <__retarget_lock_release_recursive>:
 80076ae:	4770      	bx	lr

080076b0 <memcpy>:
 80076b0:	440a      	add	r2, r1
 80076b2:	4291      	cmp	r1, r2
 80076b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80076b8:	d100      	bne.n	80076bc <memcpy+0xc>
 80076ba:	4770      	bx	lr
 80076bc:	b510      	push	{r4, lr}
 80076be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076c6:	4291      	cmp	r1, r2
 80076c8:	d1f9      	bne.n	80076be <memcpy+0xe>
 80076ca:	bd10      	pop	{r4, pc}

080076cc <_free_r>:
 80076cc:	b538      	push	{r3, r4, r5, lr}
 80076ce:	4605      	mov	r5, r0
 80076d0:	2900      	cmp	r1, #0
 80076d2:	d041      	beq.n	8007758 <_free_r+0x8c>
 80076d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076d8:	1f0c      	subs	r4, r1, #4
 80076da:	2b00      	cmp	r3, #0
 80076dc:	bfb8      	it	lt
 80076de:	18e4      	addlt	r4, r4, r3
 80076e0:	f000 f8e0 	bl	80078a4 <__malloc_lock>
 80076e4:	4a1d      	ldr	r2, [pc, #116]	@ (800775c <_free_r+0x90>)
 80076e6:	6813      	ldr	r3, [r2, #0]
 80076e8:	b933      	cbnz	r3, 80076f8 <_free_r+0x2c>
 80076ea:	6063      	str	r3, [r4, #4]
 80076ec:	6014      	str	r4, [r2, #0]
 80076ee:	4628      	mov	r0, r5
 80076f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076f4:	f000 b8dc 	b.w	80078b0 <__malloc_unlock>
 80076f8:	42a3      	cmp	r3, r4
 80076fa:	d908      	bls.n	800770e <_free_r+0x42>
 80076fc:	6820      	ldr	r0, [r4, #0]
 80076fe:	1821      	adds	r1, r4, r0
 8007700:	428b      	cmp	r3, r1
 8007702:	bf01      	itttt	eq
 8007704:	6819      	ldreq	r1, [r3, #0]
 8007706:	685b      	ldreq	r3, [r3, #4]
 8007708:	1809      	addeq	r1, r1, r0
 800770a:	6021      	streq	r1, [r4, #0]
 800770c:	e7ed      	b.n	80076ea <_free_r+0x1e>
 800770e:	461a      	mov	r2, r3
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	b10b      	cbz	r3, 8007718 <_free_r+0x4c>
 8007714:	42a3      	cmp	r3, r4
 8007716:	d9fa      	bls.n	800770e <_free_r+0x42>
 8007718:	6811      	ldr	r1, [r2, #0]
 800771a:	1850      	adds	r0, r2, r1
 800771c:	42a0      	cmp	r0, r4
 800771e:	d10b      	bne.n	8007738 <_free_r+0x6c>
 8007720:	6820      	ldr	r0, [r4, #0]
 8007722:	4401      	add	r1, r0
 8007724:	1850      	adds	r0, r2, r1
 8007726:	4283      	cmp	r3, r0
 8007728:	6011      	str	r1, [r2, #0]
 800772a:	d1e0      	bne.n	80076ee <_free_r+0x22>
 800772c:	6818      	ldr	r0, [r3, #0]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	6053      	str	r3, [r2, #4]
 8007732:	4408      	add	r0, r1
 8007734:	6010      	str	r0, [r2, #0]
 8007736:	e7da      	b.n	80076ee <_free_r+0x22>
 8007738:	d902      	bls.n	8007740 <_free_r+0x74>
 800773a:	230c      	movs	r3, #12
 800773c:	602b      	str	r3, [r5, #0]
 800773e:	e7d6      	b.n	80076ee <_free_r+0x22>
 8007740:	6820      	ldr	r0, [r4, #0]
 8007742:	1821      	adds	r1, r4, r0
 8007744:	428b      	cmp	r3, r1
 8007746:	bf04      	itt	eq
 8007748:	6819      	ldreq	r1, [r3, #0]
 800774a:	685b      	ldreq	r3, [r3, #4]
 800774c:	6063      	str	r3, [r4, #4]
 800774e:	bf04      	itt	eq
 8007750:	1809      	addeq	r1, r1, r0
 8007752:	6021      	streq	r1, [r4, #0]
 8007754:	6054      	str	r4, [r2, #4]
 8007756:	e7ca      	b.n	80076ee <_free_r+0x22>
 8007758:	bd38      	pop	{r3, r4, r5, pc}
 800775a:	bf00      	nop
 800775c:	20004cf4 	.word	0x20004cf4

08007760 <sbrk_aligned>:
 8007760:	b570      	push	{r4, r5, r6, lr}
 8007762:	4e0f      	ldr	r6, [pc, #60]	@ (80077a0 <sbrk_aligned+0x40>)
 8007764:	460c      	mov	r4, r1
 8007766:	6831      	ldr	r1, [r6, #0]
 8007768:	4605      	mov	r5, r0
 800776a:	b911      	cbnz	r1, 8007772 <sbrk_aligned+0x12>
 800776c:	f000 fba4 	bl	8007eb8 <_sbrk_r>
 8007770:	6030      	str	r0, [r6, #0]
 8007772:	4621      	mov	r1, r4
 8007774:	4628      	mov	r0, r5
 8007776:	f000 fb9f 	bl	8007eb8 <_sbrk_r>
 800777a:	1c43      	adds	r3, r0, #1
 800777c:	d103      	bne.n	8007786 <sbrk_aligned+0x26>
 800777e:	f04f 34ff 	mov.w	r4, #4294967295
 8007782:	4620      	mov	r0, r4
 8007784:	bd70      	pop	{r4, r5, r6, pc}
 8007786:	1cc4      	adds	r4, r0, #3
 8007788:	f024 0403 	bic.w	r4, r4, #3
 800778c:	42a0      	cmp	r0, r4
 800778e:	d0f8      	beq.n	8007782 <sbrk_aligned+0x22>
 8007790:	1a21      	subs	r1, r4, r0
 8007792:	4628      	mov	r0, r5
 8007794:	f000 fb90 	bl	8007eb8 <_sbrk_r>
 8007798:	3001      	adds	r0, #1
 800779a:	d1f2      	bne.n	8007782 <sbrk_aligned+0x22>
 800779c:	e7ef      	b.n	800777e <sbrk_aligned+0x1e>
 800779e:	bf00      	nop
 80077a0:	20004cf0 	.word	0x20004cf0

080077a4 <_malloc_r>:
 80077a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077a8:	1ccd      	adds	r5, r1, #3
 80077aa:	f025 0503 	bic.w	r5, r5, #3
 80077ae:	3508      	adds	r5, #8
 80077b0:	2d0c      	cmp	r5, #12
 80077b2:	bf38      	it	cc
 80077b4:	250c      	movcc	r5, #12
 80077b6:	2d00      	cmp	r5, #0
 80077b8:	4606      	mov	r6, r0
 80077ba:	db01      	blt.n	80077c0 <_malloc_r+0x1c>
 80077bc:	42a9      	cmp	r1, r5
 80077be:	d904      	bls.n	80077ca <_malloc_r+0x26>
 80077c0:	230c      	movs	r3, #12
 80077c2:	6033      	str	r3, [r6, #0]
 80077c4:	2000      	movs	r0, #0
 80077c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80078a0 <_malloc_r+0xfc>
 80077ce:	f000 f869 	bl	80078a4 <__malloc_lock>
 80077d2:	f8d8 3000 	ldr.w	r3, [r8]
 80077d6:	461c      	mov	r4, r3
 80077d8:	bb44      	cbnz	r4, 800782c <_malloc_r+0x88>
 80077da:	4629      	mov	r1, r5
 80077dc:	4630      	mov	r0, r6
 80077de:	f7ff ffbf 	bl	8007760 <sbrk_aligned>
 80077e2:	1c43      	adds	r3, r0, #1
 80077e4:	4604      	mov	r4, r0
 80077e6:	d158      	bne.n	800789a <_malloc_r+0xf6>
 80077e8:	f8d8 4000 	ldr.w	r4, [r8]
 80077ec:	4627      	mov	r7, r4
 80077ee:	2f00      	cmp	r7, #0
 80077f0:	d143      	bne.n	800787a <_malloc_r+0xd6>
 80077f2:	2c00      	cmp	r4, #0
 80077f4:	d04b      	beq.n	800788e <_malloc_r+0xea>
 80077f6:	6823      	ldr	r3, [r4, #0]
 80077f8:	4639      	mov	r1, r7
 80077fa:	4630      	mov	r0, r6
 80077fc:	eb04 0903 	add.w	r9, r4, r3
 8007800:	f000 fb5a 	bl	8007eb8 <_sbrk_r>
 8007804:	4581      	cmp	r9, r0
 8007806:	d142      	bne.n	800788e <_malloc_r+0xea>
 8007808:	6821      	ldr	r1, [r4, #0]
 800780a:	1a6d      	subs	r5, r5, r1
 800780c:	4629      	mov	r1, r5
 800780e:	4630      	mov	r0, r6
 8007810:	f7ff ffa6 	bl	8007760 <sbrk_aligned>
 8007814:	3001      	adds	r0, #1
 8007816:	d03a      	beq.n	800788e <_malloc_r+0xea>
 8007818:	6823      	ldr	r3, [r4, #0]
 800781a:	442b      	add	r3, r5
 800781c:	6023      	str	r3, [r4, #0]
 800781e:	f8d8 3000 	ldr.w	r3, [r8]
 8007822:	685a      	ldr	r2, [r3, #4]
 8007824:	bb62      	cbnz	r2, 8007880 <_malloc_r+0xdc>
 8007826:	f8c8 7000 	str.w	r7, [r8]
 800782a:	e00f      	b.n	800784c <_malloc_r+0xa8>
 800782c:	6822      	ldr	r2, [r4, #0]
 800782e:	1b52      	subs	r2, r2, r5
 8007830:	d420      	bmi.n	8007874 <_malloc_r+0xd0>
 8007832:	2a0b      	cmp	r2, #11
 8007834:	d917      	bls.n	8007866 <_malloc_r+0xc2>
 8007836:	1961      	adds	r1, r4, r5
 8007838:	42a3      	cmp	r3, r4
 800783a:	6025      	str	r5, [r4, #0]
 800783c:	bf18      	it	ne
 800783e:	6059      	strne	r1, [r3, #4]
 8007840:	6863      	ldr	r3, [r4, #4]
 8007842:	bf08      	it	eq
 8007844:	f8c8 1000 	streq.w	r1, [r8]
 8007848:	5162      	str	r2, [r4, r5]
 800784a:	604b      	str	r3, [r1, #4]
 800784c:	4630      	mov	r0, r6
 800784e:	f000 f82f 	bl	80078b0 <__malloc_unlock>
 8007852:	f104 000b 	add.w	r0, r4, #11
 8007856:	1d23      	adds	r3, r4, #4
 8007858:	f020 0007 	bic.w	r0, r0, #7
 800785c:	1ac2      	subs	r2, r0, r3
 800785e:	bf1c      	itt	ne
 8007860:	1a1b      	subne	r3, r3, r0
 8007862:	50a3      	strne	r3, [r4, r2]
 8007864:	e7af      	b.n	80077c6 <_malloc_r+0x22>
 8007866:	6862      	ldr	r2, [r4, #4]
 8007868:	42a3      	cmp	r3, r4
 800786a:	bf0c      	ite	eq
 800786c:	f8c8 2000 	streq.w	r2, [r8]
 8007870:	605a      	strne	r2, [r3, #4]
 8007872:	e7eb      	b.n	800784c <_malloc_r+0xa8>
 8007874:	4623      	mov	r3, r4
 8007876:	6864      	ldr	r4, [r4, #4]
 8007878:	e7ae      	b.n	80077d8 <_malloc_r+0x34>
 800787a:	463c      	mov	r4, r7
 800787c:	687f      	ldr	r7, [r7, #4]
 800787e:	e7b6      	b.n	80077ee <_malloc_r+0x4a>
 8007880:	461a      	mov	r2, r3
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	42a3      	cmp	r3, r4
 8007886:	d1fb      	bne.n	8007880 <_malloc_r+0xdc>
 8007888:	2300      	movs	r3, #0
 800788a:	6053      	str	r3, [r2, #4]
 800788c:	e7de      	b.n	800784c <_malloc_r+0xa8>
 800788e:	230c      	movs	r3, #12
 8007890:	6033      	str	r3, [r6, #0]
 8007892:	4630      	mov	r0, r6
 8007894:	f000 f80c 	bl	80078b0 <__malloc_unlock>
 8007898:	e794      	b.n	80077c4 <_malloc_r+0x20>
 800789a:	6005      	str	r5, [r0, #0]
 800789c:	e7d6      	b.n	800784c <_malloc_r+0xa8>
 800789e:	bf00      	nop
 80078a0:	20004cf4 	.word	0x20004cf4

080078a4 <__malloc_lock>:
 80078a4:	4801      	ldr	r0, [pc, #4]	@ (80078ac <__malloc_lock+0x8>)
 80078a6:	f7ff bf01 	b.w	80076ac <__retarget_lock_acquire_recursive>
 80078aa:	bf00      	nop
 80078ac:	20004cec 	.word	0x20004cec

080078b0 <__malloc_unlock>:
 80078b0:	4801      	ldr	r0, [pc, #4]	@ (80078b8 <__malloc_unlock+0x8>)
 80078b2:	f7ff befc 	b.w	80076ae <__retarget_lock_release_recursive>
 80078b6:	bf00      	nop
 80078b8:	20004cec 	.word	0x20004cec

080078bc <__ssputs_r>:
 80078bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078c0:	688e      	ldr	r6, [r1, #8]
 80078c2:	461f      	mov	r7, r3
 80078c4:	42be      	cmp	r6, r7
 80078c6:	680b      	ldr	r3, [r1, #0]
 80078c8:	4682      	mov	sl, r0
 80078ca:	460c      	mov	r4, r1
 80078cc:	4690      	mov	r8, r2
 80078ce:	d82d      	bhi.n	800792c <__ssputs_r+0x70>
 80078d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80078d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80078d8:	d026      	beq.n	8007928 <__ssputs_r+0x6c>
 80078da:	6965      	ldr	r5, [r4, #20]
 80078dc:	6909      	ldr	r1, [r1, #16]
 80078de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80078e2:	eba3 0901 	sub.w	r9, r3, r1
 80078e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80078ea:	1c7b      	adds	r3, r7, #1
 80078ec:	444b      	add	r3, r9
 80078ee:	106d      	asrs	r5, r5, #1
 80078f0:	429d      	cmp	r5, r3
 80078f2:	bf38      	it	cc
 80078f4:	461d      	movcc	r5, r3
 80078f6:	0553      	lsls	r3, r2, #21
 80078f8:	d527      	bpl.n	800794a <__ssputs_r+0x8e>
 80078fa:	4629      	mov	r1, r5
 80078fc:	f7ff ff52 	bl	80077a4 <_malloc_r>
 8007900:	4606      	mov	r6, r0
 8007902:	b360      	cbz	r0, 800795e <__ssputs_r+0xa2>
 8007904:	6921      	ldr	r1, [r4, #16]
 8007906:	464a      	mov	r2, r9
 8007908:	f7ff fed2 	bl	80076b0 <memcpy>
 800790c:	89a3      	ldrh	r3, [r4, #12]
 800790e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007912:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007916:	81a3      	strh	r3, [r4, #12]
 8007918:	6126      	str	r6, [r4, #16]
 800791a:	6165      	str	r5, [r4, #20]
 800791c:	444e      	add	r6, r9
 800791e:	eba5 0509 	sub.w	r5, r5, r9
 8007922:	6026      	str	r6, [r4, #0]
 8007924:	60a5      	str	r5, [r4, #8]
 8007926:	463e      	mov	r6, r7
 8007928:	42be      	cmp	r6, r7
 800792a:	d900      	bls.n	800792e <__ssputs_r+0x72>
 800792c:	463e      	mov	r6, r7
 800792e:	6820      	ldr	r0, [r4, #0]
 8007930:	4632      	mov	r2, r6
 8007932:	4641      	mov	r1, r8
 8007934:	f000 faa6 	bl	8007e84 <memmove>
 8007938:	68a3      	ldr	r3, [r4, #8]
 800793a:	1b9b      	subs	r3, r3, r6
 800793c:	60a3      	str	r3, [r4, #8]
 800793e:	6823      	ldr	r3, [r4, #0]
 8007940:	4433      	add	r3, r6
 8007942:	6023      	str	r3, [r4, #0]
 8007944:	2000      	movs	r0, #0
 8007946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800794a:	462a      	mov	r2, r5
 800794c:	f000 fac4 	bl	8007ed8 <_realloc_r>
 8007950:	4606      	mov	r6, r0
 8007952:	2800      	cmp	r0, #0
 8007954:	d1e0      	bne.n	8007918 <__ssputs_r+0x5c>
 8007956:	6921      	ldr	r1, [r4, #16]
 8007958:	4650      	mov	r0, sl
 800795a:	f7ff feb7 	bl	80076cc <_free_r>
 800795e:	230c      	movs	r3, #12
 8007960:	f8ca 3000 	str.w	r3, [sl]
 8007964:	89a3      	ldrh	r3, [r4, #12]
 8007966:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800796a:	81a3      	strh	r3, [r4, #12]
 800796c:	f04f 30ff 	mov.w	r0, #4294967295
 8007970:	e7e9      	b.n	8007946 <__ssputs_r+0x8a>
	...

08007974 <_svfiprintf_r>:
 8007974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007978:	4698      	mov	r8, r3
 800797a:	898b      	ldrh	r3, [r1, #12]
 800797c:	061b      	lsls	r3, r3, #24
 800797e:	b09d      	sub	sp, #116	@ 0x74
 8007980:	4607      	mov	r7, r0
 8007982:	460d      	mov	r5, r1
 8007984:	4614      	mov	r4, r2
 8007986:	d510      	bpl.n	80079aa <_svfiprintf_r+0x36>
 8007988:	690b      	ldr	r3, [r1, #16]
 800798a:	b973      	cbnz	r3, 80079aa <_svfiprintf_r+0x36>
 800798c:	2140      	movs	r1, #64	@ 0x40
 800798e:	f7ff ff09 	bl	80077a4 <_malloc_r>
 8007992:	6028      	str	r0, [r5, #0]
 8007994:	6128      	str	r0, [r5, #16]
 8007996:	b930      	cbnz	r0, 80079a6 <_svfiprintf_r+0x32>
 8007998:	230c      	movs	r3, #12
 800799a:	603b      	str	r3, [r7, #0]
 800799c:	f04f 30ff 	mov.w	r0, #4294967295
 80079a0:	b01d      	add	sp, #116	@ 0x74
 80079a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079a6:	2340      	movs	r3, #64	@ 0x40
 80079a8:	616b      	str	r3, [r5, #20]
 80079aa:	2300      	movs	r3, #0
 80079ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80079ae:	2320      	movs	r3, #32
 80079b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80079b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80079b8:	2330      	movs	r3, #48	@ 0x30
 80079ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007b58 <_svfiprintf_r+0x1e4>
 80079be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80079c2:	f04f 0901 	mov.w	r9, #1
 80079c6:	4623      	mov	r3, r4
 80079c8:	469a      	mov	sl, r3
 80079ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079ce:	b10a      	cbz	r2, 80079d4 <_svfiprintf_r+0x60>
 80079d0:	2a25      	cmp	r2, #37	@ 0x25
 80079d2:	d1f9      	bne.n	80079c8 <_svfiprintf_r+0x54>
 80079d4:	ebba 0b04 	subs.w	fp, sl, r4
 80079d8:	d00b      	beq.n	80079f2 <_svfiprintf_r+0x7e>
 80079da:	465b      	mov	r3, fp
 80079dc:	4622      	mov	r2, r4
 80079de:	4629      	mov	r1, r5
 80079e0:	4638      	mov	r0, r7
 80079e2:	f7ff ff6b 	bl	80078bc <__ssputs_r>
 80079e6:	3001      	adds	r0, #1
 80079e8:	f000 80a7 	beq.w	8007b3a <_svfiprintf_r+0x1c6>
 80079ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079ee:	445a      	add	r2, fp
 80079f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80079f2:	f89a 3000 	ldrb.w	r3, [sl]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	f000 809f 	beq.w	8007b3a <_svfiprintf_r+0x1c6>
 80079fc:	2300      	movs	r3, #0
 80079fe:	f04f 32ff 	mov.w	r2, #4294967295
 8007a02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a06:	f10a 0a01 	add.w	sl, sl, #1
 8007a0a:	9304      	str	r3, [sp, #16]
 8007a0c:	9307      	str	r3, [sp, #28]
 8007a0e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007a12:	931a      	str	r3, [sp, #104]	@ 0x68
 8007a14:	4654      	mov	r4, sl
 8007a16:	2205      	movs	r2, #5
 8007a18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a1c:	484e      	ldr	r0, [pc, #312]	@ (8007b58 <_svfiprintf_r+0x1e4>)
 8007a1e:	f7f8 fbe7 	bl	80001f0 <memchr>
 8007a22:	9a04      	ldr	r2, [sp, #16]
 8007a24:	b9d8      	cbnz	r0, 8007a5e <_svfiprintf_r+0xea>
 8007a26:	06d0      	lsls	r0, r2, #27
 8007a28:	bf44      	itt	mi
 8007a2a:	2320      	movmi	r3, #32
 8007a2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a30:	0711      	lsls	r1, r2, #28
 8007a32:	bf44      	itt	mi
 8007a34:	232b      	movmi	r3, #43	@ 0x2b
 8007a36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a3a:	f89a 3000 	ldrb.w	r3, [sl]
 8007a3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a40:	d015      	beq.n	8007a6e <_svfiprintf_r+0xfa>
 8007a42:	9a07      	ldr	r2, [sp, #28]
 8007a44:	4654      	mov	r4, sl
 8007a46:	2000      	movs	r0, #0
 8007a48:	f04f 0c0a 	mov.w	ip, #10
 8007a4c:	4621      	mov	r1, r4
 8007a4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a52:	3b30      	subs	r3, #48	@ 0x30
 8007a54:	2b09      	cmp	r3, #9
 8007a56:	d94b      	bls.n	8007af0 <_svfiprintf_r+0x17c>
 8007a58:	b1b0      	cbz	r0, 8007a88 <_svfiprintf_r+0x114>
 8007a5a:	9207      	str	r2, [sp, #28]
 8007a5c:	e014      	b.n	8007a88 <_svfiprintf_r+0x114>
 8007a5e:	eba0 0308 	sub.w	r3, r0, r8
 8007a62:	fa09 f303 	lsl.w	r3, r9, r3
 8007a66:	4313      	orrs	r3, r2
 8007a68:	9304      	str	r3, [sp, #16]
 8007a6a:	46a2      	mov	sl, r4
 8007a6c:	e7d2      	b.n	8007a14 <_svfiprintf_r+0xa0>
 8007a6e:	9b03      	ldr	r3, [sp, #12]
 8007a70:	1d19      	adds	r1, r3, #4
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	9103      	str	r1, [sp, #12]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	bfbb      	ittet	lt
 8007a7a:	425b      	neglt	r3, r3
 8007a7c:	f042 0202 	orrlt.w	r2, r2, #2
 8007a80:	9307      	strge	r3, [sp, #28]
 8007a82:	9307      	strlt	r3, [sp, #28]
 8007a84:	bfb8      	it	lt
 8007a86:	9204      	strlt	r2, [sp, #16]
 8007a88:	7823      	ldrb	r3, [r4, #0]
 8007a8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007a8c:	d10a      	bne.n	8007aa4 <_svfiprintf_r+0x130>
 8007a8e:	7863      	ldrb	r3, [r4, #1]
 8007a90:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a92:	d132      	bne.n	8007afa <_svfiprintf_r+0x186>
 8007a94:	9b03      	ldr	r3, [sp, #12]
 8007a96:	1d1a      	adds	r2, r3, #4
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	9203      	str	r2, [sp, #12]
 8007a9c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007aa0:	3402      	adds	r4, #2
 8007aa2:	9305      	str	r3, [sp, #20]
 8007aa4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007b68 <_svfiprintf_r+0x1f4>
 8007aa8:	7821      	ldrb	r1, [r4, #0]
 8007aaa:	2203      	movs	r2, #3
 8007aac:	4650      	mov	r0, sl
 8007aae:	f7f8 fb9f 	bl	80001f0 <memchr>
 8007ab2:	b138      	cbz	r0, 8007ac4 <_svfiprintf_r+0x150>
 8007ab4:	9b04      	ldr	r3, [sp, #16]
 8007ab6:	eba0 000a 	sub.w	r0, r0, sl
 8007aba:	2240      	movs	r2, #64	@ 0x40
 8007abc:	4082      	lsls	r2, r0
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	3401      	adds	r4, #1
 8007ac2:	9304      	str	r3, [sp, #16]
 8007ac4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ac8:	4824      	ldr	r0, [pc, #144]	@ (8007b5c <_svfiprintf_r+0x1e8>)
 8007aca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007ace:	2206      	movs	r2, #6
 8007ad0:	f7f8 fb8e 	bl	80001f0 <memchr>
 8007ad4:	2800      	cmp	r0, #0
 8007ad6:	d036      	beq.n	8007b46 <_svfiprintf_r+0x1d2>
 8007ad8:	4b21      	ldr	r3, [pc, #132]	@ (8007b60 <_svfiprintf_r+0x1ec>)
 8007ada:	bb1b      	cbnz	r3, 8007b24 <_svfiprintf_r+0x1b0>
 8007adc:	9b03      	ldr	r3, [sp, #12]
 8007ade:	3307      	adds	r3, #7
 8007ae0:	f023 0307 	bic.w	r3, r3, #7
 8007ae4:	3308      	adds	r3, #8
 8007ae6:	9303      	str	r3, [sp, #12]
 8007ae8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007aea:	4433      	add	r3, r6
 8007aec:	9309      	str	r3, [sp, #36]	@ 0x24
 8007aee:	e76a      	b.n	80079c6 <_svfiprintf_r+0x52>
 8007af0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007af4:	460c      	mov	r4, r1
 8007af6:	2001      	movs	r0, #1
 8007af8:	e7a8      	b.n	8007a4c <_svfiprintf_r+0xd8>
 8007afa:	2300      	movs	r3, #0
 8007afc:	3401      	adds	r4, #1
 8007afe:	9305      	str	r3, [sp, #20]
 8007b00:	4619      	mov	r1, r3
 8007b02:	f04f 0c0a 	mov.w	ip, #10
 8007b06:	4620      	mov	r0, r4
 8007b08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b0c:	3a30      	subs	r2, #48	@ 0x30
 8007b0e:	2a09      	cmp	r2, #9
 8007b10:	d903      	bls.n	8007b1a <_svfiprintf_r+0x1a6>
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d0c6      	beq.n	8007aa4 <_svfiprintf_r+0x130>
 8007b16:	9105      	str	r1, [sp, #20]
 8007b18:	e7c4      	b.n	8007aa4 <_svfiprintf_r+0x130>
 8007b1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b1e:	4604      	mov	r4, r0
 8007b20:	2301      	movs	r3, #1
 8007b22:	e7f0      	b.n	8007b06 <_svfiprintf_r+0x192>
 8007b24:	ab03      	add	r3, sp, #12
 8007b26:	9300      	str	r3, [sp, #0]
 8007b28:	462a      	mov	r2, r5
 8007b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8007b64 <_svfiprintf_r+0x1f0>)
 8007b2c:	a904      	add	r1, sp, #16
 8007b2e:	4638      	mov	r0, r7
 8007b30:	f3af 8000 	nop.w
 8007b34:	1c42      	adds	r2, r0, #1
 8007b36:	4606      	mov	r6, r0
 8007b38:	d1d6      	bne.n	8007ae8 <_svfiprintf_r+0x174>
 8007b3a:	89ab      	ldrh	r3, [r5, #12]
 8007b3c:	065b      	lsls	r3, r3, #25
 8007b3e:	f53f af2d 	bmi.w	800799c <_svfiprintf_r+0x28>
 8007b42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b44:	e72c      	b.n	80079a0 <_svfiprintf_r+0x2c>
 8007b46:	ab03      	add	r3, sp, #12
 8007b48:	9300      	str	r3, [sp, #0]
 8007b4a:	462a      	mov	r2, r5
 8007b4c:	4b05      	ldr	r3, [pc, #20]	@ (8007b64 <_svfiprintf_r+0x1f0>)
 8007b4e:	a904      	add	r1, sp, #16
 8007b50:	4638      	mov	r0, r7
 8007b52:	f000 f879 	bl	8007c48 <_printf_i>
 8007b56:	e7ed      	b.n	8007b34 <_svfiprintf_r+0x1c0>
 8007b58:	0800822c 	.word	0x0800822c
 8007b5c:	08008236 	.word	0x08008236
 8007b60:	00000000 	.word	0x00000000
 8007b64:	080078bd 	.word	0x080078bd
 8007b68:	08008232 	.word	0x08008232

08007b6c <_printf_common>:
 8007b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b70:	4616      	mov	r6, r2
 8007b72:	4698      	mov	r8, r3
 8007b74:	688a      	ldr	r2, [r1, #8]
 8007b76:	690b      	ldr	r3, [r1, #16]
 8007b78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	bfb8      	it	lt
 8007b80:	4613      	movlt	r3, r2
 8007b82:	6033      	str	r3, [r6, #0]
 8007b84:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007b88:	4607      	mov	r7, r0
 8007b8a:	460c      	mov	r4, r1
 8007b8c:	b10a      	cbz	r2, 8007b92 <_printf_common+0x26>
 8007b8e:	3301      	adds	r3, #1
 8007b90:	6033      	str	r3, [r6, #0]
 8007b92:	6823      	ldr	r3, [r4, #0]
 8007b94:	0699      	lsls	r1, r3, #26
 8007b96:	bf42      	ittt	mi
 8007b98:	6833      	ldrmi	r3, [r6, #0]
 8007b9a:	3302      	addmi	r3, #2
 8007b9c:	6033      	strmi	r3, [r6, #0]
 8007b9e:	6825      	ldr	r5, [r4, #0]
 8007ba0:	f015 0506 	ands.w	r5, r5, #6
 8007ba4:	d106      	bne.n	8007bb4 <_printf_common+0x48>
 8007ba6:	f104 0a19 	add.w	sl, r4, #25
 8007baa:	68e3      	ldr	r3, [r4, #12]
 8007bac:	6832      	ldr	r2, [r6, #0]
 8007bae:	1a9b      	subs	r3, r3, r2
 8007bb0:	42ab      	cmp	r3, r5
 8007bb2:	dc26      	bgt.n	8007c02 <_printf_common+0x96>
 8007bb4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007bb8:	6822      	ldr	r2, [r4, #0]
 8007bba:	3b00      	subs	r3, #0
 8007bbc:	bf18      	it	ne
 8007bbe:	2301      	movne	r3, #1
 8007bc0:	0692      	lsls	r2, r2, #26
 8007bc2:	d42b      	bmi.n	8007c1c <_printf_common+0xb0>
 8007bc4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007bc8:	4641      	mov	r1, r8
 8007bca:	4638      	mov	r0, r7
 8007bcc:	47c8      	blx	r9
 8007bce:	3001      	adds	r0, #1
 8007bd0:	d01e      	beq.n	8007c10 <_printf_common+0xa4>
 8007bd2:	6823      	ldr	r3, [r4, #0]
 8007bd4:	6922      	ldr	r2, [r4, #16]
 8007bd6:	f003 0306 	and.w	r3, r3, #6
 8007bda:	2b04      	cmp	r3, #4
 8007bdc:	bf02      	ittt	eq
 8007bde:	68e5      	ldreq	r5, [r4, #12]
 8007be0:	6833      	ldreq	r3, [r6, #0]
 8007be2:	1aed      	subeq	r5, r5, r3
 8007be4:	68a3      	ldr	r3, [r4, #8]
 8007be6:	bf0c      	ite	eq
 8007be8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007bec:	2500      	movne	r5, #0
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	bfc4      	itt	gt
 8007bf2:	1a9b      	subgt	r3, r3, r2
 8007bf4:	18ed      	addgt	r5, r5, r3
 8007bf6:	2600      	movs	r6, #0
 8007bf8:	341a      	adds	r4, #26
 8007bfa:	42b5      	cmp	r5, r6
 8007bfc:	d11a      	bne.n	8007c34 <_printf_common+0xc8>
 8007bfe:	2000      	movs	r0, #0
 8007c00:	e008      	b.n	8007c14 <_printf_common+0xa8>
 8007c02:	2301      	movs	r3, #1
 8007c04:	4652      	mov	r2, sl
 8007c06:	4641      	mov	r1, r8
 8007c08:	4638      	mov	r0, r7
 8007c0a:	47c8      	blx	r9
 8007c0c:	3001      	adds	r0, #1
 8007c0e:	d103      	bne.n	8007c18 <_printf_common+0xac>
 8007c10:	f04f 30ff 	mov.w	r0, #4294967295
 8007c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c18:	3501      	adds	r5, #1
 8007c1a:	e7c6      	b.n	8007baa <_printf_common+0x3e>
 8007c1c:	18e1      	adds	r1, r4, r3
 8007c1e:	1c5a      	adds	r2, r3, #1
 8007c20:	2030      	movs	r0, #48	@ 0x30
 8007c22:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007c26:	4422      	add	r2, r4
 8007c28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007c2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007c30:	3302      	adds	r3, #2
 8007c32:	e7c7      	b.n	8007bc4 <_printf_common+0x58>
 8007c34:	2301      	movs	r3, #1
 8007c36:	4622      	mov	r2, r4
 8007c38:	4641      	mov	r1, r8
 8007c3a:	4638      	mov	r0, r7
 8007c3c:	47c8      	blx	r9
 8007c3e:	3001      	adds	r0, #1
 8007c40:	d0e6      	beq.n	8007c10 <_printf_common+0xa4>
 8007c42:	3601      	adds	r6, #1
 8007c44:	e7d9      	b.n	8007bfa <_printf_common+0x8e>
	...

08007c48 <_printf_i>:
 8007c48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c4c:	7e0f      	ldrb	r7, [r1, #24]
 8007c4e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007c50:	2f78      	cmp	r7, #120	@ 0x78
 8007c52:	4691      	mov	r9, r2
 8007c54:	4680      	mov	r8, r0
 8007c56:	460c      	mov	r4, r1
 8007c58:	469a      	mov	sl, r3
 8007c5a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007c5e:	d807      	bhi.n	8007c70 <_printf_i+0x28>
 8007c60:	2f62      	cmp	r7, #98	@ 0x62
 8007c62:	d80a      	bhi.n	8007c7a <_printf_i+0x32>
 8007c64:	2f00      	cmp	r7, #0
 8007c66:	f000 80d1 	beq.w	8007e0c <_printf_i+0x1c4>
 8007c6a:	2f58      	cmp	r7, #88	@ 0x58
 8007c6c:	f000 80b8 	beq.w	8007de0 <_printf_i+0x198>
 8007c70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c74:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007c78:	e03a      	b.n	8007cf0 <_printf_i+0xa8>
 8007c7a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007c7e:	2b15      	cmp	r3, #21
 8007c80:	d8f6      	bhi.n	8007c70 <_printf_i+0x28>
 8007c82:	a101      	add	r1, pc, #4	@ (adr r1, 8007c88 <_printf_i+0x40>)
 8007c84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c88:	08007ce1 	.word	0x08007ce1
 8007c8c:	08007cf5 	.word	0x08007cf5
 8007c90:	08007c71 	.word	0x08007c71
 8007c94:	08007c71 	.word	0x08007c71
 8007c98:	08007c71 	.word	0x08007c71
 8007c9c:	08007c71 	.word	0x08007c71
 8007ca0:	08007cf5 	.word	0x08007cf5
 8007ca4:	08007c71 	.word	0x08007c71
 8007ca8:	08007c71 	.word	0x08007c71
 8007cac:	08007c71 	.word	0x08007c71
 8007cb0:	08007c71 	.word	0x08007c71
 8007cb4:	08007df3 	.word	0x08007df3
 8007cb8:	08007d1f 	.word	0x08007d1f
 8007cbc:	08007dad 	.word	0x08007dad
 8007cc0:	08007c71 	.word	0x08007c71
 8007cc4:	08007c71 	.word	0x08007c71
 8007cc8:	08007e15 	.word	0x08007e15
 8007ccc:	08007c71 	.word	0x08007c71
 8007cd0:	08007d1f 	.word	0x08007d1f
 8007cd4:	08007c71 	.word	0x08007c71
 8007cd8:	08007c71 	.word	0x08007c71
 8007cdc:	08007db5 	.word	0x08007db5
 8007ce0:	6833      	ldr	r3, [r6, #0]
 8007ce2:	1d1a      	adds	r2, r3, #4
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	6032      	str	r2, [r6, #0]
 8007ce8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007cec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	e09c      	b.n	8007e2e <_printf_i+0x1e6>
 8007cf4:	6833      	ldr	r3, [r6, #0]
 8007cf6:	6820      	ldr	r0, [r4, #0]
 8007cf8:	1d19      	adds	r1, r3, #4
 8007cfa:	6031      	str	r1, [r6, #0]
 8007cfc:	0606      	lsls	r6, r0, #24
 8007cfe:	d501      	bpl.n	8007d04 <_printf_i+0xbc>
 8007d00:	681d      	ldr	r5, [r3, #0]
 8007d02:	e003      	b.n	8007d0c <_printf_i+0xc4>
 8007d04:	0645      	lsls	r5, r0, #25
 8007d06:	d5fb      	bpl.n	8007d00 <_printf_i+0xb8>
 8007d08:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007d0c:	2d00      	cmp	r5, #0
 8007d0e:	da03      	bge.n	8007d18 <_printf_i+0xd0>
 8007d10:	232d      	movs	r3, #45	@ 0x2d
 8007d12:	426d      	negs	r5, r5
 8007d14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d18:	4858      	ldr	r0, [pc, #352]	@ (8007e7c <_printf_i+0x234>)
 8007d1a:	230a      	movs	r3, #10
 8007d1c:	e011      	b.n	8007d42 <_printf_i+0xfa>
 8007d1e:	6821      	ldr	r1, [r4, #0]
 8007d20:	6833      	ldr	r3, [r6, #0]
 8007d22:	0608      	lsls	r0, r1, #24
 8007d24:	f853 5b04 	ldr.w	r5, [r3], #4
 8007d28:	d402      	bmi.n	8007d30 <_printf_i+0xe8>
 8007d2a:	0649      	lsls	r1, r1, #25
 8007d2c:	bf48      	it	mi
 8007d2e:	b2ad      	uxthmi	r5, r5
 8007d30:	2f6f      	cmp	r7, #111	@ 0x6f
 8007d32:	4852      	ldr	r0, [pc, #328]	@ (8007e7c <_printf_i+0x234>)
 8007d34:	6033      	str	r3, [r6, #0]
 8007d36:	bf14      	ite	ne
 8007d38:	230a      	movne	r3, #10
 8007d3a:	2308      	moveq	r3, #8
 8007d3c:	2100      	movs	r1, #0
 8007d3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007d42:	6866      	ldr	r6, [r4, #4]
 8007d44:	60a6      	str	r6, [r4, #8]
 8007d46:	2e00      	cmp	r6, #0
 8007d48:	db05      	blt.n	8007d56 <_printf_i+0x10e>
 8007d4a:	6821      	ldr	r1, [r4, #0]
 8007d4c:	432e      	orrs	r6, r5
 8007d4e:	f021 0104 	bic.w	r1, r1, #4
 8007d52:	6021      	str	r1, [r4, #0]
 8007d54:	d04b      	beq.n	8007dee <_printf_i+0x1a6>
 8007d56:	4616      	mov	r6, r2
 8007d58:	fbb5 f1f3 	udiv	r1, r5, r3
 8007d5c:	fb03 5711 	mls	r7, r3, r1, r5
 8007d60:	5dc7      	ldrb	r7, [r0, r7]
 8007d62:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007d66:	462f      	mov	r7, r5
 8007d68:	42bb      	cmp	r3, r7
 8007d6a:	460d      	mov	r5, r1
 8007d6c:	d9f4      	bls.n	8007d58 <_printf_i+0x110>
 8007d6e:	2b08      	cmp	r3, #8
 8007d70:	d10b      	bne.n	8007d8a <_printf_i+0x142>
 8007d72:	6823      	ldr	r3, [r4, #0]
 8007d74:	07df      	lsls	r7, r3, #31
 8007d76:	d508      	bpl.n	8007d8a <_printf_i+0x142>
 8007d78:	6923      	ldr	r3, [r4, #16]
 8007d7a:	6861      	ldr	r1, [r4, #4]
 8007d7c:	4299      	cmp	r1, r3
 8007d7e:	bfde      	ittt	le
 8007d80:	2330      	movle	r3, #48	@ 0x30
 8007d82:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007d86:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007d8a:	1b92      	subs	r2, r2, r6
 8007d8c:	6122      	str	r2, [r4, #16]
 8007d8e:	f8cd a000 	str.w	sl, [sp]
 8007d92:	464b      	mov	r3, r9
 8007d94:	aa03      	add	r2, sp, #12
 8007d96:	4621      	mov	r1, r4
 8007d98:	4640      	mov	r0, r8
 8007d9a:	f7ff fee7 	bl	8007b6c <_printf_common>
 8007d9e:	3001      	adds	r0, #1
 8007da0:	d14a      	bne.n	8007e38 <_printf_i+0x1f0>
 8007da2:	f04f 30ff 	mov.w	r0, #4294967295
 8007da6:	b004      	add	sp, #16
 8007da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dac:	6823      	ldr	r3, [r4, #0]
 8007dae:	f043 0320 	orr.w	r3, r3, #32
 8007db2:	6023      	str	r3, [r4, #0]
 8007db4:	4832      	ldr	r0, [pc, #200]	@ (8007e80 <_printf_i+0x238>)
 8007db6:	2778      	movs	r7, #120	@ 0x78
 8007db8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007dbc:	6823      	ldr	r3, [r4, #0]
 8007dbe:	6831      	ldr	r1, [r6, #0]
 8007dc0:	061f      	lsls	r7, r3, #24
 8007dc2:	f851 5b04 	ldr.w	r5, [r1], #4
 8007dc6:	d402      	bmi.n	8007dce <_printf_i+0x186>
 8007dc8:	065f      	lsls	r7, r3, #25
 8007dca:	bf48      	it	mi
 8007dcc:	b2ad      	uxthmi	r5, r5
 8007dce:	6031      	str	r1, [r6, #0]
 8007dd0:	07d9      	lsls	r1, r3, #31
 8007dd2:	bf44      	itt	mi
 8007dd4:	f043 0320 	orrmi.w	r3, r3, #32
 8007dd8:	6023      	strmi	r3, [r4, #0]
 8007dda:	b11d      	cbz	r5, 8007de4 <_printf_i+0x19c>
 8007ddc:	2310      	movs	r3, #16
 8007dde:	e7ad      	b.n	8007d3c <_printf_i+0xf4>
 8007de0:	4826      	ldr	r0, [pc, #152]	@ (8007e7c <_printf_i+0x234>)
 8007de2:	e7e9      	b.n	8007db8 <_printf_i+0x170>
 8007de4:	6823      	ldr	r3, [r4, #0]
 8007de6:	f023 0320 	bic.w	r3, r3, #32
 8007dea:	6023      	str	r3, [r4, #0]
 8007dec:	e7f6      	b.n	8007ddc <_printf_i+0x194>
 8007dee:	4616      	mov	r6, r2
 8007df0:	e7bd      	b.n	8007d6e <_printf_i+0x126>
 8007df2:	6833      	ldr	r3, [r6, #0]
 8007df4:	6825      	ldr	r5, [r4, #0]
 8007df6:	6961      	ldr	r1, [r4, #20]
 8007df8:	1d18      	adds	r0, r3, #4
 8007dfa:	6030      	str	r0, [r6, #0]
 8007dfc:	062e      	lsls	r6, r5, #24
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	d501      	bpl.n	8007e06 <_printf_i+0x1be>
 8007e02:	6019      	str	r1, [r3, #0]
 8007e04:	e002      	b.n	8007e0c <_printf_i+0x1c4>
 8007e06:	0668      	lsls	r0, r5, #25
 8007e08:	d5fb      	bpl.n	8007e02 <_printf_i+0x1ba>
 8007e0a:	8019      	strh	r1, [r3, #0]
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	6123      	str	r3, [r4, #16]
 8007e10:	4616      	mov	r6, r2
 8007e12:	e7bc      	b.n	8007d8e <_printf_i+0x146>
 8007e14:	6833      	ldr	r3, [r6, #0]
 8007e16:	1d1a      	adds	r2, r3, #4
 8007e18:	6032      	str	r2, [r6, #0]
 8007e1a:	681e      	ldr	r6, [r3, #0]
 8007e1c:	6862      	ldr	r2, [r4, #4]
 8007e1e:	2100      	movs	r1, #0
 8007e20:	4630      	mov	r0, r6
 8007e22:	f7f8 f9e5 	bl	80001f0 <memchr>
 8007e26:	b108      	cbz	r0, 8007e2c <_printf_i+0x1e4>
 8007e28:	1b80      	subs	r0, r0, r6
 8007e2a:	6060      	str	r0, [r4, #4]
 8007e2c:	6863      	ldr	r3, [r4, #4]
 8007e2e:	6123      	str	r3, [r4, #16]
 8007e30:	2300      	movs	r3, #0
 8007e32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e36:	e7aa      	b.n	8007d8e <_printf_i+0x146>
 8007e38:	6923      	ldr	r3, [r4, #16]
 8007e3a:	4632      	mov	r2, r6
 8007e3c:	4649      	mov	r1, r9
 8007e3e:	4640      	mov	r0, r8
 8007e40:	47d0      	blx	sl
 8007e42:	3001      	adds	r0, #1
 8007e44:	d0ad      	beq.n	8007da2 <_printf_i+0x15a>
 8007e46:	6823      	ldr	r3, [r4, #0]
 8007e48:	079b      	lsls	r3, r3, #30
 8007e4a:	d413      	bmi.n	8007e74 <_printf_i+0x22c>
 8007e4c:	68e0      	ldr	r0, [r4, #12]
 8007e4e:	9b03      	ldr	r3, [sp, #12]
 8007e50:	4298      	cmp	r0, r3
 8007e52:	bfb8      	it	lt
 8007e54:	4618      	movlt	r0, r3
 8007e56:	e7a6      	b.n	8007da6 <_printf_i+0x15e>
 8007e58:	2301      	movs	r3, #1
 8007e5a:	4632      	mov	r2, r6
 8007e5c:	4649      	mov	r1, r9
 8007e5e:	4640      	mov	r0, r8
 8007e60:	47d0      	blx	sl
 8007e62:	3001      	adds	r0, #1
 8007e64:	d09d      	beq.n	8007da2 <_printf_i+0x15a>
 8007e66:	3501      	adds	r5, #1
 8007e68:	68e3      	ldr	r3, [r4, #12]
 8007e6a:	9903      	ldr	r1, [sp, #12]
 8007e6c:	1a5b      	subs	r3, r3, r1
 8007e6e:	42ab      	cmp	r3, r5
 8007e70:	dcf2      	bgt.n	8007e58 <_printf_i+0x210>
 8007e72:	e7eb      	b.n	8007e4c <_printf_i+0x204>
 8007e74:	2500      	movs	r5, #0
 8007e76:	f104 0619 	add.w	r6, r4, #25
 8007e7a:	e7f5      	b.n	8007e68 <_printf_i+0x220>
 8007e7c:	0800823d 	.word	0x0800823d
 8007e80:	0800824e 	.word	0x0800824e

08007e84 <memmove>:
 8007e84:	4288      	cmp	r0, r1
 8007e86:	b510      	push	{r4, lr}
 8007e88:	eb01 0402 	add.w	r4, r1, r2
 8007e8c:	d902      	bls.n	8007e94 <memmove+0x10>
 8007e8e:	4284      	cmp	r4, r0
 8007e90:	4623      	mov	r3, r4
 8007e92:	d807      	bhi.n	8007ea4 <memmove+0x20>
 8007e94:	1e43      	subs	r3, r0, #1
 8007e96:	42a1      	cmp	r1, r4
 8007e98:	d008      	beq.n	8007eac <memmove+0x28>
 8007e9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ea2:	e7f8      	b.n	8007e96 <memmove+0x12>
 8007ea4:	4402      	add	r2, r0
 8007ea6:	4601      	mov	r1, r0
 8007ea8:	428a      	cmp	r2, r1
 8007eaa:	d100      	bne.n	8007eae <memmove+0x2a>
 8007eac:	bd10      	pop	{r4, pc}
 8007eae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007eb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007eb6:	e7f7      	b.n	8007ea8 <memmove+0x24>

08007eb8 <_sbrk_r>:
 8007eb8:	b538      	push	{r3, r4, r5, lr}
 8007eba:	4d06      	ldr	r5, [pc, #24]	@ (8007ed4 <_sbrk_r+0x1c>)
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	4604      	mov	r4, r0
 8007ec0:	4608      	mov	r0, r1
 8007ec2:	602b      	str	r3, [r5, #0]
 8007ec4:	f7f9 f8a4 	bl	8001010 <_sbrk>
 8007ec8:	1c43      	adds	r3, r0, #1
 8007eca:	d102      	bne.n	8007ed2 <_sbrk_r+0x1a>
 8007ecc:	682b      	ldr	r3, [r5, #0]
 8007ece:	b103      	cbz	r3, 8007ed2 <_sbrk_r+0x1a>
 8007ed0:	6023      	str	r3, [r4, #0]
 8007ed2:	bd38      	pop	{r3, r4, r5, pc}
 8007ed4:	20004ce8 	.word	0x20004ce8

08007ed8 <_realloc_r>:
 8007ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007edc:	4607      	mov	r7, r0
 8007ede:	4614      	mov	r4, r2
 8007ee0:	460d      	mov	r5, r1
 8007ee2:	b921      	cbnz	r1, 8007eee <_realloc_r+0x16>
 8007ee4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ee8:	4611      	mov	r1, r2
 8007eea:	f7ff bc5b 	b.w	80077a4 <_malloc_r>
 8007eee:	b92a      	cbnz	r2, 8007efc <_realloc_r+0x24>
 8007ef0:	f7ff fbec 	bl	80076cc <_free_r>
 8007ef4:	4625      	mov	r5, r4
 8007ef6:	4628      	mov	r0, r5
 8007ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007efc:	f000 f81a 	bl	8007f34 <_malloc_usable_size_r>
 8007f00:	4284      	cmp	r4, r0
 8007f02:	4606      	mov	r6, r0
 8007f04:	d802      	bhi.n	8007f0c <_realloc_r+0x34>
 8007f06:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007f0a:	d8f4      	bhi.n	8007ef6 <_realloc_r+0x1e>
 8007f0c:	4621      	mov	r1, r4
 8007f0e:	4638      	mov	r0, r7
 8007f10:	f7ff fc48 	bl	80077a4 <_malloc_r>
 8007f14:	4680      	mov	r8, r0
 8007f16:	b908      	cbnz	r0, 8007f1c <_realloc_r+0x44>
 8007f18:	4645      	mov	r5, r8
 8007f1a:	e7ec      	b.n	8007ef6 <_realloc_r+0x1e>
 8007f1c:	42b4      	cmp	r4, r6
 8007f1e:	4622      	mov	r2, r4
 8007f20:	4629      	mov	r1, r5
 8007f22:	bf28      	it	cs
 8007f24:	4632      	movcs	r2, r6
 8007f26:	f7ff fbc3 	bl	80076b0 <memcpy>
 8007f2a:	4629      	mov	r1, r5
 8007f2c:	4638      	mov	r0, r7
 8007f2e:	f7ff fbcd 	bl	80076cc <_free_r>
 8007f32:	e7f1      	b.n	8007f18 <_realloc_r+0x40>

08007f34 <_malloc_usable_size_r>:
 8007f34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f38:	1f18      	subs	r0, r3, #4
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	bfbc      	itt	lt
 8007f3e:	580b      	ldrlt	r3, [r1, r0]
 8007f40:	18c0      	addlt	r0, r0, r3
 8007f42:	4770      	bx	lr

08007f44 <_init>:
 8007f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f46:	bf00      	nop
 8007f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f4a:	bc08      	pop	{r3}
 8007f4c:	469e      	mov	lr, r3
 8007f4e:	4770      	bx	lr

08007f50 <_fini>:
 8007f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f52:	bf00      	nop
 8007f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f56:	bc08      	pop	{r3}
 8007f58:	469e      	mov	lr, r3
 8007f5a:	4770      	bx	lr
